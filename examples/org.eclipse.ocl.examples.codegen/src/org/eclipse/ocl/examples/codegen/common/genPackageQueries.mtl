[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::common::genPackageQueries('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel','http://www.eclipse.org/ocl/3.1.0/OCL4Acceleo')/]

[import org::eclipse::ocl::examples::codegen::common::emitQueries/]
[import org::eclipse::ocl::examples::codegen::common::nameQueries/]
[import org::eclipse::ocl::examples::codegen::common::pivotQueries/]
[import org::eclipse::ocl::examples::codegen::common::stringQueries/]

[query public getAnotherType(genPackage : GenPackage, type : Type) : Type = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getAnotherType(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Type)', Sequence{genPackage, type}) /]

[query public getBodiesClassSuffix(genPackage : GenPackage) : String = 'Bodies' /]
	
[query public getBodiesPackageName(genPackage : GenPackage) : String = 'bodies' /]
	
[query public getCopyright(genPackage : GenPackage, indentation : String) : String =
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getCopyright(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, java.lang.String)', Sequence{genPackage, indentation}) /]

[query public getEcorePackageName(genPackage : GenPackage) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getEcorePackageName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public getEscapedInterfaceName(type : Type, genPackage : GenPackage) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getEscapedInterfaceName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Type)', Sequence{genPackage, type}) /]

[query public getEscapedLiteralsName(type : Type, genPackage : GenPackage) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getEscapedLiteralsName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Type)', Sequence{genPackage, type}) /]

[query public getEscapedPropertyType(genPackage : GenPackage, elem : Property) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getEscapedPropertyType(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Property)', Sequence{genPackage, elem}) /]

[query private getGenPackage(ast : Package, genPackage : GenPackage) : GenPackage = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getGenPackage(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Package)', Sequence{genPackage, ast}) /]

[query public getImplementationName(genPackage : GenPackage, elem : Constraint) : String = 
elem.eContainer().oclAsType(Type).getQualifiedBodiesClassName(genPackage) + '._' + elem.stereotype + '_' + elem.name + '.INSTANCE'/]

[query public getImplementationName(genPackage : GenPackage, elem : Operation) : String = 
if elem.implementationClass->notEmpty()
then elem.implementationClass + '.INSTANCE'
else
    let pConstraint : Sequence(Constraint) = elem.ownedRule->select(true)->asSequence() in
    if pConstraint->notEmpty() then elem.owningType.getQualifiedBodiesClassName(genPackage) + '._' + elem.name + '_' + pConstraint->first().stereotype + '_.INSTANCE'
	else 'null'
    endif
endif/]

[query public getImplementationName(genPackage : GenPackage, elem : Property) : String = 
if elem.implementationClass->notEmpty()
then elem.implementationClass + '.INSTANCE'
else if genPackage.hasEcore(elem) then
    let pConstraint : Sequence(Constraint) = elem.ownedRule->select(true)->asSequence() in
    if pConstraint->notEmpty() then elem.owningType.getQualifiedBodiesClassName(genPackage) + '._' + elem.name + '_' + pConstraint->first().stereotype + '_.INSTANCE'
    else 'new <%org.eclipse.ocl.examples.library.ecore.EcoreLibraryProperty%>(' + genPackage.prefix + 'Package.Literals.' + elem.owningType.upperName() + '__' + elem.upperName() + ')'
    endif
else if (elem.opposite <> null) and genPackage.hasEcore(elem.opposite) then 'new <%org.eclipse.ocl.examples.library.ecore.EcoreLibraryOppositeProperty%>(' + genPackage.prefix + 'Package.Literals.' + elem.opposite.owningType.upperName() + '__' + elem.opposite.upperName() + ')'
else 'null'
endif endif endif/]
	
[query public getInterfacePackageName(genPackage : GenPackage) : String =
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getInterfacePackageName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]
	
[query public getOperationID(genPackage : GenPackage, type : Type, rule : Constraint, diagnosticCode : Boolean) : String =
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getOperationID(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Type, org.eclipse.ocl.examples.pivot.Constraint, java.lang.Boolean)', Sequence{genPackage, type, rule, diagnosticCode}) /]

[query public getOperationResultType(genPackage : GenPackage, elem : Operation) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getOperationResultType(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Operation)', Sequence{genPackage, elem}) /]

[query public getOperationReturnType(genPackage : GenPackage, elem : Operation) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getOperationReturnType(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Operation)', Sequence{genPackage, elem}) /]

[query public getPivotPackage(genPackage : GenPackage) : Package =
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getPivotPackage(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public getPropertyGetter(genPackage : GenPackage, elem : Property) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getPropertyGetter(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Property)', Sequence{genPackage, elem}) /]

[query public getPropertyResultType(genPackage : GenPackage, elem : Property) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getPropertyResultType(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Property)', Sequence{genPackage, elem}) /]

[query public getPropertyReturnType(genPackage : GenPackage, elem : Property) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getPropertyReturnType(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Property)', Sequence{genPackage, elem}) /]

[query public getQualifiedBodiesPackageName(genPackage : GenPackage) : String =
genPackage.getQualifiedPackageName() + '.' + genPackage.getBodiesPackageName() /]

[query public getQualifiedBodiesClassName(pType : Type, genPackage : GenPackage) : String = 
let gPackage : GenPackage = pType._package.getGenPackage(genPackage) in
gPackage.getQualifiedBodiesPackageName() + '.'  + pType.name + genPackage.getBodiesClassSuffix()/]

[query public getQualifiedEcoreClassName(pType : Type, genPackage : GenPackage) : String = 
let gPackage : GenPackage = pType._package.getGenPackage(genPackage) in
gPackage.getQualifiedPackageName() + '.'  + pType.name/]

[query public getQualifiedPackageName(genPackage : GenPackage) : String =
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getQualifiedPackageName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public getQualifiedTablesClassName(type : Type, genPackage : GenPackage) : String = 
let gPackage : GenPackage = type._package.getGenPackage(genPackage) in
 if gPackage->notEmpty() then getInterfacePackageName(gPackage) + '.' + gPackage.getTablesClassName() else 'UnknownMetaModelTables' endif /]

[query public getQualifiedTypeLiteralName(genPackage : GenPackage, elem : Type, scope : Package) : String = 
let rawCls : Class = elem.getUnspecializedClass() in
if rawCls.oclIsUndefined() then 'null' else rawCls.getTablesClassName(genPackage) + '.Types._' + rawCls.name endif /]
	
[query public getQualifiedValidatorClassName(genPackage : GenPackage) : String =
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getQualifiedValidatorClassName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public getQualifyingPackage(genPackage : GenPackage, type : Type) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getQualifyingPackage(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Type)', Sequence{genPackage, type}) /]

[query public emitManagerArity(genPackage : GenPackage, arity : OCLInteger) : String = 
if arity = 1 then 'ExecutorSingleIterationManager'
else if arity = 2 then 'ExecutorDoubleIterationManager'
else 'ExecutorMultipleIterationManager' endif endif/]

[query public emitOperationArity(dummy : OclAny, arity : OCLInteger) : String = 
if arity = 0 then 'UnaryOperation'
else if arity = 1 then 'BinaryOperation'
else if arity = 2 then 'TernaryOperation'
else 'Operation' endif endif endif/]

[query public getSharedLibrary(genPackage : GenPackage) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'getSharedLibrary(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public getTablesClassName(genPackage : GenPackage) : String = 
genPackage.prefix + 'Tables' /]

[template public getTablesClassName(ast : Package, genPackage : GenPackage)] 
[ast.getGenPackage(genPackage).prefix/]Tables[/template]

[template public getTablesClassName(ast : Type, genPackage : GenPackage)] 
[ast._package.getGenPackage(genPackage).prefix/]Tables[/template]

[query public hasAnotherType(genPackage : GenPackage, type : Type) : Boolean = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'hasAnotherType(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Type)', Sequence{genPackage, type}) /]

[query public hasEcore(genPackage : GenPackage, property : Property) : Boolean = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'hasEcore(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Property)', Sequence{genPackage, property}) /]

[query public hasEcore(genPackage : GenPackage, type : Type) : Boolean = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'hasEcore(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Type)', Sequence{genPackage, type}) /]

[query public hasSharedLibrary(genPackage : GenPackage) : Boolean = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'hasSharedLibrary(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public isFinal(genPackage : GenPackage, operation : Operation) : Boolean = 
invoke('org.eclipse.ocl.examples.codegen.common.GenPackageQueries', 'isFinal(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, org.eclipse.ocl.examples.pivot.Operation)', Sequence{genPackage, operation}) /]

[query public isProperty(genPackage : GenPackage, property : Property) : Boolean =
genPackage.hasEcore(property) or ((property.opposite <> null) and genPackage.hasEcore(property.opposite))/]
