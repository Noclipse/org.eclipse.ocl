[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::tables::model2bodies('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::ocl::examples::codegen::common::constantTemplates/]
[import org::eclipse::ocl::examples::codegen::common::elementQueries/]
[import org::eclipse::ocl::examples::codegen::common::emitQueries/]
[import org::eclipse::ocl::examples::codegen::common::expressionTemplates/]
[import org::eclipse::ocl::examples::codegen::common::genPackageQueries/]
[import org::eclipse::ocl::examples::codegen::common::importTemplates/]
[import org::eclipse::ocl::examples::codegen::common::nameQueries/]
[import org::eclipse::ocl::examples::codegen::common::pivotQueries/]
[import org::eclipse::ocl::examples::codegen::common::symbolTemplates/]

[template public generateBodies(genModel : GenModel)]
[comment @main /]
[for (genPackage : GenPackage | genModel.genPackages)]
[let pPackage : Package = genPackage.getPivotPackage()]
[for (pType : Type | pPackage.ownedType->select(ownedRule->notEmpty() or ownedOperation.ownedRule->notEmpty() or ownedAttribute.ownedRule->notEmpty()))]
[generateType(genPackage, pPackage, pType)/]
[/for]
[/let]
[/for]
[/template]

[template public generateType(genPackage : GenPackage, pPackage : Package, pType : Type)]
[let packagePathPrefix : String = if genPackage.basePackage->notEmpty() and genPackage.basePackage.size() > 0 then genPackage.basePackage.replaceAll('\\.', '/') + '/' else '' endif]
[let packagePrefix : String = packagePathPrefix.replaceAll('/', '.')]
[let className : String = pType.name + genPackage.getBodiesClassSuffix()]
[file (packagePathPrefix + pPackage.name + '/' + genPackage.getBodiesPackageName() + '/' + className + '.java', false, 'UTF-8')]
/**
 * [genPackage.getCopyright(' * ')/]
 *************************************************************************
 * This code is 100% auto-generated
 * from: [pPackage.name/]
 * using: org.eclipse.ocl.examples.codegen.tables.model2tables.mtl
 *
 * Do not edit it.
 */
package [genPackage.getQualifiedBodiesPackageName()/];

[let imports : String = pType.gatherBodiesImports(genPackage)]
[pType.emitImports(imports)/]
[/let]
/**
 * [className/] provides the Java implementation bodies of OCL-defined [pType.name/] operations and properties.
 */
@SuppressWarnings("nls")
public class [className/]
{
[for (pConstraint : Constraint | pType.ownedRule->sortedBy(name)) before ('\n') separator ('\n')]
[let expInOcl : ExpressionInOcl = pConstraint.specification.getExpressionInOcl(pType)]
	[expInOcl.generateInvariant(genPackage, pPackage, pType, pConstraint)/]
[/let]
[/for]
[if (pType.oclIsKindOf(Class))]
[for (pOperation : Operation | pType.oclAsType(Class).ownedOperation->sortedBy(getMoniker())) before ('\n') separator ('\n')]
[for (pConstraint : Constraint | pOperation.ownedRule) separator ('\n')]
[let expInOcl : ExpressionInOcl = pConstraint.specification.getExpressionInOcl(pOperation)]
[if (false and pConstraint.stereotype = 'body')]
	public static [pOperation.type.name/] [pOperation.name/]([pType.name/] self[for (parameter : Parameter | pOperation.ownedParameter)], [parameter.type.name/] [parameter.name/][/for]) {
		final ExecutorManager evaluator = new [emitLibraryEcoreType('EcoreExecutorManager')/](this, [emitType(pType.getQualifiedTablesClassName(genPackage))/].LIBRARY);
		final ValueFactory valueFactory = evaluator.getValueFactory();
		Library[genPackage.emitOperationArity(pOperation.ownedParameter->size())/] codeGen = [pType.name + '_' + pOperation.name + '_' + pConstraint.stereotype + '_' + pConstraint.name/].INSTANCE;
		try {
			final Value result = codeGen.evaluate(evaluator, null, valueFactory.valueOf(self)[for (parameter : Parameter | pOperation.ownedParameter)], valueFactory.valueOf([parameter.name/])[/for]);
			return ([pOperation.type.name/]) valueFactory.getEcoreValueOf(result);
		} catch ([pType.emitDomainEvaluationType('InvalidValueException')/] e) {
			throw new WrappedException(e);
		}
	}

[/if]
	[expInOcl.generateOperationConstraint(genPackage, pPackage, pType, pOperation, pConstraint)/]
[/let]
[/for]
[/for]
[for (pProperty : Property | pType.oclAsType(Class).ownedAttribute->sortedBy(name)) before ('\n') separator ('\n')]
[for (pConstraint : Constraint | pProperty.ownedRule) separator ('\n')]
[let expInOcl : ExpressionInOcl = pConstraint.specification.getExpressionInOcl(pProperty)]
	[expInOcl.generatePropertyConstraint(genPackage, pPackage, pType, pProperty, pConstraint)/]
[/let]
[/for]
[/for]
[/if]
}
[/file]
[/let]
[/let]
[/let]
[/template]

[template public generateInvariant(expInOcl : ExpressionInOcl, genPackage : GenPackage, pPackage : Package, pType : Type, pConstraint : Constraint)]
[let className : String = '_invariant_' + pConstraint.name]
[let arity : Integer = expInOcl.parameterVariable->size()]
[let constants : String = expInOcl.bodyExpression.gatherConstants(pType, genPackage, expInOcl)]
/** 
 * Implementation of the [pType.name/] '[pConstraint.name/]' invariant.
 *
 * [expInOcl.toString()/]
 */
public static class [className/] extends Abstract[genPackage.emitOperationArity(arity)/]
{
	public static [className/] INSTANCE = new [className/]();

	public Value evaluate(DomainEvaluator evaluator, DomainType returnType, final Value [defineSymbolName(expInOcl.contextVariable, 'self')/][if expInOcl.parameterVariable->notEmpty()]
[for (parameter : Variable | expInOcl.parameterVariable)]
, Value [defineSymbolName(parameter, parameter.name)/][/for][/if]) throws [pType.emitDomainEvaluationType('InvalidValueException')/] {
		[expInOcl.emitConstants(constants)/]
		[expInOcl.bodyExpression.emitExpression(pType, genPackage, expInOcl)/]
		return [expInOcl.bodyExpression.symbolName(expInOcl)/];
	}
[if (expInOcl.messageExpression->notEmpty())]
	public static class Message extends Abstract[genPackage.emitOperationArity(arity)/]
	{
		public static [className/] INSTANCE = new [className/]();
	
		public Value evaluate(DomainEvaluator evaluator, DomainType returnType, final Value [defineSymbolName(expInOcl.contextVariable, 'self')/][if expInOcl.parameterVariable->notEmpty()]
	[for (parameter : Variable | expInOcl.parameterVariable)]
	, Value [defineSymbolName(parameter, parameter.name)/][/for][/if]) throws [pType.emitDomainEvaluationType('InvalidValueException')/] {
			[expInOcl.messageExpression.emitExpression(pType, genPackage, expInOcl)/]
			return [expInOcl.messageExpression.symbolName(expInOcl)/];
		}
	}
[/if]
}[/let][/let][/let][/template]

[template public generateOperationConstraint(expInOcl : ExpressionInOcl, genPackage : GenPackage, pPackage : Package, pType : Type, pOperation : Operation, pConstraint : Constraint)]
[let arity : Integer = expInOcl.parameterVariable->size()]
[let className : String = '_' + pOperation.name + '_' + pConstraint.stereotype + '_' + pConstraint.name]
[let constants : String = expInOcl.bodyExpression.gatherConstants(pType, genPackage, expInOcl)]
/** 
 * Implementation of the [pType.name/]::[pOperation.name/] '[pConstraint.name/]' <[pConstraint.stereotype/]>.
 *
 * [expInOcl.toString()/]
 */
public static class [className/] extends Abstract[genPackage.emitOperationArity(arity)/]
{
	public static [className/] INSTANCE = new [className/]();

	public Value evaluate(DomainEvaluator evaluator, DomainType returnType, Value [defineSymbolName(expInOcl.contextVariable, 'self')/][if expInOcl.parameterVariable->notEmpty()]
[for (parameter : Variable | expInOcl.parameterVariable)]
, Value [defineSymbolName(parameter, parameter.name)/][/for][/if]) throws [pType.emitDomainEvaluationType('InvalidValueException')/] {
		[expInOcl.emitConstants(constants)/]
		[expInOcl.bodyExpression.emitExpression(pType, genPackage, expInOcl)/]
		return [expInOcl.bodyExpression.symbolName(expInOcl)/];
	}
}[/let][/let][/let][/template]

[template public generatePropertyConstraint(expInOcl : ExpressionInOcl, genPackage : GenPackage, pPackage : Package, pType : Type, pProperty : Property, pConstraint : Constraint)]
[let className : String = '_' + pProperty.name + '_' + pConstraint.stereotype + '_' + pConstraint.name]
[let constants : String = expInOcl.bodyExpression.gatherConstants(pType, genPackage, expInOcl)]
/** 
 * Implementation of the [pType.name/]::[pProperty.name/] '[pConstraint.name/]' <[pConstraint.stereotype/]>.
 *
 * [expInOcl.toString()/]
 */
public static class [className/] extends AbstractProperty
{
	public static [className/] INSTANCE = new [className/]();

	public Value evaluate(DomainEvaluator evaluator, DomainType returnType, final Value [defineSymbolName(expInOcl.contextVariable, 'self')/], DomainProperty property) throws [pType.emitDomainEvaluationType('InvalidValueException')/] {
		[expInOcl.emitConstants(constants)/]
		[expInOcl.bodyExpression.emitExpression(pType, genPackage, expInOcl)/]
		return [expInOcl.bodyExpression.symbolName(expInOcl)/];
	}
}[/let][/let][/template]

[template protected gatherBodiesImports(pType : Type, genPackage : GenPackage)]
[pType.getQualifiedTablesClassName(genPackage)/]
org.eclipse.ocl.examples.domain.values.Value
[for (pConstraint : Constraint | pType.ownedRule)]
[let expInOcl : ExpressionInOcl = specification.getExpressionInOcl(pType)]
[expInOcl.gatherTypeImports(genPackage)/]
[/let]
[/for]
[if (pType.oclIsKindOf(Class))]
[for (pOperation : Operation | pType.oclAsType(Class).ownedOperation)]
[for (pConstraint : Constraint | pOperation.ownedRule)]
[let expInOcl : ExpressionInOcl = specification.getExpressionInOcl(pOperation)]
[expInOcl.gatherOperationImports(genPackage)/]
[/let]
[/for]
[/for]
[for (pProperty : Property | pType.oclAsType(Class).ownedAttribute)]
[for (pConstraint : Constraint | pProperty.ownedRule)]
[let expInOcl : ExpressionInOcl = specification.getExpressionInOcl(pProperty)]
[expInOcl.gatherPropertyImports(genPackage)/]
[/let]
[/for]
[/for]
[/if]
[/template]

[template protected gatherTypeImports(specification : ExpressionInOcl, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.domain.evaluation.InvalidValueException
org.eclipse.ocl.examples.domain.library.AbstractUnaryOperation
org.eclipse.ocl.examples.domain.values.ValueFactory
org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.domain.elements.DomainType
[let pElements : Sequence(Element) = specification.eAllContents()->filter(Element)]
[for (pElement : Element | pElements)]
[pElement.gatherImports(genPackage)/]
[/for]
[/let]
[/template]

[template protected gatherOperationImports(specification : ExpressionInOcl, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.domain.evaluation.InvalidValueException
org.eclipse.ocl.examples.domain.library.Abstract[genPackage.emitOperationArity(specification.parameterVariable->size())/]
org.eclipse.ocl.examples.domain.values.ValueFactory
org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.domain.elements.DomainType
[let pElements : Sequence(Element) = specification.eAllContents()->filter(Element)]
[for (pElement : Element | pElements)]
[pElement.gatherImports(genPackage)/]
[/for]
[/let]
[/template]

[template protected gatherPropertyImports(specification : ExpressionInOcl, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.domain.evaluation.InvalidValueException
org.eclipse.ocl.examples.domain.library.AbstractProperty
org.eclipse.ocl.examples.domain.values.ValueFactory
org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.domain.elements.DomainType
org.eclipse.ocl.examples.domain.elements.DomainProperty
[let pElements : Sequence(Element) = specification.eAllContents()->filter(Element)]
[for (pElement : Element | pElements)]
[pElement.gatherImports(genPackage)/]
[/for]
[/let]
[/template]
