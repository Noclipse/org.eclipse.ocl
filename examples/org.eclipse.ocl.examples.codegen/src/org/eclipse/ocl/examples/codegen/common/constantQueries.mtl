[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::common::constantQueries('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel')/]

[query public isConstant(ast : OCLExpression) : Boolean =
if ast.oclIsKindOf(PrimitiveLiteralExp) then isConstantPrimitiveLiteralExp(ast.oclAsType(PrimitiveLiteralExp))
else if ast.oclIsKindOf(CollectionLiteralExp) then isConstantCollectionLiteralExp(ast.oclAsType(CollectionLiteralExp))
else if ast.oclIsKindOf(TupleLiteralExp) then isConstantTupleLiteralExp(ast.oclAsType(TupleLiteralExp))
else if ast.oclIsKindOf(TypeExp) then isConstantTypeExp(ast.oclAsType(TypeExp))
else false
endif endif endif endif /]

[query public isConstantCollectionItem(ast : CollectionItem) : Boolean =
ast.item.isConstant() /]

[query public isConstantCollectionLiteralExp(ast : CollectionLiteralExp) : Boolean =
ast.part->forAll(isConstantCollectionLiteralPart()) /]

[query public isConstantCollectionLiteralPart(ast : CollectionLiteralPart) : Boolean =
if ast.oclIsKindOf(CollectionItem) then isConstantCollectionItem(ast.oclAsType(CollectionItem))
else if ast.oclIsKindOf(CollectionRange) then isConstantCollectionRange(ast.oclAsType(CollectionRange))
else false
endif endif /]

[query public isConstantCollectionRange(ast : CollectionRange) : Boolean =
ast.first.isConstant() and ast.last.isConstant() /]

[query public isConstantPrimitiveLiteralExp(ast : PrimitiveLiteralExp) : Boolean =
true /]

[query public isConstantTupleLiteralExp(ast : TupleLiteralExp) : Boolean =
ast.part->forAll(isConstantTupleLiteralPart()) /]

[query public isConstantTupleLiteralPart(ast : TupleLiteralPart) : Boolean =
ast.initExpression.isConstant() /]

[query public isConstantTypeExp(ast : TypeExp) : Boolean =
true /]

[query public isFoldable(ast : OCLExpression) : Boolean =
if ast.oclIsKindOf(PrimitiveLiteralExp) then false
else if ast.oclIsKindOf(CollectionLiteralExp) then isFoldableCollectionLiteralExp(ast.oclAsType(CollectionLiteralExp))
else if ast.oclIsKindOf(TupleLiteralExp) then isFoldableTupleLiteralExp(ast.oclAsType(TupleLiteralExp))
else false
endif endif endif /]

[query public isFoldableCollectionItem(ast : CollectionItem) : Boolean =
ast.item.isFoldable() /]

[query public isFoldableCollectionLiteralExp(ast : CollectionLiteralExp) : Boolean =
ast.part->exists(isFoldableCollectionLiteralPart()) /]

[query public isFoldableCollectionLiteralPart(ast : CollectionLiteralPart) : Boolean =
if ast.oclIsKindOf(CollectionItem) then isFoldableCollectionItem(ast.oclAsType(CollectionItem))
else if ast.oclIsKindOf(CollectionRange) then isFoldableCollectionRange(ast.oclAsType(CollectionRange))
else false
endif endif /]

[query public isFoldableCollectionRange(ast : CollectionRange) : Boolean =
ast.first.isConstant() and ast.last.isConstant() /]

[query public isFoldableTupleLiteralExp(ast : TupleLiteralExp) : Boolean =
ast.part->forAll(isFoldableTupleLiteralPart()) /]

[query public isFoldableTupleLiteralPart(ast : TupleLiteralPart) : Boolean =
ast.initExpression.isFoldable() /]

[query public rangesAreSimple(ast : CollectionLiteralExp) : Boolean = (ast.part->size() = 1) and (ast.part->filter(CollectionRange)->size() = 1)/]

[query public rangesAreUnused(ast : CollectionLiteralExp) : Boolean = ast.part->filter(CollectionRange)->size() = 0/]
