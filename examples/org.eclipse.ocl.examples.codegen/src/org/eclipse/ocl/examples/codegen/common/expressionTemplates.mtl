[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::common::expressionTemplates('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel','http://www.eclipse.org/ocl/3.1.0/OCL4Acceleo')/]

[import org::eclipse::ocl::examples::codegen::common::constantTemplates/]
[import org::eclipse::ocl::examples::codegen::common::elementQueries/]
[import org::eclipse::ocl::examples::codegen::common::emitQueries/]
[import org::eclipse::ocl::examples::codegen::common::genPackageQueries/]
[import org::eclipse::ocl::examples::codegen::common::nameQueries/]
[import org::eclipse::ocl::examples::codegen::common::pivotQueries/]
[import org::eclipse::ocl::examples::codegen::common::qualifiedLiteralTemplates/]
[import org::eclipse::ocl::examples::codegen::common::stringQueries/]
[import org::eclipse::ocl::examples::codegen::common::symbolTemplates/]
[import org::eclipse::ocl::examples::codegen::common::typeIdTemplates/]

[template public emitExpression(ast : CollectionItem, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[if (not ast.item.isConstant())]
[ast.item.emitExpression(importer, genPackage, expInOcl)/]
[/if]
[/template]

[template public emitExpression(ast : CollectionLiteralExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ? (not ast.isConstant())]
[for (part : CollectionLiteralPart | ast.part->reject(isConstantCollectionLiteralPart()))]
[part.emitExpression(importer, genPackage, expInOcl)/]
[/for]
[ast.emitLiteral(genPackage, expInOcl)/]
[/template]

[template public emitExpression(ast : CollectionRange, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[if (not ast.first.isConstant())]
[ast.first.emitExpression(importer, genPackage, expInOcl)/]
[/if]
[if (not ast.last.isConstant())]
[ast.last.emitExpression(importer, genPackage, expInOcl)/]
[/if]
[/template]

[template public emitExpression(ast : ConstructorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
<%ObjectValue%> [ast.symbolName(expInOcl)/] = [ast.type.emitQualifiedLiteralName(genPackage)/].createInstance(standardLibrary);
[for (part : ConstructorPart | ast.part)]
[part.initExpression.emitExpression(importer, genPackage, expInOcl)/]
[part.referredProperty.symbolName(expInOcl)/].setValue(standardLibrary, [ast.symbolName(expInOcl)/], [part.initExpression.symbolName(expInOcl)/]);
[/for][/template]

[template public emitExpression(ast : Element, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
Object [ast.symbolName(expInOcl)/] = <<[ast.eClass().name/]>>;
[/template]

[template public emitExpression(ast : IfExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[if (not ast.condition.isConstant())]
	[ast.condition.emitExpression(importer, genPackage, expInOcl)/]
[/if]
[let astName : String = ast.symbolName(expInOcl)]
Object [astName/];
if ([ast.condition.symbolName(expInOcl)/] == <%ValuesUtil%>.TRUE_VALUE) {
[if (not ast.thenExpression.isConstant())]
	[ast.thenExpression.emitExpression(importer, genPackage, expInOcl)/]
[/if]
	[astName/] = [ast.thenExpression.symbolName(expInOcl)/];
}
else if ([ast.condition.symbolName(expInOcl)/] == <%ValuesUtil%>.FALSE_VALUE) {
[if (not ast.elseExpression.isConstant())]
	[ast.elseExpression.emitExpression(importer, genPackage, expInOcl)/]
[/if]
	[astName/] = [ast.elseExpression.symbolName(expInOcl)/];
}
else {
	[astName/] = createInvalidValue("non-Boolean if condition");
}[/let][/template]

[template public emitExpression(ast : IterateExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[let arity : OCLInteger = ast.iterator->size()]
[let leftVarName : String = ast.source.symbolName(expInOcl)]
[let accVarName : String = ast.result.symbolName(expInOcl)]
[let astName : String = ast.symbolName(expInOcl)]
[let operationTypeName : String = 'org.eclipse.ocl.examples.domain.library.AbstractBinaryOperation']
[let iterationTypeName : String = 'org.eclipse.ocl.examples.domain.library.LibraryIteration']
[let managerTypeName : String = 'org.eclipse.ocl.examples.library.executor.' + genPackage.emitManagerArity(arity)]
[ast.source.emitExpression(importer, genPackage, expInOcl)/]
[ast.result.initExpression.emitExpression(importer, genPackage, expInOcl)/]
[for (i : Variable | ast.iterator)]
//Iterator<Value> [i.symbolName(expInOcl)/]_var = [leftVarName/].toIteratorValue();	// iterator: [i.name/]
[/for]  

/** 
 * Implementation of the iterate body.
 */
<%[operationTypeName/]%> body_[astName/] = new <%[operationTypeName/]%>()
{
/*
[ast._'body'.prettyPrint().trim()/]
*/
	public @NonNull Object evaluate(@NonNull <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator, @NonNull <%TypeId%> returnTypeId, @NonNull Object [ast.result.symbolName(expInOcl)/][for (i : Variable | ast.iterator)], @NonNull Object [i.symbolName(expInOcl)/][/for]) throws <%org.eclipse.ocl.examples.domain.evaluation.InvalidValueException%> {
		[ast._'body'.emitExpression(importer, genPackage, expInOcl)/]
		return [ast._'body'.symbolName(expInOcl)/];
	}
};
<%org.eclipse.ocl.examples.domain.elements.DomainType%> static_[astName/] = evaluator.getStaticTypeOf([ast.source.symbolName(expInOcl)/]);
<%[iterationTypeName/]%> dynamic_[astName/] = (<%[iterationTypeName/]%>)static_[astName/].lookupImplementation(standardLibrary, [ast.referredIteration.symbolName(expInOcl)/]);
<%[managerTypeName/]%> manager_[astName/] = new <%[managerTypeName/]%>(evaluator, [ast.result.type.typeId(expInOcl)/], body_[astName/], (<%org.eclipse.ocl.examples.domain.values.CollectionValue%>)[leftVarName/], [ast.result.initExpression.symbolName(expInOcl)/]);
Object [astName/] = dynamic_[astName/].evaluateIteration(manager_[astName/]);[/let][/let][/let][/let][/let][/let][/let][/template]

[template public emitExpression(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[let arity : OCLInteger = ast.iterator->size()]
[let leftVarName : String = ast.source.symbolName(expInOcl)]
[let astName : String = ast.symbolName(expInOcl)]
[let operationTypeName : String = 'org.eclipse.ocl.examples.domain.library.Abstract' + genPackage.emitOperationArity(arity)]
[let iterationTypeName : String = 'org.eclipse.ocl.examples.domain.library.LibraryIteration']
[let managerTypeName : String = 'org.eclipse.ocl.examples.library.executor.' + genPackage.emitManagerArity(arity)]
[ast.source.emitExpression(importer, genPackage, expInOcl)/]

/** 
 * Implementation of the iterator body.
 */
<%[operationTypeName/]%> body_[astName/] = new <%[operationTypeName/]%>()
{
/*
[ast._'body'.prettyPrint().trim()/]
*/
	public @NonNull Object evaluate(@NonNull <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator, @NonNull <%TypeId%> returnTypeId, @NonNull Object sourceValue[for (i : OCLInteger | Sequence{1..arity})]
, @NonNull Object iterator[i/][/for]) throws <%org.eclipse.ocl.examples.domain.evaluation.InvalidValueException%> {
[for (i : OCLInteger | Sequence{1..arity})]
		final @NonNull Object [ast.iterator->at(i).symbolName(expInOcl)/] = iterator[i/];	// iterator: [ast.iterator->at(i).name/]
[/for]  
		[ast._'body'.emitExpression(importer, genPackage, expInOcl)/]
		return [ast._'body'.symbolName(expInOcl)/];
	}
};
<%org.eclipse.ocl.examples.domain.elements.DomainType%> static_[astName/] = evaluator.getStaticTypeOf([ast.source.symbolName(expInOcl)/]);
<%[iterationTypeName/]%> dynamic_[astName/] = (<%[iterationTypeName/]%>)static_[astName/].lookupImplementation(standardLibrary, [ast.referredIteration.symbolName(expInOcl)/]);
Object acc_[astName/] = dynamic_[astName/].createAccumulatorValue(evaluator, [ast.type.typeId(expInOcl)/], [ast._body.type.typeId(expInOcl)/]);
<%[managerTypeName/]%> manager_[astName/] = new <%[managerTypeName/]%>(evaluator, [ast.type.typeId(expInOcl)/], body_[astName/], (<%org.eclipse.ocl.examples.domain.values.CollectionValue%>)[ast.source.symbolName(expInOcl)/], acc_[astName/]);
Object [astName/] = dynamic_[astName/].evaluateIteration(manager_[astName/]);[/let][/let][/let][/let][/let][/let][/template]

[template public emitExpression(ast : LetExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[if (not ast.variable.initExpression.isConstant())]
[ast.variable.initExpression.emitExpression(importer, genPackage, expInOcl)/]
[/if]
final @NonNull Object [ast.variable.symbolName(expInOcl)/] = [ast.variable.initExpression.symbolName(expInOcl)/];
[if (not ast._in.isConstant())]
[ast._in.emitExpression(importer, genPackage, expInOcl)/]
[/if]
final @NonNull Object [ast.symbolName(expInOcl)/] = [ast._in.symbolName(expInOcl)/];[/template]

[template public emitExpression(ast : LiteralExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)][/template]

[template public emitExpression(ast : OperationCallExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ? ((ast.referredOperation.owningType.name = 'Boolean') and (ast.referredOperation.ownedParameter->size() = 1))]
[let astName : String = ast.symbolName(expInOcl)]
[if (not ast.source.isConstant())]
Object left[astName/];
try {
	[ast.source.emitExpression(importer, genPackage, expInOcl)/]
	left[astName/] = [ast.source.symbolName(expInOcl)/];
} catch (<%org.eclipse.ocl.examples.domain.evaluation.InvalidValueException%> e) {
	left[astName/] = createInvalidValue(e);
}
Object [ast.source.symbolName(expInOcl)/] = left[astName/];
[/if]
[let right : OCLExpression = ast.argument->at(1)]
[if (not right.isConstant())]
Object right[astName/];
try {
	[right.emitExpression(importer, genPackage, expInOcl)/]
	right[astName/] = [right.symbolName(expInOcl)/];
} catch (<%org.eclipse.ocl.examples.domain.evaluation.InvalidValueException%> e) {
	right[astName/] = createInvalidValue(e);
}
Object [right.symbolName(expInOcl)/] = right[astName/];
[/if]
[/let]
[ast.generateCall(importer, genPackage, expInOcl)/][/let][/template]

[template public emitExpression(ast : OperationCallExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ? ((ast.referredOperation.owningType.name <> 'Boolean') or (ast.referredOperation.ownedParameter->size() <> 1))]
[if (not ast.source.isConstant())]
[ast.source.emitExpression(importer, genPackage, expInOcl)/]
[/if]
[for (argument : OCLExpression | ast.argument->reject(isConstant()))]
[argument.emitExpression(importer, genPackage, expInOcl)/]
[/for]
[ast.generateCall(importer, genPackage, expInOcl)/][/template]

[template public generateCall(ast : OperationCallExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[let arity : OCLInteger = ast.referredOperation.ownedParameter->size()]
[let astName : String = ast.symbolName(expInOcl)]
[let operationTypeName : String = 'org.eclipse.ocl.examples.domain.library.Library' + genPackage.emitOperationArity(arity)]
<%org.eclipse.ocl.examples.domain.elements.DomainType%> static_[astName/] = [genPackage.generateTypeOf(expInOcl, ast.source)/][if arity > 0]
[for (index : OCLInteger | Sequence{1..arity})]
[if ast.referredOperation.ownedParameter->at(index).type.oclIsKindOf(SelfType)]
, [ast.argument->at(index).symbolName(expInOcl)/][/if][/for][/if]);
<%[operationTypeName/]%> dynamic_[astName/] = (<%[operationTypeName/]%>)static_[astName/].lookupImplementation(standardLibrary, [ast.referredOperation.symbolName(expInOcl)/]);
Object [astName/] = dynamic_[astName/].evaluate(evaluator, [ast.type.typeId(expInOcl)/], [ast.source.symbolName(expInOcl)/][for (argument : OCLExpression | ast.argument) before (', ') separator (', ')][argument.symbolName(expInOcl)/][/for]);[/let][/let][/let][/template]

[template public emitExpression(ast : PropertyCallExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[if (not ast.source.isConstant())]
[ast.source.emitExpression(importer, genPackage, expInOcl)/]
[/if]
[if (ast.source.type.oclIsKindOf(TupleType))]
Object [ast.symbolName(expInOcl)/] = ((<%org.eclipse.ocl.examples.domain.values.TupleValue%>)[ast.source.symbolName(expInOcl)/]).getValue([ast.referredProperty.symbolName(expInOcl)/]);
[else]
Object [ast.symbolName(expInOcl)/] = I[ast.referredProperty.symbolName(expInOcl)/].evaluate(evaluator, [ast.type.typeId(expInOcl)/], [ast.source.symbolName(expInOcl)/], [ast.referredProperty.symbolName(expInOcl)/]);
[/if][/template]

[template public emitExpression(ast : TupleLiteralExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)]
[for (part : TupleLiteralPart | ast.part->reject(initExpression.isConstant()))]
[part.initExpression.emitExpression(importer, genPackage, expInOcl)/]
[/for]
[ast.emitLiteral(genPackage, expInOcl)/][/template]

[template public emitExpression(ast : TypeExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)][/template]

[template public emitExpression(ast : VariableExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL)][/template]

[template public generateTypeOf(genPackage : GenPackage, expInOcl : ExpressionInOCL, ast : OCLExpression)]
evaluator.getStaticTypeOf([ast.symbolName(expInOcl)/][/template]

[template public generateTypeOf(genPackage : GenPackage, expInOcl : ExpressionInOCL, ast : VariableExp)]
evaluator.getStaticTypeOf([ast.referredVariable.symbolName(expInOcl)/][/template]
