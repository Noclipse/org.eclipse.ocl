[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::ecore::ocl2java4genmodel('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel')]

[import org::eclipse::ocl::examples::codegen::common::constantTemplates/]
[import org::eclipse::ocl::examples::codegen::common::elementQueries/]
[import org::eclipse::ocl::examples::codegen::common::emitQueries/]
[import org::eclipse::ocl::examples::codegen::common::expressionTemplates/]
[import org::eclipse::ocl::examples::codegen::common::genPackageQueries/]
[import org::eclipse::ocl::examples::codegen::common::nameQueries/]
[import org::eclipse::ocl::examples::codegen::common::pivotQueries/]
[import org::eclipse::ocl::examples::codegen::common::qualifiedLiteralTemplates/]
[import org::eclipse::ocl::examples::codegen::common::symbolTemplates/]

[template public generateModel(genModel : GenModel)]
[comment @main /]
[for (genPackage : GenPackage | genModel.genPackages)]
[let pPackage : Package = genPackage.getPivotPackage()]
[pPackage.generatePackage(genPackage)/]
[/let]
[/for]
[/template]

[template public generatePackage(pPackage : Package, genPackage : GenPackage)]
[let packagePathPrefix : String = if genPackage.basePackage->notEmpty() then genPackage.basePackage.replaceAll('\\.', '/') + '/' else '' endif]
[let packagePrefix : String = packagePathPrefix.replaceAll('/', '.')]
[for (pType : Type | pPackage.ownedType)]
[pType.generateType(genPackage)/]
[for (pOperation : Operation | pType.ownedOperation)]
[pType.generateOperation(genPackage, pOperation)/]
[/for]
[for (pProperty : Property | pType.ownedAttribute)]
[pType.generateProperty(genPackage, pProperty)/]
[/for]
[/for]
[/let]
[/let]
[/template]

[template public generateType(pType : Type, genPackage : GenPackage)]
[for (pRule : Constraint | pType.ownedRule->select(stereotype = 'invariant'))]
[file (pType.getFragmentURI() + '==' + pRule.getRuleName(), false, 'UTF-8')]
[expandKnownImports(knownImports(), pRule.generateTypeRule(pType, genPackage))/]
[/file][/for][/template]

[template public generateTypeRule(pRule : Constraint, pType : Type, genPackage : GenPackage)]
[let className : String = pType.getQualifiedBodiesClassName(genPackage)]
[let constraintName : String = '_' + pRule.getRuleStereotype() + '_' + pRule.getRuleName()]
[let expInOcl : ExpressionInOcl = pRule.specification.getExpressionInOcl(pType)]
[if (expInOcl.contextVariable->notEmpty())]
/*
[expInOcl.prettyPrint().trim()/]
*/
[let constants : String = expInOcl.gatherSpecificationConstants(genPackage, pType)]
[let arity : Integer = expInOcl.parameterVariable->size()]
try {
	final <%DomainEvaluator%> evaluator = new <%EcoreExecutorManager%>(this, <%[pType.getQualifiedTablesClassName(genPackage)/]%>.LIBRARY);
	[expInOcl.emitConstants(constants)/]
	final <%DomainType%> returnType = [expInOcl.type.symbolName(expInOcl)/];
	final <%Value%> result = <%[className/]%>.[constraintName/].INSTANCE.evaluate(evaluator, returnType, self);
	final boolean resultIsNull = result.isNull();
	if (!resultIsNull && result.asBoolean()) {	// true => true, false/null => dropthrough, invalid => exception
		return true;
	}
	if (diagnostics != null) {
		int severity = resultIsNull ? <%org.eclipse.emf.common.util.Diagnostic%>.ERROR : <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;
[if (expInOcl.messageExpression->notEmpty())]
		final <%Value%> messageValue = <%[className/]%>.[constraintName/].Message.INSTANCE.evaluate(evaluator, returnType, self);
		String message;
		if (messageValue != null) {
			message = messageValue.asString();
		}
		else {
			Object objectLabel;
			if (this instanceof <%org.eclipse.emf.ecore.EDataType%>) {
				objectLabel = <%org.eclipse.emf.ecore.util.EObjectValidator%>.getValueLabel((<%org.eclipse.emf.ecore.EDataType%>) this, result, context);
			}
			else if (result instanceof <%org.eclipse.emf.ecore.EObject%>) {
				objectLabel = <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel((<%org.eclipse.emf.ecore.EObject%>) result, context);
			}
			else {
				objectLabel = String.valueOf(result);
			}
			message = <%org.eclipse.osgi.util.NLS%>.bind(<%EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object['[]'/]{"[pType.name/]", "[genPackage.getOperationID(pType, pRule, false)/]", objectLabel});
		}
	    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%[genPackage.getQualifiedValidatorClassName()/]%>.DIAGNOSTIC_SOURCE, <%[genPackage.getQualifiedValidatorClassName()/]%>.[genPackage.getOperationID(pType, pRule, true)/], message, new Object ['[]'/] { result }));
[else]
		String message = <%org.eclipse.osgi.util.NLS%>.bind(<%EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object['[]'/]{"[pType.name/]", "[pRule.getRuleName()/]", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});
	    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%[genPackage.getQualifiedValidatorClassName()/]%>.DIAGNOSTIC_SOURCE, <%[genPackage.getQualifiedValidatorClassName()/]%>.[genPackage.getOperationID(pType, pRule, true)/], message, new Object ['[]'/] { this }));
[/if]
	}
	return false;
} catch (<%InvalidValueException%> e) {
	String message = <%org.eclipse.osgi.util.NLS%>.bind(<%EvaluatorMessages%>.ValidationEvaluationFailed_ERROR_, new Object['[]'/]{"[pType.name/]", "[pRule.getRuleName()/]", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});
	throw new <%org.eclipse.emf.common.util.WrappedException%>(message, e);
}[/let][/let][else]
/*
[pRule.specification.prettyPrint().trim()/]
*/
/* [expInOcl.messageExpression.prettyPrint().trim()/] */
return false; // FIXME errors in OCL definition of [pRule.prettyPrintName()/]
[/if][/let][/let][/let][/template]

[template public generateOperation(pType : Type, genPackage : GenPackage, pOperation : Operation)]
[let pRule : Constraint = pOperation.ownedRule->any(stereotype = 'body')]
[file (pOperation.getFragmentURI(), false, 'UTF-8')]
[expandKnownImports(knownImports(), pRule.generateOperationRule(pType, genPackage, pOperation))/]
[/file][/let][/template]

[template public generateOperationRule(pRule : Constraint, pType : Type, genPackage : GenPackage, pOperation : Operation)]
[let className : String = pType.getQualifiedBodiesClassName(genPackage)]
[let constraintName : String = '_' + pOperation.name + '_' + pRule.getRuleStereotype() + '_' + pRule.getRuleName()]
[let expInOcl : ExpressionInOcl = pRule.specification.getExpressionInOcl(pOperation)]
[let ecoreReturnType : String = genPackage.getOperationReturnType(pOperation)]
[if (expInOcl.contextVariable->notEmpty())]
[let constants : String = expInOcl.gatherSpecificationConstants(genPackage, pType)]
/*
[expInOcl.prettyPrint().trim()/]
*/
try {
	final <%DomainEvaluator%> evaluator = new <%EcoreExecutorManager%>(this, [if (pRule.isCallable)], context[/if]<%[pType.getQualifiedTablesClassName(genPackage)/]%>.LIBRARY);
	[expInOcl.emitConstants(constants)/]
	final <%DomainType%> returnType = [expInOcl.type.symbolName(expInOcl)/];
	final <%Value%> result = <%[className/]%>.[constraintName/].INSTANCE.evaluate(evaluator, returnType, self[for (pParameter : Parameter | pOperation.ownedParameter)], valueFactory.valueOf([pParameter.name/])[/for]);
[if (ecoreReturnType.index('<') > 0)]
	@SuppressWarnings("unchecked")
	[ecoreReturnType/] ecoreResult = ([ecoreReturnType/]) result.asEcoreObject();
	return ecoreResult;
[else]
	return ([ecoreReturnType/]) result.asEcoreObject();
[/if]
} catch (<%InvalidValueException%> e) {
	throw new <%org.eclipse.emf.common.util.WrappedException%>("Failed to evaluate [className/]", e);
}[/let][else]
/*
[pRule.specification.prettyPrint().trim()/]
*/
/*[expInOcl.messageExpression.prettyPrint().trim()/] */
[if (ecoreReturnType = 'Boolean')]
return false; // FIXME errors in OCL definition of [pOperation.prettyPrintName()/]
[else]
return null; // FIXME errors in OCL definition of [pOperation.prettyPrintName()/]
[/if]
[/if][/let][/let][/let][/let][/template]

[template public generateProperty(pType : Type, genPackage : GenPackage, pProperty : Property)]
[let derivationRules : OrderedSet(Constraint) = pProperty.ownedRule->select(stereotype = 'derivation')]
[let initialRules : OrderedSet(Constraint) = pProperty.ownedRule->select(stereotype = 'initial')]
[let pRule : Constraint = if derivationRules->notEmpty() then derivationRules->any(true) else initialRules->any(true) endif]
[file (pProperty.getFragmentURI(), false, 'UTF-8')]
[expandKnownImports(knownImports(), pRule.generatePropertyRule(pType, genPackage, pProperty))/]
[/file][/let][/let][/let][/template]

[template public generatePropertyRule(pRule : Constraint, pType : Type, genPackage : GenPackage, pProperty : Property)]
[let className : String = pType.getQualifiedBodiesClassName(genPackage)]
[let constraintName : String = '_' + pProperty.name + '_' + pRule.getRuleStereotype() + '_' + pRule.getRuleName()]
[let expInOcl : ExpressionInOcl = pRule.specification.getExpressionInOcl(pProperty)]
[let ecoreReturnType : String = genPackage.getPropertyType(pProperty)]
[if (expInOcl.contextVariable->notEmpty())]
[let constants : String = expInOcl.gatherSpecificationConstants(genPackage, pType)]
/*
[expInOcl.prettyPrint().trim()/]
*/
try {
	final <%DomainEvaluator%> evaluator = new <%EcoreExecutorManager%>(this, <%[pType.getQualifiedTablesClassName(genPackage)/]%>.LIBRARY);
	[expInOcl.emitConstants(constants)/]
	final <%DomainType%> returnType = [expInOcl.type.symbolName(expInOcl)/];
	final <%Value%> result = <%[className/]%>.[constraintName/].INSTANCE.evaluate(evaluator, returnType, self, [pProperty.emitQualifiedLiteralName(genPackage)/]);
[if (ecoreReturnType.index('<') > 0)]
	@SuppressWarnings("unchecked")
	[ecoreReturnType/] ecoreResult = ([ecoreReturnType/]) result.asEcoreObject();
	return ecoreResult;
[else]
	return ([ecoreReturnType/]) result.asEcoreObject();
[/if]
} catch (<%InvalidValueException%> e) {
	throw new <%org.eclipse.emf.common.util.WrappedException%>("Failed to evaluate [className/]", e);
}[/let][else]
/*
[pRule.specification.prettyPrint().trim()/]
*/
/* [expInOcl.messageExpression.prettyPrint().trim()/] */
[if (ecoreReturnType = 'Boolean')]
return false; // FIXME errors in OCL definition of [pProperty.prettyPrintName()/]
[else]
return null; // FIXME errors in OCL definition of [pProperty.prettyPrintName()/]
[/if]
[/if][/let][/let][/let][/let][/template]


[template public gatherSpecificationConstants(expInOcl : ExpressionInOcl, genPackage : GenPackage, pType : Type)]
final <%ValueFactory%> valueFactory = evaluator.getValueFactory();
final <%Value%> [defineSymbolName(expInOcl.contextVariable, 'self')/] = valueFactory.valueOf(this);
[expInOcl.type.gatherConstants(genPackage, expInOcl)/]
[/template]

[query public getRuleName(pRule : Constraint) : String = 
if pRule.name->notEmpty() then pRule.name else '' endif /]

[query public getRuleStereotype(pRule : Constraint) : String = 
if pRule.stereotype->notEmpty() then pRule.stereotype else '' endif /]
