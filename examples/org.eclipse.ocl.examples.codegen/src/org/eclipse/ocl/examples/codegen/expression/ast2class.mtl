[**
 * <copyright>
 *
 * Copyright (c) 2011,2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::expression::ast2class('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel','http://www.eclipse.org/ocl/3.1.0/OCL4Acceleo')/]

[import org::eclipse::ocl::examples::codegen::common::codeGenHelperQueries/]
[import org::eclipse::ocl::examples::codegen::common::constantTemplates/]
[import org::eclipse::ocl::examples::codegen::common::elementQueries/]
[import org::eclipse::ocl::examples::codegen::common::emitQueries/]
[import org::eclipse::ocl::examples::codegen::common::expressionTemplates/]
[import org::eclipse::ocl::examples::codegen::common::genPackageQueries/]
[import org::eclipse::ocl::examples::codegen::common::nameQueries/]
[import org::eclipse::ocl::examples::codegen::common::pivotQueries/]
[import org::eclipse::ocl::examples::codegen::common::symbolTemplates/]

[template public generateExpression(expInOcl : ExpressionInOCL, codeGenHelper : CodeGenHelper, packageName : String, className : String)]
[comment @main /]
[let packagePath : String = packageName.replaceAll('\\.', '/')]
[file (packagePath + '/' + className + '.java', false, 'UTF-8')]
/**[expInOcl.resetSymbolNames()/]
 * [codeGenHelper.getCopyright(' * ')/]
 *************************************************************************
 * This code is 100% auto-generated
 * using: org.eclipse.ocl.examples.codegen.expression.ast2class.mtl
 *
 * Do not edit it.
 */
package [packageName/];

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
[prefixImports(knownImports(), expInOcl.generateClass(codeGenHelper, className))/]
[/file]
[/let]
[/template]

[template public generateClass(expInOcl : ExpressionInOCL, codeGenHelper : CodeGenHelper, className : String)]
[let arity : OCLInteger = expInOcl.parameterVariable->size()]
[let ast : OCLExpression = expInOcl.bodyExpression]
/**
 * [className/] provides the Java implementation for
 *
	[expInOcl.prettyPrint().trim()/]
 */[expInOcl.resetFlags()/]
public static class [className/] extends <%Abstract[expInOcl.emitOperationArity(arity)/]%>
{
	public static @NonNull [className/] INSTANCE = new [className/]();
[if (expInOcl.contextVariable->notEmpty())]
[let pType : Type = expInOcl.contextVariable.type]
[let genPackage : GenPackage = codeGenHelper.getGenPackage(pType)]
[let constants : String = ast.gatherConstants(genPackage, expInOcl)]
	[expInOcl.emitStatics(constants)/]

	public @Nullable Object evaluate(@NonNull <%DomainEvaluator%> evaluator, @NonNull <%TypeId%> returnTypeId, final @Nullable Object [defineSymbolName(expInOcl.contextVariable, 'self')/][if expInOcl.parameterVariable->notEmpty()]
[for (parameter : Variable | expInOcl.parameterVariable)]
, final @Nullable Object [defineSymbolName(parameter, parameter.name)/][/for][/if]) throws Exception {
		assert self != null;
		final @NonNull [codeGenHelper.getEscapedName(pType)/] [expInOcl.defineFlag('unboxed_self')/] = ([codeGenHelper.getEscapedName(pType)/])self;
		[expInOcl.emitNonStatics(constants)/]
		[ast.emitExpression(pType, genPackage, expInOcl)/]
		return [ast.symbolName(expInOcl)/];
	}
[/let][/let][/let]
[else]
	[expInOcl.generateErrorMessage()/]
[/if]
}[/let][/let][/template]

[template public generateErrorMessage(expInOcl : ExpressionInOCL)]
/*
[expInOcl.messageExpression.oclAsType(StringLiteralExp).stringSymbol/]
*/
[/template]
