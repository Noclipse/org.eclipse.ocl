[**
 * <copyright>
 *
 * Copyright (c) 2011,2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::tables::model2tables('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel','http://www.eclipse.org/ocl/3.1.0/OCL4Acceleo')/]

[import org::eclipse::ocl::examples::codegen::common::elementQueries/]
[import org::eclipse::ocl::examples::codegen::common::emitQueries/]
[import org::eclipse::ocl::examples::codegen::common::genPackageQueries/]
[import org::eclipse::ocl::examples::codegen::common::nameQueries/]
[import org::eclipse::ocl::examples::codegen::common::pivotQueries/]
[import org::eclipse::ocl::examples::codegen::common::qualifiedLiteralTemplates/]
[import org::eclipse::ocl::examples::codegen::common::symbolTemplates/]

[template public generateTables(genModel : GenModel)]
[comment @main /]
[for (genPackage : GenPackage | genModel.genPackages)]
[let pPackage : Package = genPackage.getPivotPackage()]
[generatePackage(genPackage, pPackage)/]
[/let]
[/for]
[/template]

[template public generatePackage(genPackage : GenPackage, pPackage : Package)]
[let tablesClassName : String = genPackage.getTablesClassName()]
[let packagePathPrefix : String = if genPackage.basePackage->notEmpty() and genPackage.basePackage.size() > 0 then genPackage.basePackage.replaceAll('\\.', '/') + '/' else '' endif]
[let packagePrefix : String = packagePathPrefix.replaceAll('/', '.')]
[file (packagePathPrefix + pPackage.name + '/' + tablesClassName + '.java', false, 'UTF-8')]
/**
 * [genPackage.getCopyright(' * ')/]
 *************************************************************************
 * This code is 100% auto-generated
 * from: [pPackage.name/]
 * using: org.eclipse.ocl.examples.codegen.tables.model2tables.mtl
 *
 * Do not edit it.
 */
package [genPackage.getQualifiedPackageName()/];

import org.eclipse.jdt.annotation.NonNull;
//import org.eclipse.jdt.annotation.Nullable;
[prefixImports(knownImports(), genPackage.generateTablesClass(pPackage))/]
[/file]
[/let]
[/let]
[/let]
[/template]

[template public generateTablesClass(genPackage : GenPackage, pPackage : Package)]
[let tablesClassName : String = genPackage.getTablesClassName()]
/**
 * [tablesClassName/] provides the dispatch tables for the [pPackage.name/] for use by the OCL dispatcher.
 *
 * In order to ensure correct static initialization, a top level class element must be accessed
 * before any nested class element. Therefore an access to PACKAGE.getClass() is recommended.
 */
@SuppressWarnings("nls")
public class [tablesClassName/]
{
	/**
	 *	The package descriptor for the package.
	 */
	public static final @NonNull <%EcoreExecutorPackage%> PACKAGE = new <%EcoreExecutorPackage%>([genPackage.prefix/]Package.eINSTANCE);

/**
	 *	The library of all packages and types.
	 */
	public static final @NonNull <%ExecutorStandardLibrary%> LIBRARY = [if (genPackage.hasSharedLibrary())]<%[genPackage.getSharedLibrary()/]%>.LIBRARY[else]new <%ExecutorStandardLibrary%>()[/if]; 

	[pPackage.declareTypes(genPackage)/]

	[pPackage.declareFragments(genPackage)/]

	[pPackage.declareParameterLists(genPackage)/]

	[pPackage.declareOperations(genPackage)/]

	[pPackage.declareProperties(genPackage)/]

	[pPackage.declareTypeFragments(genPackage)/]

	[pPackage.declareFragmentOperations(genPackage)/]

	[pPackage.declareFragmentProperties(genPackage)/]
	[pPackage.declareEnumerationLiterals(genPackage)/]
	
	static {
		Types.types['[0]'/].getClass();
	}
}
[/let]
[/template]

[template public declareTypes(pPackage : Package, genPackage : GenPackage)]
[let allTypes : Set(Type) = pPackage.getActiveTypes()]
/**
 *	The type descriptors for each type.
 */
public static class Types {[for (cls : Class | allTypes->filter(Class)->sortedBy(name)) before('\n')]
    [pPackage.declareType(genPackage, cls)/]
[/for]

	private static final @NonNull <%EcoreExecutorType%>['[]'/] types = {
[for (type : Type | allTypes->sortedBy(name)) separator(',\n') after('\n')]
	    _[type.name/][/for]
	};

	/*
	 *	Install the type descriptors in the package descriptor.
	 */
	static {
		PACKAGE.init(LIBRARY, types);
[if (pPackage.isExtension())]
		LIBRARY.addExtension(<%[pPackage.getExtendedPackage().getQualifiedTablesClassName(genPackage)/]%>.PACKAGE, PACKAGE);
[/if]
		TypeFragments.init();
		FragmentOperations.init();
		FragmentProperties.init();
[if (allTypes->filter(Enumeration)->notEmpty())]
		EnumerationLiterals.init();
[/if]
	}
}
[/let]
[/template]

[template public declareType(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let typeName : String = if cls.oclIsKindOf(Enumeration) then 'EcoreExecutorEnumeration' else if cls.oclIsKindOf(InvalidType) then 'EcoreExecutorInvalidType' else if cls.oclIsKindOf(VoidType) then 'EcoreExecutorVoidType' else 'EcoreExecutorType' endif endif endif]
[if (cls.ownedTemplateSignature->notEmpty())]
[for (parameter : TypeTemplateParameter | cls.ownedTemplateSignature.parameter->filter(TypeTemplateParameter))]
[let parameteredElement : Type = parameter.parameteredElement.oclAsType(Type)]
private static final @NonNull <%ExecutorTypeParameter%> _[cls.name/]_[parameteredElement.name/] = new <%ExecutorTypeParameter%>([if (cls.isBuiltInType())]<%TypeId%>.[cls.upperName()/]_T, [/if]LIBRARY, "[parameteredElement.name/]");
[/let]
[/for]
[/if]
public static final @NonNull <%[typeName/]%> _[cls.name/] = [if (genPackage.hasAnotherType(cls))]
[genPackage.getAnotherType(cls).emitQualifiedLiteralName(genPackage)/][else]
[if (not genPackage.hasEcore(cls))]
new <%[typeName/]%>([if (cls.isBuiltInType())]<%TypeId%>.[cls.upperName()/][else]"[cls.name/]"[/if][else]
new <%[typeName/]%>([genPackage.prefix + 'Package.Literals.' + cls.upperName()/][/if], PACKAGE, [pPackage.getTypeFlags(cls)/][if (cls.ownedTemplateSignature->notEmpty())]
[for (parameter : TypeTemplateParameter | cls.ownedTemplateSignature.parameter->filter(TypeTemplateParameter))]
[let parameteredElement : Type = parameter.parameteredElement.oclAsType(Type)]
, _[cls.name/]_[parameteredElement.name/][/let][/for]
[/if])[/if];[/let]
[/template]

[template public declareFragments(pPackage : Package, genPackage : GenPackage)]
/**
 *	The fragment descriptors for the local elements of each type and its supertypes.
 */
public static class Fragments {[for (cls : Class | pPackage.getActiveTypes()->filter(Class)->sortedBy(name)) before('\n')]
	[pPackage.declareFragment(genPackage, cls)/]
[/for]}
[/template]

[template public declareFragment(pPackage : Package, genPackage : GenPackage, cls : Class)]
[for (superCls : Type | cls.getAllSuperTypes()->sortedBy(name))]
public static final @NonNull <%ExecutorFragment%> _[cls.name/]__[superCls.name/] = new <%ExecutorFragment%>([cls.getLiteralName()/], [superCls.emitQualifiedLiteralName(genPackage)/]);
[/for]
[/template]

[template public declareOperations(pPackage : Package, genPackage : GenPackage)]
/**
 *	The operation descriptors for each operation of each type.
 */
public static class Operations {[for (cls : Class | pPackage.getActiveTypes()->filter(Class)->select(getOperations()->notEmpty())->sortedBy(name)) before('\n') separator('\n')]
	[pPackage.declareOperations(genPackage, cls)/]
[/for]}
[/template]

[template public declareOperations(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let ops1 : OrderedSet(Operation) = cls.getOperations()]
[let ops : OrderedSet(Operation) = ops1->sortedBy(op2 : Operation | op2.getSignature())]
[for (i : OCLInteger | Sequence{1..ops->size()}) separator('\n')]
[let op : Operation = ops->at(i)]
[pPackage.declareOperation(genPackage, op, i)/][/let][/for][/let][/let]
[/template]

[template public declareOperation(pPackage : Package, genPackage : GenPackage, op : Operation, opIndex : OCLInteger)]
[let parameteredElements : Sequence(Type) = if op.ownedTemplateSignature->notEmpty() then op.ownedTemplateSignature.parameter->filter(TypeTemplateParameter).parameteredElement.oclAsType(Type) else Sequence{} endif]
[for (parameteredElement : Type | parameteredElements)]
public static final @NonNull <%ExecutorTypeParameter%> _[op.getLiteralName()/]_[parameteredElement.name/] = new <%ExecutorTypeParameter%>(LIBRARY, "[parameteredElement.name/]");
[/for]
public static final @NonNull <%ExecutorOperation%> [op.getLiteralName()/] = new <%ExecutorOperation%>("[op.name/]", Parameters.[op.ownedParameter.type->getParameterListName()/], [op.owningType.getLiteralName()/],
	[opIndex-1/], [if (op.ownedTemplateSignature->isEmpty())]<%DomainTypeParameters%>.EMPTY_LIST[else]
new <%DomainTypeParameters%>([for (parameteredElement : Type | parameteredElements) separator(', ')]_[op.getLiteralName()/]_[parameteredElement.name/][/for])[/if], [genPackage.getImplementationName(op)/]);[/let]
[/template]

[template public declareParameterLists(pPackage : Package, genPackage : GenPackage)]
[let classes : Set(Class) = pPackage.getActiveTypes()->filter(Class)->select(getOperations()->notEmpty())]
[let operations : Set(Operation) = classes.getOperations()->asSet()]
[let parameterTypes : Set(Sequence(Type)) = operations->collectNested(ownedParameter.type)->asSet()]
/**
 *	The parameter lists shared by operations.
 */
public static class Parameters {[for (types : Sequence(Type) | parameterTypes->sortedBy(getParameterListName())) before('\n')]
	public static final @NonNull <%DomainParameterTypes%> [types->getParameterListName()/] = new <%DomainParameterTypes%>([for (type : Type | types) separator (', ')][type.declareParameterType(genPackage)/][/for]);
[/for]}[/let][/let][/let]
[/template]

[template public declareParameterTypes(genPackage : GenPackage, types : Sequence(Type))]
[for (type : Type | types)],
	[type.declareParameterType(genPackage)/][/for][/template]

[template public declareParameterType(type : Type, genPackage : GenPackage) ?(type.owningTemplateParameter.signature.template.oclIsKindOf(Type))]
[let containerType : Type = type.owningTemplateParameter.signature.template.oclAsType(Type)]
[let prefix : String = containerType.getQualifiedTablesClassName(genPackage)]
[if (prefix.size() <= 0)]
(<%DomainType%>)null/*[containerType._package.name/]*/[else]
<%[prefix/]%>.Types._[containerType.encodeName()/]_[type.encodeName()/][/if][/let][/let][/template]

[template public declareParameterType(type : Type, genPackage : GenPackage) ?(type.owningTemplateParameter.signature.template.oclIsKindOf(Operation))]
[let containerOperation : Operation = type.owningTemplateParameter.signature.template.oclAsType(Operation)]
[let prefix : String = containerOperation.owningType.getQualifiedTablesClassName(genPackage)]
[if (prefix.size() <= 0)]
(<%DomainType%>)null/*[containerOperation.owningType._package.name/]*/[else]
<%[prefix/]%>.Operations._[containerOperation.getLiteralName()/]_[type.encodeName()/][/if][/let][/let][/template]

[template public declareParameterType(type : CollectionType, genPackage : GenPackage)]
new <%ExecutorSpecializedType%>(LIBRARY, "[type.name/]", [type.elementType.declareParameterType(genPackage)/])[/template]

[template public declareParameterType(type : LambdaType, genPackage : GenPackage)]
new <%ExecutorLambdaType%>(LIBRARY, "[type.name/]", [type.contextType.declareParameterType(genPackage)/][genPackage.declareParameterTypes(type.parameterType)/])[/template]

[template public declareParameterType(type : Metaclass, genPackage : GenPackage)]
new <%ExecutorSpecializedType%>(LIBRARY, "[type.name/]", [type.instanceType.declareParameterType(genPackage)/])[/template]

[template public declareParameterType(type : TupleType, genPackage : GenPackage)]
new <%ExecutorTupleType%>(LIBRARY, "[type.name/]"[genPackage.declareTupleParts(type.ownedAttribute)/])[/template]

[template public declareParameterType(type : Type, genPackage : GenPackage) ?(type.owningTemplateParameter->isEmpty())]
[type.emitQualifiedLiteralName(genPackage)/]
[/template]

[template public declareTupleParts(genPackage : GenPackage, parts : OrderedSet(Property))]
[for (part : Property | parts)],
	[part.type.declareParameterType(genPackage)/][/for][/template]

[template public declareProperties(pPackage : Package, genPackage : GenPackage)]
/**
 *	The property descriptors for each property of each type.
 */
public static class Properties {[for (cls : Class | pPackage.getActiveTypes()->filter(Class)->select(getProperties()->notEmpty())->sortedBy(name)) before('\n') separator('\n')]
	[pPackage.declareProperties(genPackage, cls)/]
[/for]}
[/template]

[template public declareProperties(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let rawProps : OrderedSet(Property) = cls.getProperties()]
[let props : OrderedSet(Property) = rawProps->select(prop : Property | genPackage.isProperty(prop))->sortedBy(name)]
[for (i : OCLInteger | Sequence{1..props->size()}) separator('\n')]
[let prop : Property = props->at(i)]
public static final @NonNull <%ExecutorProperty%> [prop.getLiteralName()/] = new <%ExecutorProperty%>("[prop.name/]", [cls.getLiteralName()/], [i-1/], [genPackage.getImplementationName(prop)/]);[/let][/for][/let][/let]
[/template]

[template public declareConstraints(pPackage : Package, genPackage : GenPackage)]
/**
 *	The operation descriptors for each constraint.
 */
public static class Constraints {[for (cls : Class | pPackage.getActiveTypes()->filter(Class)->select(ownedRule->notEmpty())->sortedBy(name)) before('\n') separator('\n')]
	[pPackage.declareConstraints(genPackage, cls)/]
[/for]}
[/template]

[template public declareConstraints(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let rules : OrderedSet(Constraint) = cls.ownedRule->asOrderedSet()->sortedBy(getLiteralName())]
[for (i : OCLInteger | Sequence{1..rules->size()}) separator('\n')]
[let rule : Constraint = rules->at(i)]
[pPackage.declareConstraint(genPackage, rule, i, cls)/][/let][/for][/let]
[/template]

[template public declareConstraint(pPackage : Package, genPackage : GenPackage, rule : Constraint, opIndex : OCLInteger, cls : Class)]
public static final @NonNull <%ExecutorOperation%> [rule.getLiteralName()/] = new <%ExecutorOperation%>("[cls.getUniqueText(rule)/]",
	[cls.getLiteralName()/], [opIndex-1/], [genPackage.getImplementationName(rule)/]);
[/template]

[template public declareTypeFragments(pPackage : Package, genPackage : GenPackage)]
[let types : OrderedSet(Type) = pPackage.getActiveTypes()->sortedBy(name)]
/**
 *	The fragments for all base types in depth order: OclAny first, OclSelf last.
 */
public static class TypeFragments {[for (cls : Type | types) before('\n') separator('\n')]
	[pPackage.declareTypeFragment(cls)/]
[/for]

	/**
	 *	Install the fragment descriptors in the class descriptors.
	 */
	static {
[for (cls : Type | types)]
		[cls.getLiteralName()/].initFragments(_[cls.name/], __[cls.name/][if (genPackage.hasAnotherType(cls))], [genPackage.prefix + 'Package.Literals.' + cls.upperName()/][/if]);
[/for]
	}

	public static void init() {}
}
[/let]
[/template]

[template public declareTypeFragment(pPackage : Package, cls : Type)]
[let rawSuperTypes : Set(Type) = cls.getAllSuperTypes()]
private static final @NonNull <%ExecutorFragment%>['[]'/] _[cls.name/] =
[let superTypes : OrderedSet(Type) = rawSuperTypes->asOrderedSet()->sortedBy(c : Type | (100000+c.getDepth())+c.name)]
{
[for (superClass : Type | superTypes) separator(',\n')]    Fragments._[cls.name/]__[superClass.name/] /* [superClass.getDepth()/] */[/for]
};
[/let]
private static final @NonNull int['[]'/] __[cls.name/] = { [for (i : OCLInteger | Sequence{0..cls.getDepth()}) separator(',')][rawSuperTypes->select(c : Type | c.getDepth() = i)->size()/][/for] };[/let]
[/template]

[template public declareTypeIndexes(pPackage : Package)]
/**
 *	The number of base types at each inheritance depth: OclAny first, OclSelf last.
 */
public static class TypeIndexes {[for (cls : Type | pPackage.getActiveTypes()->sortedBy(name)) before('\n')]
	[pPackage.declareTypeIndex(cls)/]
[/for]}
[/template]

[template public declareTypeIndex(pPackage : Package, cls : Type)]
[let rawSuperTypes : Set(Type) = cls.getAllSuperTypes()]
public static final int['[]'/] [cls.name/] = { [for (i : OCLInteger | Sequence{0..cls.getDepth()}) separator(',')][rawSuperTypes->select(c : Type | c.getDepth() = i)->size()/][/for] };[/let]
[/template]

[template public declareFragmentOperations(pPackage : Package, genPackage : GenPackage)]
/**
 *	The lists of local operations or local operation overrides for each fragment of each type.
 */
public static class FragmentOperations {
[let allClasses : OrderedSet(Type) = pPackage.getActiveTypes()->select(c : Type | c.getBehavioralType()->isEmpty())->sortedBy(name)]
[for (cls : Type | allClasses) separator('\n')]
	[pPackage.declareLocalFragmentOperations(genPackage, cls)/]
[for (superCls : Type | cls.getAllProperSuperTypes()->sortedBy(name))]
	[pPackage.declareSuperFragmentOperations(genPackage, superCls, cls)/]
[/for]
[/for]

	/*
	 *	Install the operation descriptors in the fragment descriptors.
	 */
	static {
[for (cls : Type | allClasses) separator('\n')]
[let rawSuperTypes : Set(Type) = cls.getAllSuperTypes()]
[for (superCls : Type | rawSuperTypes->select(c : Type | c.getBehavioralType()->isEmpty())->sortedBy(name))]
		Fragments._[cls.name/]__[superCls.name/].initOperations(_[cls.name/]__[superCls.name/]);
[/for][/let][/for][/let]
	}

	public static void init() {}
}
[/template]

[template public declareLocalFragmentOperations(pPackage : Package, genPackage : GenPackage, cls : Type)]
[let localOps : Set(Operation) = cls.getLocalOperationsOf()]
[let ops : OrderedSet(Operation) = localOps->sortedBy(getSignature())]
private static final @NonNull <%ExecutorOperation%>['[]'/] _[cls.name/]__[cls.name/] = [if ops->isEmpty()]{[else]
{
[for (i : OCLInteger | Sequence{1..ops->size()}) separator (',\n') after ('\n')]
    [ops->at(i).emitQualifiedLiteralName(genPackage)/] /* [ops->at(i).getSignature()/] */[/for]
[/if]};[/let][/let]
[/template]

[template public declareSuperFragmentOperations(pPackage : Package, genPackage : GenPackage, superCls: Type, cls : Type)]
[let localOps : Set(Operation) = superCls.getLocalOperationsOf()]
[let ops : OrderedSet(Operation) = localOps->sortedBy(getSignature())]
private static final @NonNull <%ExecutorOperation%>['[]'/] _[cls.name/]__[superCls.name/] = [if ops->isEmpty()]{[else]
{
[for (i : OCLInteger | Sequence{1..ops->size()}) separator (',\n') after ('\n')]
[let overloadOp : Operation = cls.getOverloadOp(ops->at(i))]
    [overloadOp.emitQualifiedLiteralName(genPackage)/] /* [overloadOp.getSignature()/] */[/let][/for]
[/if]};[/let][/let]
[/template]

[template public declareFragmentProperties(pPackage : Package, genPackage : GenPackage)]
/**
 *	The lists of local properties for the local fragment of each type.
 */
public static class FragmentProperties {
[for (cls : Class | pPackage.getActiveTypes()->filter(Class)->sortedBy(name)) separator('\n')]
	[pPackage.declareFragmentProperty(genPackage, cls)/]
[/for]

	/**
	 *	Install the property descriptors in the fragment descriptors.
	 */
	static {
[for (cls : Class | pPackage.getActiveTypes()->filter(Class)->sortedBy(name))]
  	 	Fragments._[cls.name/]__[cls.name/].initProperties(_[cls.name/]);
[/for]
	}

	public static void init() {}
}
[/template]

[template public declareFragmentProperty(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let clsProps : Set(Property) = cls.getAllPropertiesOf()]
[let props : OrderedSet(Property) = clsProps->select(prop : Property | genPackage.isProperty(prop))->sortedBy(name + '#' + owningType.name)]
private static final @NonNull <%ExecutorProperty%>['[]'/] _[cls.name/] = [if props->isEmpty()]{[else]
{
[for (i : OCLInteger | Sequence{1..props->size()}) separator (',\n') after ('\n')]
    [props->at(i).emitQualifiedLiteralName(genPackage)/][/for]
[/if]};[/let][/let]
[/template]

[template public declareEnumerationLiterals(pPackage : Package, genPackage : GenPackage)]
[let enums : OrderedSet(Enumeration) = pPackage.getActiveTypes()->filter(Enumeration)->sortedBy(name)]
[if (enums->notEmpty())]

/**
 *	The lists of enumeration literals for each enumeration.
 */
public static class EnumerationLiterals {
[for (enum : Enumeration | enums) separator('\n')]
	[pPackage.declareEnumerationLiteral(genPackage, enum)/]
[/for]

	/**
	 *	Install the enumeration literals in the enumerations.
	 */
	static {
[for (enum : Enumeration | enums)]
  	 	Types._[enum.name/].initLiterals(_[enum.name/]);
[/for]
	}

	public static void init() {}
}[/if][/let]
[/template]

[template public declareEnumerationLiteral(pPackage : Package, genPackage : GenPackage, enum : Enumeration)]
[let enumLiterals : OrderedSet(EnumerationLiteral) = enum.ownedLiteral]
[for (i : OCLInteger | Sequence{1..enumLiterals->size()}) after ('\n')]
[let enumLiteral : EnumerationLiteral = enumLiterals->at(i)]
public static final @NonNull <%EcoreExecutorEnumerationLiteral%> _[enumLiteral.enumeration.name/]__[enumLiteral.name/] = new <%EcoreExecutorEnumerationLiteral%>([genPackage.prefix + 'Package.Literals.' + enum.upperName()/].getEEnumLiteral("[enumLiteral.name/]"), Types._[enum.name/], [i-1/]);
[/let][/for]
private static final @NonNull <%EcoreExecutorEnumerationLiteral%>['[]'/] _[enum.name/] = [if enumLiterals->isEmpty()]{[else]
{
[for (i : OCLInteger | Sequence{1..enumLiterals->size()}) separator (',\n') after ('\n')]
[let enumLiteral : EnumerationLiteral = enumLiterals->at(i)]
    _[enumLiteral.enumeration.name/]__[enumLiteral.name/][/let][/for]
[/if]};[/let]
[/template]

[query public getParameterListName(types : Sequence(Type)) : String = 
let prefix : String = types->iterate(t : Type; acc : String = '' | acc + '_' + t.name) in types->getPrefixedSymbolName(if prefix = '' then '_' else prefix endif)/]

[query public getTypeFlags(pPackage : Package, elem : Type) : String =
if (elem.oclIsKindOf(OrderedSetType)) then '<%ExecutorType%>.ORDERED | <%ExecutorType%>.UNIQUE'
else if (elem.oclIsKindOf(SetType)) then '<%ExecutorType%>.UNIQUE'
else if (elem.oclIsKindOf(SequenceType)) then '<%ExecutorType%>.ORDERED'
else '0'
endif endif endif/]
