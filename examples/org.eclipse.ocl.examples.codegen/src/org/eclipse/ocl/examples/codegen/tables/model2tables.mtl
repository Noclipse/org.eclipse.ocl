[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::tables::model2tables('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::ocl::examples::codegen::common::elementQueries/]
[import org::eclipse::ocl::examples::codegen::common::emitQueries/]
[import org::eclipse::ocl::examples::codegen::common::genPackageQueries/]
[import org::eclipse::ocl::examples::codegen::common::importTemplates/]
[import org::eclipse::ocl::examples::codegen::common::nameQueries/]
[import org::eclipse::ocl::examples::codegen::common::pivotQueries/]
[import org::eclipse::ocl::examples::codegen::common::qualifiedLiteralTemplates/]
[import org::eclipse::ocl::examples::codegen::common::symbolTemplates/]

[template public generateTables(genModel : GenModel)]
[comment @main /]
[for (genPackage : GenPackage | genModel.genPackages)]
[let pPackage : Package = genPackage.getPivotPackage()]
[generatePackage(genPackage, pPackage)/]
[/let]
[/for]
[/template]

[template public generatePackage(genPackage : GenPackage, pPackage : Package)]
[let tablesClassName : String = genPackage.getTablesClassName()]
[let packagePathPrefix : String = if genPackage.basePackage->notEmpty() and genPackage.basePackage.size() > 0 then genPackage.basePackage.replaceAll('\\.', '/') + '/' else '' endif]
[let packagePrefix : String = packagePathPrefix.replaceAll('/', '.')]
[file (packagePathPrefix + pPackage.name + '/' + tablesClassName + '.java', false, 'UTF-8')]
/**
 * [genPackage.getCopyright(' * ')/]
 *************************************************************************
 * This code is 100% auto-generated
 * from: [pPackage.name/]
 * using: org.eclipse.ocl.examples.codegen.tables.model2tables.mtl
 *
 * Do not edit it.
 */
package [genPackage.getQualifiedPackageName()/];

[let markedUpTableClass : String = genPackage.generateTablesClass(pPackage)]
[let tableClass : String = pPackage.prefixImports(markedUpTableClass)]
[tableClass/]
[/let]
[/let]
[/file]
[/let]
[/let]
[/let]
[/template]

[template public generateTablesClass(genPackage : GenPackage, pPackage : Package)]
[let tablesClassName : String = genPackage.getTablesClassName()]
/**
 * [tablesClassName/] provides the dispatch tables for the [pPackage.name/] for use by the OCL dispatcher.
 *
 * In order to ensure correct static initialization, a top level class element must be accessed
 * before any nested class element. Therefore an access to PACKAGE.getClass() is recommended.
 */
@SuppressWarnings("nls")
public class [tablesClassName/]
{
	/**
	 *	The package descriptor for the package.
	 */
	public static final [pPackage.emitLibraryEcoreType('EcoreExecutorPackage')/] PACKAGE = new [pPackage.emitLibraryEcoreType('EcoreExecutorPackage')/]([genPackage.prefix/]Package.eINSTANCE);

	public static final [pPackage.emitLibraryExecutorType('ExecutorStandardLibrary')/] LIBRARY = new [pPackage.emitLibraryExecutorType('ExecutorStandardLibrary')/](PACKAGE); 

	[pPackage.declareTypes(genPackage)/]

	[pPackage.declareFragments(genPackage)/]

	[pPackage.declareOperations(genPackage)/]

	[pPackage.declareProperties(genPackage)/]

	[pPackage.declareTypeFragments(genPackage)/]

	[pPackage.declareFragmentOperations(genPackage)/]

	[pPackage.declareFragmentProperties(genPackage)/]
	
	static {
		Types.types['[0]'/].getClass();
	}
}
[/let]
[/template]

[template public declareTypes(pPackage : Package, genPackage : GenPackage)]
/**
 *	The type descriptors for each type.
 */
public static class Types {[for (cls : Class | pPackage.ownedType->filter(Class)->sortedBy(name)) before('\n')]
    [pPackage.declareType(genPackage, cls)/]
[/for]

	private static final [emitLibraryExecutorType('ExecutorType')/]['[]'/] types = {
[for (type : Type | pPackage.ownedType->sortedBy(t : Type | t.getMoniker())) separator(',\n') after('\n')]
	    _[type.name/][/for]
	};

	/*
	 *	Install the type descriptors in the package descriptor.
	 */
	static {
		PACKAGE.init(types);
		TypeFragments.init();
		FragmentOperations.init();
		FragmentProperties.init();
	}
}
[/template]

[template public declareType(pPackage : Package, genPackage : GenPackage, cls : Class)]
[if (cls.ownedTemplateSignature->notEmpty())]
[for (parameter : TypeTemplateParameter | cls.ownedTemplateSignature.parameter->filter(TypeTemplateParameter))]
[let parameteredElement : Type = parameter.parameteredElement.oclAsType(Type)]
private static final [pPackage.emitLibraryExecutorType('ExecutorTypeParameter')/] _[cls.name/]_[parameteredElement.name/] = new [pPackage.emitLibraryExecutorType('ExecutorTypeParameter')/]("[parameteredElement.name/]");
[/let]
[/for]
[/if]
[if (cls.getBehavioralType()->notEmpty())]
public static final [emitLibraryExecutorType('ExecutorType')/] _[cls.name/] = [genPackage.getQualifiedTypeLiteralName(cls.getBehavioralType(), cls._package)/];[else]
public static final [emitLibraryExecutorType('ExecutorType')/] _[cls.name/] = new [emitLibraryExecutorType('ExecutorType')/]("[cls.name/]", PACKAGE, [pPackage.getTypeFlags(cls)/][if (cls.ownedTemplateSignature->notEmpty())]
[for (parameter : TypeTemplateParameter | cls.ownedTemplateSignature.parameter->filter(TypeTemplateParameter))]
[let parameteredElement : Type = parameter.parameteredElement.oclAsType(Type)]
, _[cls.name/]_[parameteredElement.name/][/let][/for]
[/if]);[/if]
[/template]

[template public declareFragments(pPackage : Package, genPackage : GenPackage)]
/**
 *	The fragment descriptors for the local elements of each type and its supertypes.
 */
public static class Fragments {[for (cls : Class | pPackage.ownedType->filter(Class)->sortedBy(name)) before('\n')]
	[pPackage.declareFragment(genPackage, cls)/]
[/for]}
[/template]

[template public declareFragment(pPackage : Package, genPackage : GenPackage, cls : Class)]
[for (superCls : Type | cls.getAllSuperTypes()->sortedBy(name))]
public static final [emitLibraryExecutorType('ExecutorFragment')/] _[cls.name/]__[superCls.name/] = new [emitLibraryExecutorType('ExecutorFragment')/]([cls.getLiteralName()/], [genPackage.getQualifiedTypeLiteralName(superCls, pPackage)/], null, null);
[/for]
[/template]

[template public declareOperations(pPackage : Package, genPackage : GenPackage)]
/**
 *	The operation descriptors for each operation of each type.
 */
public static class Operations {[for (cls : Class | pPackage.ownedType->filter(Class)->select(ownedOperation->notEmpty())->sortedBy(name)) before('\n') separator('\n')]
	[pPackage.declareOperations(genPackage, cls)/]
[/for]}
[/template]

[template public declareOperations(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let ops : OrderedSet(Operation) = cls.ownedOperation->asOrderedSet()->sortedBy(getMoniker())]
[for (i : Integer | Sequence{1..ops->size()}) separator('\n')]
[let op : Operation = ops->at(i)]
[pPackage.declareOperation(genPackage, op, i)/][/let][/for][/let]
[/template]

[template public declareOperation(pPackage : Package, genPackage : GenPackage, op : Operation, opIndex : Integer)]
[if (op.ownedTemplateSignature->notEmpty())]
[for (parameter : TypeTemplateParameter | op.ownedTemplateSignature.parameter->filter(TypeTemplateParameter))]
[let parameteredElement : Type = parameter.parameteredElement.oclAsType(Type)]
public static final [pPackage.emitLibraryExecutorType('ExecutorTypeParameter')/] _[op.getLiteralName()/]_[parameteredElement.name/] = new [pPackage.emitLibraryExecutorType('ExecutorTypeParameter')/]("[parameteredElement.name/]");
[/let]
[/for]
[/if]
public static final [emitLibraryExecutorType('ExecutorOperation')/] [op.getLiteralName()/] = new [emitLibraryExecutorType('ExecutorOperation')/]("[op.name/]",
	[op.owningType.getLiteralName()/], [opIndex-1/], [genPackage.getImplementationName(op)/][pPackage.declareParameterTypes(genPackage, op.ownedParameter.type->asOrderedSet())/]);
[/template]

[template public declareParameterTypes(pPackage : Package, genPackage : GenPackage, types : OrderedSet(Type))]
[for (type : Type | types)],
	[pPackage.declareParameterType(genPackage, type)/][/for][/template]

[template public declareParameterType(pPackage : Package, genPackage : GenPackage, type : Type) ?(type.owningTemplateParameter.signature.template.oclIsKindOf(Type))]
[let containerType : Type = type.owningTemplateParameter.signature.template.oclAsType(Type)]
[let prefix : String = containerType.getQualifiedTablesClassName(genPackage)]
[if (prefix.size() <= 0)]
([emitDomainElementsType('DomainType')/])null/*[containerType._package.name/]*/[else]
[emitType(prefix)/].Types._[containerType.encodeName()/]_[type.encodeName()/][/if][/let][/let][/template]

[template public declareParameterType(pPackage : Package, genPackage : GenPackage, type : Type) ?(type.owningTemplateParameter.signature.template.oclIsKindOf(Operation))]
[let containerOperation : Operation = type.owningTemplateParameter.signature.template.oclAsType(Operation)]
[let prefix : String = containerOperation.owningType.getQualifiedTablesClassName(genPackage)]
[if (prefix.size() <= 0)]
([emitDomainElementsType('DomainType')/])null/*[containerOperation.owningType._package.name/]*/[else]
[emitType(prefix)/].Operations._[containerOperation.getLiteralName()/]_[type.encodeName()/][/if][/let][/let][/template]

[template public declareParameterType(pPackage : Package, genPackage : GenPackage, type : ClassifierType)]
new [emitLibraryExecutorType('ExecutorSpecializedType')/]("[type.name/]", [pPackage.declareParameterType(genPackage, type.instanceType)/])[/template]

[template public declareParameterType(pPackage : Package, genPackage : GenPackage, type : CollectionType)]
new [emitLibraryExecutorType('ExecutorSpecializedType')/]("[type.name/]", [pPackage.declareParameterType(genPackage, type.elementType)/])[/template]

[template public declareParameterType(pPackage : Package, genPackage : GenPackage, type : LambdaType)]
new [emitLibraryExecutorType('ExecutorLambdaType')/]("[type.name/]", [pPackage.declareParameterType(genPackage, type.contextType)/][pPackage.declareParameterTypes(genPackage, type.parameterType->asOrderedSet())/])[/template]

[template public declareParameterType(pPackage : Package, genPackage : GenPackage, type : TupleType)]
new [emitLibraryExecutorType('ExecutorTupleType')/]("[type.name/]"[pPackage.declareTupleParts(genPackage, type.ownedAttribute)/])[/template]

[template public declareTupleParts(pPackage : Package, genPackage : GenPackage, parts : OrderedSet(Property))]
[for (part : Property | parts)],
	[pPackage.declareParameterType(genPackage, part.type)/][/for][/template]

[template public declareParameterType(pPackage : Package, genPackage : GenPackage, type : Type)]
[type.emitQualifiedLiteralName(pPackage, genPackage)/]
[/template]

[template public declareProperties(pPackage : Package, genPackage : GenPackage)]
/**
 *	The property descriptors for each property of each type.
 */
public static class Properties {[for (cls : Class | pPackage.ownedType->filter(Class)->select(ownedAttribute->notEmpty())->sortedBy(name)) before('\n') separator('\n')]
	[pPackage.declareProperties(genPackage, cls)/]
[/for]}
[/template]

[template public declareProperties(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let props : OrderedSet(Property) = cls.ownedAttribute->select(prop : Property | genPackage.isProperty(prop))->sortedBy(name)]
[for (i : Integer | Sequence{1..props->size()}) separator('\n')]
[let prop : Property = props->at(i)]
public static final [pPackage.emitLibraryExecutorType('ExecutorProperty')/] [prop.getLiteralName()/] = new [pPackage.emitLibraryExecutorType('ExecutorProperty')/]("[prop.name/]", [cls.getLiteralName()/], [i-1/], [genPackage.getImplementationName(prop)/]);[/let][/for][/let]
[/template]

[template public declareConstraints(pPackage : Package, genPackage : GenPackage)]
/**
 *	The operation descriptors for each constraint.
 */
public static class Constraints {[for (cls : Class | pPackage.ownedType->filter(Class)->select(ownedRule->notEmpty())->sortedBy(name)) before('\n') separator('\n')]
	[pPackage.declareConstraints(genPackage, cls)/]
[/for]}
[/template]

[template public declareConstraints(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let rules : OrderedSet(Constraint) = cls.ownedRule->asOrderedSet()->sortedBy(getMoniker())]
[for (i : Integer | Sequence{1..rules->size()}) separator('\n')]
[let rule : Constraint = rules->at(i)]
[pPackage.declareConstraint(genPackage, rule, i, cls)/][/let][/for][/let]
[/template]

[template public declareConstraint(pPackage : Package, genPackage : GenPackage, rule : Constraint, opIndex : Integer, cls : Class)]
public static final [emitLibraryExecutorType('ExecutorOperation')/] [rule.getLiteralName()/] = new [emitLibraryExecutorType('ExecutorOperation')/]("[cls.getUniqueText(rule)/]",
	[cls.getLiteralName()/], [opIndex-1/], [genPackage.getImplementationName(rule)/]);
[/template]

[template public declareTypeFragments(pPackage : Package, genPackage : GenPackage)]
[let types : OrderedSet(Type) = pPackage.ownedType->select(c : Type | c.getBehavioralType()->isEmpty())->sortedBy(name)]
/**
 *	The fragments for all base types in depth order: OclAny first, OclSelf last.
 */
public static class TypeFragments {[for (cls : Type | types) before('\n') separator('\n')]
	[pPackage.declareTypeFragment(cls)/]
[/for]

	/**
	 *	Install the fragment descriptors in the class descriptors.
	 */
	static {
[for (cls : Type | types)]
		[cls.getLiteralName()/].initFragments(_[cls.name/], __[cls.name/]);
[/for]
	}

	public static void init() {}
}
[/let]
[/template]

[template public declareTypeFragment(pPackage : Package, cls : Type)]
private static final [emitLibraryExecutorType('ExecutorFragment') + '[]'/] _[cls.name/] =
[let superTypes : OrderedSet(Type) = cls.getAllSuperTypes()->asOrderedSet()->sortedBy(c : Type | c.getDepth())]
{
[for (superClass : Type | superTypes) separator(',\n')]    Fragments._[cls.name/]__[superClass.name/] /* [superClass.getDepth()/] */[/for]
};
[/let]
private static final int['[]'/] __[cls.name/] = { [for (i : Integer | Sequence{0..cls.getDepth()}) separator(',')][cls.getAllSuperTypes()->select(c : Type | c.getDepth() = i)->size()/][/for] };
[/template]

[template public declareTypeIndexes(pPackage : Package)]
/**
 *	The number of base types at each inheritance depth: OclAny first, OclSelf last.
 */
public static class TypeIndexes {[for (cls : Type | pPackage.ownedType->sortedBy(name)) before('\n')]
	[pPackage.declareTypeIndex(cls)/]
[/for]}
[/template]

[template public declareTypeIndex(pPackage : Package, cls : Type)]
public static final int['[]'/] [cls.name/] = { [for (i : Integer | Sequence{0..cls.getDepth()}) separator(',')][cls.getAllSuperTypes()->select(c : Type | c.getDepth() = i)->size()/][/for] };
[/template]

[template public declareFragmentOperations(pPackage : Package, genPackage : GenPackage)]
/**
 *	The lists of local operations or local operation overrides for each fragment of each type.
 */
public static class FragmentOperations {
[for (cls : Type | pPackage.ownedType->select(c : Type | c.getBehavioralType()->isEmpty())->sortedBy(name)) separator('\n')]
	[pPackage.declareLocalFragmentOperations(genPackage, cls)/]
[for (superCls : Type | cls.getAllProperSuperTypes()->sortedBy(name))]
	[pPackage.declareSuperFragmentOperations(genPackage, superCls, cls)/]
[/for]
[/for]

	/*
	 *	Install the operation descriptors in the fragment descriptors.
	 */
	static {
[for (cls : Type | pPackage.ownedType->sortedBy(name)) separator('\n')]
[for (superCls : Type | cls.getAllSuperTypes()->select(c : Type | c.getBehavioralType()->isEmpty())->sortedBy(name))]
		Fragments._[cls.name/]__[superCls.name/].initOperations(_[cls.name/]__[superCls.name/]);
[/for][/for]
	}

	public static void init() {}
}
[/template]

[template public declareLocalFragmentOperations(pPackage : Package, genPackage : GenPackage, cls : Type)]
[let ops : OrderedSet(Operation) = cls.getLocalOperationsOf()->sortedBy(getMoniker())]
private static final [emitLibraryExecutorType('ExecutorOperation')/]['[]'/] _[cls.name/]__[cls.name/] = [if ops->isEmpty()]{[else]
{
[for (i : Integer | Sequence{1..ops->size()}) separator (',\n') after ('\n')]
    [ops->at(i).emitQualifiedLiteralName(pPackage, genPackage)/] /* [ops->at(i).getSignature()/] */[/for]
[/if]};[/let]
[/template]

[template public declareSuperFragmentOperations(pPackage : Package, genPackage : GenPackage, superCls: Type, cls : Type)]
[let ops : OrderedSet(Operation) = superCls.getLocalOperationsOf()->sortedBy(getMoniker())]
private static final [emitLibraryExecutorType('ExecutorOperation')/]['[]'/] _[cls.name/]__[superCls.name/] = [if ops->isEmpty()]{[else]
{
[for (i : Integer | Sequence{1..ops->size()}) separator (',\n') after ('\n')]
[let overloadOp : Operation = cls.getOverloadOp(ops->at(i))]
    [overloadOp.emitQualifiedLiteralName(pPackage, genPackage)/] /* [overloadOp.getSignature()/] */[/let][/for]
[/if]};[/let]
[/template]

[template public declareFragmentProperties(pPackage : Package, genPackage : GenPackage)]
/**
 *	The lists of local properties for the local fragment of each type.
 */
public static class FragmentProperties {
[for (cls : Class | pPackage.ownedType->filter(Class)->sortedBy(name)) separator('\n')]
	[pPackage.declareFragmentProperty(genPackage, cls)/]
[/for]

	/**
	 *	Install the property descriptors in the fragment descriptors.
	 */
	static {
[for (cls : Class | pPackage.ownedType->filter(Class)->sortedBy(name))]
  	 	Fragments._[cls.name/]__[cls.name/].initProperties(_[cls.name/]);
[/for]
	}

	public static void init() {}
}
[/template]

[template public declareFragmentProperty(pPackage : Package, genPackage : GenPackage, cls : Class)]
[let props : OrderedSet(Property) = cls.getAllPropertiesOf()->select(prop : Property | genPackage.isProperty(prop))->sortedBy(name)]
private static final [emitLibraryExecutorType('ExecutorProperty')/]['[]'/] _[cls.name/] = [if props->isEmpty()]{[else]
{
[for (i : Integer | Sequence{1..props->size()}) separator (',\n') after ('\n')]
    [props->at(i).emitQualifiedLiteralName(pPackage, genPackage)/][/for]
[/if]};[/let]
[/template]

[query public getTypeFlags(pPackage : Package, elem : Type) : String =
if (elem.oclIsKindOf(OrderedSetType)) then (emitLibraryExecutorType('ExecutorType') + '.ORDERED | ' + emitLibraryExecutorType('ExecutorType') + '.UNIQUE')
else if (elem.oclIsKindOf(SetType)) then (emitLibraryExecutorType('ExecutorType') + '.UNIQUE')
else if (elem.oclIsKindOf(SequenceType)) then (emitLibraryExecutorType('ExecutorType') + '.ORDERED')
else '0'
endif endif endif/]
