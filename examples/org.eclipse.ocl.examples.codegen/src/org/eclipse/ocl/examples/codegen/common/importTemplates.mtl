[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::common::importTemplates('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::ocl::examples::codegen::common::elementQueries/]
[import org::eclipse::ocl::examples::codegen::common::genPackageQueries/]

[**
 * gatherImports performs tree traversal returning a list of fully qualified types, one name per line. There may be many
 * duplicates and blank lines in the return.
 */]
[template public gatherImports(ast : BooleanLiteralExp, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.values.BooleanValue
[/template]

[template public gatherImports(ast : ClassifierType, genPackage : GenPackage)]
[ast.instanceType.gatherImports(genPackage)/]
org.eclipse.ocl.examples.domain.elements.DomainClassifierType
[/template]

[template public gatherImports(ast : CollectionLiteralExp, genPackage : GenPackage) ? (ast.part->filter(CollectionRange)->size() = 0)]
[ast.type.gatherImports(genPackage)/]
[/template]

[template public gatherImports(ast : CollectionLiteralExp, genPackage : GenPackage) ? ((ast.part->size() = 1) and (ast.part->filter(CollectionRange)->size() = 1))]
org.eclipse.ocl.examples.domain.values.IntegerRange
[ast.type.gatherImports(genPackage)/]
[/template]

[template public gatherImports(ast : CollectionLiteralExp, genPackage : GenPackage)]
java.util.ArrayList
java.util.List
[ast.type.gatherImports(genPackage)/]
[/template]

[template public gatherImports(ast : CollectionItem, genPackage : GenPackage)]
[/template]

[template public gatherImports(ast : CollectionRange, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.values.IntegerRange
[/template]

[template public gatherImports(ast : CollectionType, genPackage : GenPackage)]
[ast.elementType.gatherImports(genPackage)/]
org.eclipse.ocl.examples.domain.elements.DomainCollectionType
[/template]

[template public gatherImports(ast : Element, genPackage : GenPackage)]
[/template]

[template public gatherImports(ast : EnumLiteralExp, genPackage : GenPackage)]
[ast.referredEnumLiteral.enumeration.getQualifiedEcoreClassName(genPackage)/]
[/template]

[template public gatherImports(ast : IfExp, genPackage : GenPackage)]
[/template]

[template public gatherImports(ast : IntegerLiteralExp, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.values.IntegerValue
[/template]

[template public gatherImports(ast : InvalidLiteralExp, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.values.InvalidValue
[/template]

[template public gatherImports(ast : IterateExp, genPackage : GenPackage)]
[let arity : Integer = ast.iterator->size()]
org.eclipse.ocl.examples.domain.library.AbstractBinaryOperation
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.domain.elements.DomainType
org.eclipse.ocl.examples.library.executor.ExecutorOperation
org.eclipse.ocl.examples.domain.library.LibraryIteration
org.eclipse.ocl.examples.library.executor.[genPackage.emitManagerArity(arity)/]
org.eclipse.ocl.examples.domain.values.CollectionValue
[ast.type.gatherImports(genPackage)/]
[/let]
[/template]

[template public gatherImports(ast : IteratorExp, genPackage : GenPackage)]
[let arity : Integer = ast.iterator->size()]
org.eclipse.ocl.examples.domain.library.Abstract[genPackage.emitOperationArity(arity)/]
org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator
org.eclipse.ocl.examples.library.executor.ExecutorOperation
org.eclipse.ocl.examples.domain.evaluation.InvalidValueException
org.eclipse.ocl.examples.domain.elements.DomainType
org.eclipse.ocl.examples.domain.library.LibraryIteration
org.eclipse.ocl.examples.library.executor.[genPackage.emitManagerArity(arity)/]
org.eclipse.ocl.examples.domain.values.CollectionValue
[ast.type.gatherImports(genPackage)/]
[ast._body.type.gatherImports(genPackage)/]
[/let]
[/template]

[template public gatherImports(ast : LetExp, genPackage : GenPackage)]
[ast.type.gatherImports(genPackage)/]
[/template]

[template public gatherImports(ast : NullLiteralExp, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.values.NullValue
[/template]

[template public gatherImports(ast : OperationCallExp, genPackage : GenPackage) ? ((ast.referredOperation.owningType.name = 'Boolean') and (ast.referredOperation.ownedParameter->size() = 1))]
org.eclipse.ocl.examples.library.executor.ExecutorType
org.eclipse.ocl.examples.library.executor.ExecutorOperation
org.eclipse.ocl.examples.domain.evaluation.InvalidValueException
org.eclipse.ocl.examples.domain.elements.DomainType
org.eclipse.ocl.examples.domain.library.LibraryUnaryOperation
[ast.type.getQualifiedTablesClassName(genPackage)/]
[ast.type.gatherImports(genPackage)/]
[/template]

[template public gatherImports(ast : OperationCallExp, genPackage : GenPackage) ? ((ast.referredOperation.owningType.name <> 'Boolean') or (ast.referredOperation.ownedParameter->size() <> 1))]
[let arity : Integer = ast.referredOperation.ownedParameter->size()]
org.eclipse.ocl.examples.domain.elements.DomainType
org.eclipse.ocl.examples.library.executor.ExecutorType
org.eclipse.ocl.examples.library.executor.ExecutorOperation
org.eclipse.ocl.examples.domain.library.Library[genPackage.emitOperationArity(arity)/]
[ast.type.getQualifiedTablesClassName(genPackage)/]
[ast.type.gatherImports(genPackage)/]
[/let]
[/template]

[template public gatherImports(ast : PropertyCallExp, genPackage : GenPackage)]
[if (ast.type.oclIsKindOf(TupleType))]
org.eclipse.ocl.examples.domain.values.TupleValue
[else]
org.eclipse.ocl.examples.library.executor.ExecutorType
org.eclipse.ocl.examples.library.executor.ExecutorProperty
org.eclipse.ocl.examples.domain.library.LibraryProperty
[ast.referredProperty.owningType.getQualifiedTablesClassName(genPackage)/]
[/if][/template]

[template public gatherImports(ast : RealLiteralExp, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.values.RealValue
[/template]

[template public gatherImports(ast : StringLiteralExp, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.values.StringValue
[/template]

[template public gatherImports(ast : TupleLiteralExp, genPackage : GenPackage)]
java.util.HashMap
java.util.Map
org.eclipse.ocl.examples.domain.elements.DomainTypedElement
org.eclipse.ocl.examples.domain.values.TupleValue
[/template]

[template public gatherImports(ast : TupleLiteralPart, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.elements.DomainTypedElement
org.eclipse.ocl.examples.domain.elements.DomainTupleType
[ast.type.gatherImports(genPackage)/]
[/template]

[template public gatherImports(ast : TupleType, genPackage : GenPackage)]
org.eclipse.ocl.examples.domain.elements.DomainTupleType
org.eclipse.ocl.examples.domain.elements.DomainTypedElement
[for (part : Property | ast.ownedAttribute)]
[part.type.gatherImports(genPackage)/]
[/for]
[/template]

[template public gatherImports(ast : Type, genPackage : GenPackage)]
org.eclipse.ocl.examples.library.executor.ExecutorType
[ast.getQualifiedTablesClassName(genPackage)/]
[/template]

[template public gatherImports(ast : TypeExp, genPackage : GenPackage)]
[/template]

[template public gatherImports(ast : UnlimitedNaturalLiteralExp, genPackage : GenPackage)]
[if (ast.asIntegerStringOrNull() = null)]
org.eclipse.ocl.examples.domain.values.UnlimitedValue
[else]
org.eclipse.ocl.examples.domain.values.IntegerValue
[/if]
[/template]

[template public gatherImports(ast : VariableExp, genPackage : GenPackage)]
[/template]
