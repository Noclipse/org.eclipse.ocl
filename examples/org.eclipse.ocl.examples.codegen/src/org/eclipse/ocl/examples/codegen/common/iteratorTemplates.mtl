[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::common::iteratorTemplates('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/GenModel','http://www.eclipse.org/ocl/3.1.0/OCL4Acceleo')/]

[import org::eclipse::ocl::examples::codegen::common::symbolTemplates/]
[import org::eclipse::ocl::examples::codegen::common::typeIdTemplates/]

[query public isAny(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'any') and (ast.iterator->size() = 1)/]
[query public isCollect(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'collect') and (ast.iterator->size() = 1)/]
[query public isCollectNested(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'collectNested') and (ast.iterator->size() = 1)/]
[query public isExists1(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'exists') and (ast.iterator->size() = 1)/]
[query public isForAll1(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'forAll') and (ast.iterator->size() = 1)/]
[query public isIsUnique(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'isUnique') and (ast.iterator->size() = 1)/]
[query public isOne(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'one') and (ast.iterator->size() = 1)/]
[query public isReject(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'reject') and (ast.iterator->size() = 1)/]
[query public isSelect(ast : IteratorExp) : Boolean = (ast.referredIteration.name = 'select') and (ast.iterator->size() = 1)/]

[query public isInlineable(ast : IteratorExp) : Boolean = ast.isAny() or ast.isCollect() or ast.isCollectNested() or ast.isExists1() or ast.isForAll1() or ast.isIsUnique() or ast.isOne() or ast.isReject() or ast.isSelect()/]

[comment --- any ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isAny())]
[/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isAny())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = null;
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isAny())]
[let astName : String = ast.symbolName(expInOcl)]
if ([astName/]_bodyVal != FALSE_VALUE) {
	if ([astName/]_bodyVal == null) {
		throw new <%InvalidValueException%>(<%EvaluatorMessages%>.UndefinedBody, "any");
	}
	else {			// Carry on till something found
		[astName/] = [ast.iterator->at(1).symbolName(expInOcl)/];
		break;
	}
}[/let][/template]

[comment --- collect ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isCollect())]
[let astName : String = ast.symbolName(expInOcl)]
<%CollectionValue%>.Accumulator acc_[astName/] = createCollectionAccumulatorValue([ast.type.typeId(expInOcl)/]);
[/let][/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isCollect())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = acc_[astName/];
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isCollect())]
[let astName : String = ast.symbolName(expInOcl)]
if ([astName/]_bodyVal instanceof CollectionValue) {
	<%CollectionValue%> bodyColl = (CollectionValue) [astName/]_bodyVal;
	for (Object value : bodyColl.flatten().getElements()) {
		acc_[astName/].add(value);
	}
}
else {
	acc_[astName/].add([astName/]_bodyVal);
}[/let][/template]

[comment --- collectNested ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isCollectNested())]
[let astName : String = ast.symbolName(expInOcl)]
<%CollectionValue%>.Accumulator acc_[astName/] = createCollectionAccumulatorValue([ast.type.typeId(expInOcl)/]);
[/let][/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isCollectNested())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = acc_[astName/];
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isCollectNested())]
[let astName : String = ast.symbolName(expInOcl)]
acc_[astName/].add([astName/]_bodyVal);[/let][/template]

[comment --- exists ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isExists1())]
[/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isExists1())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = FALSE_VALUE;
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isExists1())]
[let astName : String = ast.symbolName(expInOcl)]
if ([astName/]_bodyVal != FALSE_VALUE) {
	if ([astName/]_bodyVal == null) {
		throw new <%InvalidValueException%>(<%EvaluatorMessages%>.UndefinedBody, "exists");
	}
	else {
		[astName/] = TRUE_VALUE;			// Abort after a find
		break;
	}
}[/let][/template]

[comment --- forAll ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isForAll1())]
[/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isForAll1())]
[ast.symbolName(expInOcl)/] = TRUE_VALUE;
[/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isForAll1())]
[let astName : String = ast.symbolName(expInOcl)]
if ([astName/]_bodyVal != TRUE_VALUE) {
	if ([astName/]_bodyVal == null) {
		throw new <%InvalidValueException%>(<%EvaluatorMessages%>.UndefinedBody, "forAll");
	}
	else {
		[astName/] = FALSE_VALUE;			// Abort after a fail
		break;
	}
}[/let][/template]

[comment --- isUnique ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isIsUnique())]
[let astName : String = ast.symbolName(expInOcl)]
<%CollectionValue%>.Accumulator acc_[astName/] = createCollectionAccumulatorValue(<%TypeId%>.SET.getSpecializedId([ast.type.typeId(expInOcl)/]));
[/let][/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isIsUnique())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = TRUE_VALUE;
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isIsUnique())]
[let astName : String = ast.symbolName(expInOcl)]
if (acc_[astName/].includes([astName/]_bodyVal) == TRUE_VALUE) {
	[astName/] = FALSE_VALUE;		// Abort after second find
	break;
}
else {
	acc_[astName/].add([astName/]_bodyVal);
}[/let][/template]

[comment --- one ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isOne())]
[let astName : String = ast.symbolName(expInOcl)]
boolean acc_[astName/] = false;
[/let][/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isOne())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = acc_[astName/];
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isOne())]
[let astName : String = ast.symbolName(expInOcl)]
if ([astName/]_bodyVal != FALSE_VALUE) {
	if ([astName/]_bodyVal == null) {
		throw new <%InvalidValueException%>(<%EvaluatorMessages%>.UndefinedBody, "one");
	}
	else if (acc_[astName/]) {
		[astName/] = FALSE_VALUE;				// Abort after second find
		break;
	}
	else {
		acc_[astName/] = true;								// Carry on after first find
	}
}[/let][/template]

[comment --- reject ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isReject())]
[let astName : String = ast.symbolName(expInOcl)]
<%CollectionValue%>.Accumulator acc_[astName/] = createCollectionAccumulatorValue([ast.type.typeId(expInOcl)/]);
[/let][/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isReject())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = acc_[astName/];
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isReject())]
[let astName : String = ast.symbolName(expInOcl)]
if ([astName/]_bodyVal == FALSE_VALUE) {
	acc_[astName/].add([ast.iterator->at(1).symbolName(expInOcl)/]);
}
else if ([astName/]_bodyVal == null) {
	throw new <%InvalidValueException%>(<%EvaluatorMessages%>.UndefinedBody, "reject");
}[/let][/template]

[comment --- select ---------------------------------------------------------------------------------------------------------------/]

[template public emitIterator_createAccumulatorValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isSelect())]
[let astName : String = ast.symbolName(expInOcl)]
<%CollectionValue%>.Accumulator acc_[astName/] = createCollectionAccumulatorValue([ast.type.typeId(expInOcl)/]);
[/let][/template]

[template public emitIterator_resolveTerminalValue(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isSelect())]
[let astName : String = ast.symbolName(expInOcl)]
[astName/] = acc_[astName/];
[/let][/template]

[template public emitIterator_updateAccumulator(ast : IteratorExp, importer : NamedElement, genPackage : GenPackage, expInOcl : ExpressionInOCL) ?(ast.isSelect())]
[let astName : String = ast.symbolName(expInOcl)]
if ([astName/]_bodyVal == TRUE_VALUE) {
	acc_[astName/].add([ast.iterator->at(1).symbolName(expInOcl)/]);
}
else if ([astName/]_bodyVal == null) {
	throw new <%InvalidValueException%>(<%EvaluatorMessages%>.UndefinedBody, "select");
}[/let][/template]
