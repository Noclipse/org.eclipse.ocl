[**
 * <copyright>
 *
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 **/]
[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::codegen::common::emitQueries('http://www.eclipse.org/ocl/3.1.0/Pivot')/]

[query public debug(element : OclAny) : String =
invoke('org.eclipse.ocl.examples.codegen.common.EmitQueries', 'debug(java.lang.Object)', Sequence{element}) /]

[query public declareImport(qualifiedName : String) : String =
invoke('org.eclipse.ocl.examples.codegen.common.EmitQueries', 'declareImport(java.lang.String)', Sequence{qualifiedName}) /]

[query public emitCast(ecoreType : String) : String =
if ecoreType.size() > 0 then '(' + ecoreType + ')' else '' endif /]

[template public emitSuppressThrowWarnings(any : OclAny)]

	[emitType('org.eclipse.ocl.examples.domain.utilities.DomainUtil')/].suppressThrowWarnings();
[/template]

[query public emitDomainElementsType(name : String) : String =
emitType('org.eclipse.ocl.examples.domain.elements.' + name) /]

[query public emitDomainEvaluationType(name : String) : String =
emitType('org.eclipse.ocl.examples.domain.evaluation.' + name) /]

[query public emitDomainLibraryType(name : String) : String =
emitType('org.eclipse.ocl.examples.domain.library.' + name) /]

[query public emitDomainMessagesType(name : String) : String =
emitType('org.eclipse.ocl.examples.domain.messages.' + name) /]

[query public emitDomainValuesType(name : String) : String =
emitType('org.eclipse.ocl.examples.domain.values.' + name) /]

[query public emitEcoreType(name : String) : String =
emitType('org.eclipse.emf.ecore.' + name) /]

[query public emitEcoreUtilType(name : String) : String =
emitType('org.eclipse.emf.ecore.util.' + name) /]

[query public emitEmfCommonUtilType(name : String) : String =
emitType('org.eclipse.emf.common.util.' + name) /]

[query public emitImports() : String =
invoke('org.eclipse.ocl.examples.codegen.common.EmitQueries', 'emitImports()', Sequence{}) /]

[query public emitJavaUtilType(name : String) : String =
emitType('java.util.' + name) /]

[query public emitOperationType(prefix : String, arity : Integer) : String =
emitType('org.eclipse.ocl.examples.domain.library.' + prefix + getArityName(arity) + 'Operation') /]

[query public emitType(any : OclAny, qualifiedName : String) : String =
invoke('org.eclipse.ocl.examples.codegen.common.EmitQueries', 'emitImport(java.lang.String)', Sequence{qualifiedName}) /]

[query public getArityMultiple(arity : Integer) : String = 
if arity = 1 then 'Single'
else if arity = 2 then 'Double'
else 'Multiple' endif endif/]

[query public getArityName(arity : Integer) : String = 
if arity = 1 then 'Unary'
else if arity = 2 then 'Binary'
else if arity = 3 then 'Ternary'
else '' endif endif endif/]

[query public getArityPlusOneName(arity : Integer) : String = 
if arity = 0 then 'Unary'
else if arity = 1 then 'Binary'
else if arity = 2 then 'Ternary'
else '' endif endif endif/]
