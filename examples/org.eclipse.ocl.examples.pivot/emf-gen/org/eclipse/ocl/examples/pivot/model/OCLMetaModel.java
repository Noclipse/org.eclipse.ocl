/**
 * <copyright>
 *
 * Copyright (c) 2010,2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * This code is auto-generated
 * from: model/Pivot.ecore
 * by: org.eclipse.ocl.examples.build.acceleo.GenerateOCLMetaModel.java
 * defined by: org.eclipse.ocl.examples.build.acceleo.generateOCLMetaModel.mtl
 * invoked by: org.eclipse.ocl.examples.build.utilities.OCLMetaModelCodeGenerator.java
 * from: org.eclipse.ocl.examples.build.GenerateOCLMetaModel.mwe2
 *
 * Do not edit it.
 *
 * $Id$
 */
package	org.eclipse.ocl.examples.pivot.model;

import java.math.BigInteger;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.examples.domain.library.LibraryFeature;
import org.eclipse.ocl.examples.pivot.*;
import org.eclipse.ocl.examples.pivot.Class;
import org.eclipse.ocl.examples.pivot.Package;
import org.eclipse.ocl.examples.pivot.manager.PivotStandardLibrary;
import org.eclipse.ocl.examples.pivot.model.OCLstdlib;
import org.eclipse.ocl.examples.pivot.utilities.PivotUtil;

/**
 * This is the http://www.eclipse.org/ocl/3.1.0/Pivot Pivot Model of the Pivot Model
 * auto-generated from model/Pivot.ecore.
 * It facilitates efficient model loading without the overheads of model reading.
 */
@SuppressWarnings({"nls", "unused"})
public class OCLMetaModel extends XMIResourceImpl
{
	/**
	 *	The URI of this Standard Library.
	 */
	public static final String PIVOT_URI = "http://www.eclipse.org/ocl/3.1.0/Pivot";

	public static Package create(@NonNull PivotStandardLibrary standardLibrary, String name, String nsPrefix, String nsURI) {
		OCLMetaModel resource = new OCLMetaModel(URI.createURI(PIVOT_URI));
		Contents contents = new Contents(standardLibrary);
		Root root = contents.create(name != null ? name : "pivot", nsPrefix != null ? nsPrefix : "pivot", nsURI != null ? nsURI : "http://www.eclipse.org/ocl/3.1.0/Pivot");
		resource.getContents().add(root);
		return contents.metamodel;
	}

	protected OCLMetaModel(URI uri) {
		super(uri);
	}

//	public OCLMetaModel(PivotStandardLibrary standardLibrary, String name, String nsPrefix, String nsURI) {
//		super(URI.createURI(PIVOT_URI));
//		Contents contents = new Contents(standardLibrary);
//		Model model = contents.create(name != null ? name : "pivot", nsPrefix != null ? nsPrefix : "pivot", nsURI != null ? nsURI : "http://www.eclipse.org/ocl/3.1.0/Pivot");
//		getContents().add(model);
//	}

	protected static class Contents extends AbstractContents
	{
		protected Contents(@NonNull PivotStandardLibrary standardLibrary) {
			super(standardLibrary);
		}

		protected final PrimitiveType _Boolean = standardLibrary.getBooleanType();
		protected final PrimitiveType _Integer = standardLibrary.getIntegerType();
		protected final Class _OclElement = standardLibrary.getOclElementType();
		protected final PrimitiveType _Real = standardLibrary.getRealType();
		protected final PrimitiveType _String = standardLibrary.getStringType();
		protected final PrimitiveType _UnlimitedNatural = standardLibrary.getUnlimitedNaturalType();

		protected Root root;
		protected Package metamodel;

		protected @NonNull Root create(@NonNull String name, String nsPrefix, @NonNull String nsURI)
		{
			@NonNull Root theRoot = root = createRoot("pivot", "http://www.eclipse.org/ocl/3.1.0/Pivot");
			metamodel = createPackage(name, nsPrefix, nsURI);
			installPackages();
			installOclTypes();
			installPrimitiveTypes();
			installEnumerations();
			installParameterTypes();
			installOperations();
			installIterations();
			installProperties();
			installTemplateSignatures();
			installComments();
			return theRoot;
		}
	
		protected void installPackages() {
			root.getNestedPackage().add(metamodel);	
		}
		
		protected final Class _Annotation = createClass("Annotation");
		protected final Class _AnyType = createClass("AnyType");
		protected final Class _AppliedStereotype = createClass("AppliedStereotype");
		protected final Class _AssociationClass = createClass("AssociationClass");
		protected final Class _AssociationClassCallExp = createClass("AssociationClassCallExp");
		protected final Class _BagType = createClass("BagType");
		protected final Class _BooleanLiteralExp = createClass("BooleanLiteralExp");
		protected final Class _CallExp = createClass("CallExp");
		protected final Class _CallOperationAction = createClass("CallOperationAction");
		protected final Class _Class = createClass("Class");
		protected final Class _ClassifierType = createClass("ClassifierType");
		protected final Class _CollectionItem = createClass("CollectionItem");
		protected final Class _CollectionLiteralExp = createClass("CollectionLiteralExp");
		protected final Class _CollectionLiteralPart = createClass("CollectionLiteralPart");
		protected final Class _CollectionRange = createClass("CollectionRange");
		protected final Class _CollectionType = createClass("CollectionType");
		protected final Class _Comment = createClass("Comment");
		protected final Class _Constraint = createClass("Constraint");
		protected final Class _ConstructorExp = createClass("ConstructorExp");
		protected final Class _ConstructorPart = createClass("ConstructorPart");
		protected final Class _DataType = createClass("DataType");
		protected final Class _Detail = createClass("Detail");
		protected final Class _DynamicElement = createClass("DynamicElement");
		protected final Class _DynamicProperty = createClass("DynamicProperty");
		protected final Class _DynamicType = createClass("DynamicType");
		protected final Class _Element = createClass("Element");
		protected final Class _EnumLiteralExp = createClass("EnumLiteralExp");
		protected final Class _Enumeration = createClass("Enumeration");
		protected final Class _EnumerationLiteral = createClass("EnumerationLiteral");
		protected final Class _ExpressionInOCL = createClass("ExpressionInOCL");
		protected final Class _Feature = createClass("Feature");
		protected final Class _FeatureCallExp = createClass("FeatureCallExp");
		protected final Class _IfExp = createClass("IfExp");
		protected final DataType _Int = createDataType("Int");
		protected final Class _IntegerLiteralExp = createClass("IntegerLiteralExp");
		protected final Class _InvalidLiteralExp = createClass("InvalidLiteralExp");
		protected final Class _InvalidType = createClass("InvalidType");
		protected final Class _IterateExp = createClass("IterateExp");
		protected final Class _Iteration = createClass("Iteration");
		protected final Class _IteratorExp = createClass("IteratorExp");
		protected final Class _LambdaType = createClass("LambdaType");
		protected final Class _LetExp = createClass("LetExp");
		protected final Class _Library = createClass("Library");
		protected final DataType _LibraryFeature = createDataType("LibraryFeature");
		protected final Class _LiteralExp = createClass("LiteralExp");
		protected final Class _LoopExp = createClass("LoopExp");
		protected final Class _MessageExp = createClass("MessageExp");
		protected final Class _MessageType = createClass("MessageType");
		protected final Class _MorePivotable = createClass("MorePivotable");
		protected final Class _MultiplicityElement = createClass("MultiplicityElement");
		protected final Class _Nameable = createClass("Nameable");
		protected final Class _NamedElement = createClass("NamedElement");
		protected final Class _Namespace = createClass("Namespace");
		protected final Class _NavigationCallExp = createClass("NavigationCallExp");
		protected final Class _NullLiteralExp = createClass("NullLiteralExp");
		protected final Class _NumericLiteralExp = createClass("NumericLiteralExp");
		protected final Class _OCLExpression = createClass("OCLExpression");
		protected final DataType _Object = createDataType("Object");
		protected final Class _OpaqueExpression = createClass("OpaqueExpression");
		protected final Class _Operation = createClass("Operation");
		protected final Class _OperationCallExp = createClass("OperationCallExp");
		protected final Class _OperationTemplateParameter = createClass("OperationTemplateParameter");
		protected final Class _OrderedSetType = createClass("OrderedSetType");
		protected final Class _Package = createClass("Package");
		protected final Class _PackageableElement = createClass("PackageableElement");
		protected final Class _Parameter = createClass("Parameter");
		protected final Class _ParameterableElement = createClass("ParameterableElement");
		protected final Class _Pivotable = createClass("Pivotable");
		protected final Class _Precedence = createClass("Precedence");
		protected final Class _PrimitiveLiteralExp = createClass("PrimitiveLiteralExp");
		protected final Class _PrimitiveType = createClass("PrimitiveType");
		protected final Class _Property = createClass("Property");
		protected final Class _PropertyCallExp = createClass("PropertyCallExp");
		protected final Class _RealLiteralExp = createClass("RealLiteralExp");
		protected final Class _Root = createClass("Root");
		protected final Class _SelfType = createClass("SelfType");
		protected final Class _SendSignalAction = createClass("SendSignalAction");
		protected final Class _SequenceType = createClass("SequenceType");
		protected final Class _SetType = createClass("SetType");
		protected final Class _Signal = createClass("Signal");
		protected final Class _State = createClass("State");
		protected final Class _StateExp = createClass("StateExp");
		protected final Class _StereotypedProperty = createClass("StereotypedProperty");
		protected final Class _StringLiteralExp = createClass("StringLiteralExp");
		protected final Class _TemplateBinding = createClass("TemplateBinding");
		protected final Class _TemplateParameter = createClass("TemplateParameter");
		protected final Class _TemplateParameterSubstitution = createClass("TemplateParameterSubstitution");
		protected final Class _TemplateParameterType = createClass("TemplateParameterType");
		protected final Class _TemplateSignature = createClass("TemplateSignature");
		protected final Class _TemplateableElement = createClass("TemplateableElement");
		protected final DataType _Throwable = createDataType("Throwable");
		protected final Class _TupleLiteralExp = createClass("TupleLiteralExp");
		protected final Class _TupleLiteralPart = createClass("TupleLiteralPart");
		protected final Class _TupleType = createClass("TupleType");
		protected final Class _Type = createClass("Type");
		protected final Class _TypeExp = createClass("TypeExp");
		protected final Class _TypeTemplateParameter = createClass("TypeTemplateParameter");
		protected final Class _TypedElement = createClass("TypedElement");
		protected final Class _TypedMultiplicityElement = createClass("TypedMultiplicityElement");
		protected final Class _UnlimitedNaturalLiteralExp = createClass("UnlimitedNaturalLiteralExp");
		protected final Class _UnspecifiedType = createClass("UnspecifiedType");
		protected final Class _UnspecifiedValueExp = createClass("UnspecifiedValueExp");
		protected final Class _ValueSpecification = createClass("ValueSpecification");
		protected final Class _Variable = createClass("Variable");
		protected final Class _VariableDeclaration = createClass("VariableDeclaration");
		protected final Class _VariableExp = createClass("VariableExp");
		protected final Class _Visitable = createClass("Visitable");
		protected final Class _Visitor = createClass("Visitor");
		protected final Class _VoidType = createClass("VoidType");
		
		
		protected final Enumeration _AssociativityKind = createEnumeration("AssociativityKind");
		protected final Enumeration _CollectionKind = createEnumeration("CollectionKind");
		
		protected final Class _Visitor_R = createClass("R");
		
		protected void installOclTypes() {
			final List<Type> ownedTypes = metamodel.getOwnedType();
			Type type;
			List<Type> superClasses;
			ownedTypes.add(type = _Annotation);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _AnyType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _AppliedStereotype);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _AssociationClass);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _AssociationClassCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NavigationCallExp);
			ownedTypes.add(type = _BagType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _BooleanLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _CallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _CallOperationAction);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _Class);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			superClasses.add(_Namespace);
			ownedTypes.add(type = _ClassifierType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _CollectionItem);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionLiteralPart);
			ownedTypes.add(type = _CollectionLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _CollectionLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _CollectionRange);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionLiteralPart);
			ownedTypes.add(type = _CollectionType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _Comment);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _ConstructorExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _DataType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _Detail);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _DynamicElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _DynamicProperty);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _DynamicType);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			superClasses.add(_DynamicElement);
			ownedTypes.add(type = _Element);
			superClasses = type.getSuperClass();
			superClasses.add(_Visitable);
			ownedTypes.add(type = _EnumLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _Enumeration);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _EnumerationLiteral);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _ExpressionInOCL);
			superClasses = type.getSuperClass();
			superClasses.add(_OpaqueExpression);
			ownedTypes.add(type = _Feature);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedMultiplicityElement);
			ownedTypes.add(type = _FeatureCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_CallExp);
			ownedTypes.add(type = _IfExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _Int);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _IntegerLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NumericLiteralExp);
			ownedTypes.add(type = _InvalidLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _InvalidType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _IterateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LoopExp);
			ownedTypes.add(type = _Iteration);
			superClasses = type.getSuperClass();
			superClasses.add(_Operation);
			ownedTypes.add(type = _IteratorExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LoopExp);
			ownedTypes.add(type = _LambdaType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _LetExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _Library);
			superClasses = type.getSuperClass();
			superClasses.add(_Package);
			ownedTypes.add(type = _LibraryFeature);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _LiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _LoopExp);
			superClasses = type.getSuperClass();
			superClasses.add(_CallExp);
			ownedTypes.add(type = _MessageExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _MessageType);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			ownedTypes.add(type = _MorePivotable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _MultiplicityElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _Nameable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _NamedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			superClasses.add(_Nameable);
			ownedTypes.add(type = _Namespace);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _NavigationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_FeatureCallExp);
			ownedTypes.add(type = _NullLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _NumericLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _OCLExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _Object);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _OpaqueExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_ValueSpecification);
			ownedTypes.add(type = _Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_Feature);
			superClasses.add(_Namespace);
			superClasses.add(_TemplateableElement);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _OperationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_FeatureCallExp);
			ownedTypes.add(type = _OperationTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_TemplateParameter);
			ownedTypes.add(type = _OrderedSetType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _Package);
			superClasses = type.getSuperClass();
			superClasses.add(_Namespace);
			superClasses.add(_TemplateableElement);
			ownedTypes.add(type = _PackageableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _Parameter);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedMultiplicityElement);
			superClasses.add(_VariableDeclaration);
			ownedTypes.add(type = _ParameterableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _Pivotable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _Precedence);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _PrimitiveLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _PrimitiveType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _Property);
			superClasses = type.getSuperClass();
			superClasses.add(_Feature);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _PropertyCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NavigationCallExp);
			ownedTypes.add(type = _RealLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NumericLiteralExp);
			ownedTypes.add(type = _Root);
			superClasses = type.getSuperClass();
			superClasses.add(_Namespace);
			ownedTypes.add(type = _SelfType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _SendSignalAction);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _SequenceType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _SetType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _Signal);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _State);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _StateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _StereotypedProperty);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _StringLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _TemplateBinding);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateParameterSubstitution);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateParameterType);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			ownedTypes.add(type = _TemplateSignature);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _Throwable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _TupleLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _TupleLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_VariableDeclaration);
			ownedTypes.add(type = _TupleType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _Type);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			superClasses.add(_TemplateableElement);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _TypeExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _TypeTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_TemplateParameter);
			ownedTypes.add(type = _TypedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _TypedMultiplicityElement);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			superClasses.add(_MultiplicityElement);
			ownedTypes.add(type = _UnlimitedNaturalLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NumericLiteralExp);
			ownedTypes.add(type = _UnspecifiedType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _UnspecifiedValueExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _ValueSpecification);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_VariableDeclaration);
			ownedTypes.add(type = _VariableDeclaration);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _VariableExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _Visitable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _Visitor);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _VoidType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
		}
		
		protected void installPrimitiveTypes() {
			final List<Type> ownedTypes = metamodel.getOwnedType();
			PrimitiveType type;
		}
		
		protected void installEnumerations() {
			final List<Type> ownedTypes = metamodel.getOwnedType();
			Enumeration type;
			List<EnumerationLiteral> enumerationLiterals;
			ownedTypes.add(type = _AssociativityKind);
			enumerationLiterals = type.getOwnedLiteral();
			enumerationLiterals.add(createEnumerationLiteral("Left"));
			enumerationLiterals.add(createEnumerationLiteral("Right"));
			type.getSuperClass().add(_Enumeration);
			ownedTypes.add(type = _CollectionKind);
			enumerationLiterals = type.getOwnedLiteral();
			enumerationLiterals.add(createEnumerationLiteral("Collection"));
			enumerationLiterals.add(createEnumerationLiteral("Set"));
			enumerationLiterals.add(createEnumerationLiteral("OrderedSet"));
			enumerationLiterals.add(createEnumerationLiteral("Bag"));
			enumerationLiterals.add(createEnumerationLiteral("Sequence"));
			type.getSuperClass().add(_Enumeration);
		}
		
		protected void installParameterTypes() {
		}
		
		protected final Operation op_Element_allOwnedElements = createOperation("allOwnedElements", _Element, null, null);
		protected final Operation op_Element_getValue = createOperation("getValue", _Element, null, null);
		protected final Operation op_MultiplicityElement_includesCardinality = createOperation("includesCardinality", _Boolean, null, null);
		protected final Operation op_MultiplicityElement_includesMultiplicity = createOperation("includesMultiplicity", _Boolean, null, null);
		protected final Operation op_MultiplicityElement_isMultivalued = createOperation("isMultivalued", _Boolean, null, null);
		protected final Operation op_MultiplicityElement_lowerBound = createOperation("lowerBound", _Integer, null, null);
		protected final Operation op_MultiplicityElement_upperBound = createOperation("upperBound", _UnlimitedNatural, null, null);
		protected final Operation op_ParameterableElement_isCompatibleWith = createOperation("isCompatibleWith", _Boolean, null, null);
		protected final Operation op_ParameterableElement_isTemplateParameter = createOperation("isTemplateParameter", _Boolean, null, null);
		protected final Operation op_Property_isAttribute = createOperation("isAttribute", _Boolean, null, null);
		protected final Operation op_SelfType_resolveSelfType = createOperation("resolveSelfType", _Type, null, null);
		protected final Operation op_TemplateableElement_isTemplate = createOperation("isTemplate", _Boolean, null, null);
		protected final Operation op_TemplateableElement_parameterableElements = createOperation("parameterableElements", _ParameterableElement, null, null);
		protected final Operation op_null_isTemplate = createOperation("isTemplate", _Boolean, null, null);
		protected final Operation op_Type_resolveSelfType = createOperation("resolveSelfType", _Type, null, null);
		protected final Operation op_TypedMultiplicityElement_CompatibleBody = createOperation("CompatibleBody", _Boolean, null, null);
		protected final Operation op_TypedMultiplicityElement_makeParameter = createOperation("makeParameter", _Parameter, null, null);
		protected final Operation op_ValueSpecification_booleanValue = createOperation("booleanValue", _Boolean, null, null);
		protected final Operation op_ValueSpecification_integerValue = createOperation("integerValue", _Integer, null, null);
		protected final Operation op_ValueSpecification_isComputable = createOperation("isComputable", _Boolean, null, null);
		protected final Operation op_ValueSpecification_isNull = createOperation("isNull", _Boolean, null, null);
		protected final Operation op_ValueSpecification_stringValue = createOperation("stringValue", _String, null, null);
		protected final Operation op_ValueSpecification_unlimitedValue = createOperation("unlimitedValue", _UnlimitedNatural, null, null);
		
		protected void installOperations() {
			List<Operation> ownedOperations;
			List<Parameter> ownedParameters;
			Operation operation;
			Parameter parameter;
			ownedOperations = _Element.getOwnedOperation();
			ownedOperations.add(operation = op_Element_allOwnedElements);
			operation.setLower(BigInteger.valueOf(0));
			operation.setUpper(BigInteger.valueOf(-1));
			ownedOperations.add(operation = op_Element_getValue);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("stereotype", _Type));
			ownedParameters.add(parameter = createParameter("propertyName", _String));
			ownedOperations = _MultiplicityElement.getOwnedOperation();
			ownedOperations.add(operation = op_MultiplicityElement_includesCardinality);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("C", _Integer));
			ownedOperations.add(operation = op_MultiplicityElement_includesMultiplicity);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("M", _MultiplicityElement));
			ownedOperations.add(operation = op_MultiplicityElement_isMultivalued);
			ownedOperations.add(operation = op_MultiplicityElement_lowerBound);
			ownedOperations.add(operation = op_MultiplicityElement_upperBound);
			ownedOperations = _ParameterableElement.getOwnedOperation();
			ownedOperations.add(operation = op_ParameterableElement_isCompatibleWith);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("p", _ParameterableElement));
			ownedOperations.add(operation = op_ParameterableElement_isTemplateParameter);
			ownedOperations = _Property.getOwnedOperation();
			ownedOperations.add(operation = op_Property_isAttribute);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("p", _Property));
			ownedOperations = _SelfType.getOwnedOperation();
			ownedOperations.add(operation = op_SelfType_resolveSelfType);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("selfType", _Type));
			ownedOperations = _TemplateableElement.getOwnedOperation();
			ownedOperations.add(operation = op_TemplateableElement_isTemplate);
			ownedOperations.add(operation = op_TemplateableElement_parameterableElements);
			operation.setLower(BigInteger.valueOf(0));
			operation.setUpper(BigInteger.valueOf(-1));
			ownedOperations = _Type.getOwnedOperation();
			ownedOperations.add(operation = op_Type_resolveSelfType);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("selfType", _Type));
			ownedOperations = _TypedMultiplicityElement.getOwnedOperation();
			ownedOperations.add(operation = op_TypedMultiplicityElement_CompatibleBody);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("bodySpecification", _ValueSpecification));
			ownedOperations.add(operation = op_TypedMultiplicityElement_makeParameter);
			ownedOperations = _ValueSpecification.getOwnedOperation();
			ownedOperations.add(operation = op_ValueSpecification_booleanValue);
			ownedOperations.add(operation = op_ValueSpecification_integerValue);
			ownedOperations.add(operation = op_ValueSpecification_isComputable);
			ownedOperations.add(operation = op_ValueSpecification_isNull);
			ownedOperations.add(operation = op_ValueSpecification_stringValue);
			ownedOperations.add(operation = op_ValueSpecification_unlimitedValue);
		}
		
		
		protected void installIterations() {
			List<Operation> ownedIterations;
			List<Parameter> ownedParameters;
			Iteration iteration;
			Parameter parameter;
		}
			
		protected final Property pr_Annotation_NamedElement = createProperty("NamedElement", _NamedElement);
		protected final Property pr_Annotation_ownedContent = createProperty("ownedContent", _Element);
		protected final Property pr_Annotation_ownedDetail = createProperty("ownedDetail", _Detail);
		protected final Property pr_Annotation_reference = createProperty("reference", _Element);
		protected final Property pr_AppliedStereotype_Element = createProperty("Element", _Element);
		protected final Property pr_AppliedStereotype_referredType = createProperty("referredType", _Type);
		protected final Property pr_AppliedStereotype_stereotypedProperty = createProperty("stereotypedProperty", _StereotypedProperty);
		protected final Property pr_AssociationClass_AssociationClassCallExp = createProperty("AssociationClassCallExp", _AssociationClassCallExp);
		protected final Property pr_AssociationClass_unownedAttribute = createProperty("unownedAttribute", _Property);
		protected final Property pr_AssociationClassCallExp_referredAssociationClass = createProperty("referredAssociationClass", _AssociationClass);
		protected final Property pr_BooleanLiteralExp_booleanSymbol = createProperty("booleanSymbol", _Boolean);
		protected final Property pr_CallExp_implicit = createProperty("implicit", _Boolean);
		protected final Property pr_CallExp_source = createProperty("source", _OCLExpression);
		protected final Property pr_CallOperationAction_MessageExp = createProperty("MessageExp", _MessageExp);
		protected final Property pr_CallOperationAction_operation = createProperty("operation", _Operation);
		protected final Property pr_null_instanceClassName = createProperty("instanceClassName", _String);
		protected final Property pr_null_ownedAttribute = createProperty("ownedAttribute", _Property);
		protected final Property pr_null_ownedOperation = createProperty("ownedOperation", _Operation);
		protected final Property pr_null_superClass = createProperty("superClass", _Class);
		protected final Property pr_Class_isAbstract = createProperty("isAbstract", _Boolean);
		protected final Property pr_Class_isInterface = createProperty("isInterface", _Boolean);
		protected final Property pr_ClassifierType_instanceType = createProperty("instanceType", _Type);
		protected final Property pr_CollectionItem_item = createProperty("item", _OCLExpression);
		protected final Property pr_CollectionLiteralExp_kind = createProperty("kind", _CollectionKind);
		protected final Property pr_CollectionLiteralExp_part = createProperty("part", _CollectionLiteralPart);
		protected final Property pr_CollectionLiteralPart_CollectionLiteralExp = createProperty("CollectionLiteralExp", _CollectionLiteralExp);
		protected final Property pr_CollectionRange_first = createProperty("first", _OCLExpression);
		protected final Property pr_CollectionRange_last = createProperty("last", _OCLExpression);
		protected final Property pr_CollectionType_elementType = createProperty("elementType", _Type);
		protected final Property pr_Comment_Element = createProperty("Element", _Element);
		protected final Property pr_Comment_annotatedElement = createProperty("annotatedElement", _Element);
		protected final Property pr_Comment_body = createProperty("body", _String);
		protected final Property pr_Constraint_constrainedElement = createProperty("constrainedElement", _Element);
		protected final Property pr_Constraint_context = createProperty("context", _NamedElement);
		protected final Property pr_Constraint_isCallable = createProperty("isCallable", _Boolean);
		protected final Property pr_Constraint_specification = createProperty("specification", _ValueSpecification);
		protected final Property pr_Constraint_stereotype = createProperty("stereotype", _String);
		protected final Property pr_ConstructorExp_part = createProperty("part", _ConstructorPart);
		protected final Property pr_ConstructorExp_value = createProperty("value", _String);
		protected final Property pr_ConstructorPart_ConstructorExp = createProperty("ConstructorExp", _ConstructorExp);
		protected final Property pr_ConstructorPart_initExpression = createProperty("initExpression", _OCLExpression);
		protected final Property pr_ConstructorPart_referredProperty = createProperty("referredProperty", _Property);
		protected final Property pr_DataType_behavioralType = createProperty("behavioralType", _Type);
		protected final Property pr_DataType_isSerializable = createProperty("isSerializable", _Boolean);
		protected final Property pr_Detail_Annotation = createProperty("Annotation", _Annotation);
		protected final Property pr_Detail_value = createProperty("value", _String);
		protected final Property pr_DynamicElement_metaType = createProperty("metaType", _Type);
		protected final Property pr_DynamicProperty_DynamicType = createProperty("DynamicType", _DynamicType);
		protected final Property pr_DynamicProperty_default = createProperty("default", _String);
		protected final Property pr_DynamicProperty_referredProperty = createProperty("referredProperty", _Property);
		protected final Property pr_null_metaType = createProperty("metaType", _Type);
		protected final Property pr_DynamicType_ownedProperty = createProperty("ownedProperty", _DynamicProperty);
		protected final Property pr_Element_Constraint = createProperty("Constraint", _Constraint);
		protected final Property pr_Element_appliedStereotype = createProperty("appliedStereotype", _AppliedStereotype);
		protected final Property pr_Element_ownedComment = createProperty("ownedComment", _Comment);
		protected final Property pr_EnumLiteralExp_referredEnumLiteral = createProperty("referredEnumLiteral", _EnumerationLiteral);
		protected final Property pr_Enumeration_ownedLiteral = createProperty("ownedLiteral", _EnumerationLiteral);
		protected final Property pr_EnumerationLiteral_EnumLiteralExp = createProperty("EnumLiteralExp", _EnumLiteralExp);
		protected final Property pr_EnumerationLiteral_enumeration = createProperty("enumeration", _Enumeration);
		protected final Property pr_EnumerationLiteral_value = createProperty("value", _Integer);
		protected final Property pr_ExpressionInOCL_bodyExpression = createProperty("bodyExpression", _OCLExpression);
		protected final Property pr_ExpressionInOCL_contextVariable = createProperty("contextVariable", _Variable);
		protected final Property pr_ExpressionInOCL_messageExpression = createProperty("messageExpression", _OCLExpression);
		protected final Property pr_ExpressionInOCL_parameterVariable = createProperty("parameterVariable", _Variable);
		protected final Property pr_ExpressionInOCL_resultVariable = createProperty("resultVariable", _Variable);
		protected final Property pr_null_isStatic = createProperty("isStatic", _Boolean);
		protected final Property pr_Feature_implementation = createProperty("implementation", _LibraryFeature);
		protected final Property pr_Feature_implementationClass = createProperty("implementationClass", _String);
		protected final Property pr_FeatureCallExp_isPre = createProperty("isPre", _Boolean);
		protected final Property pr_IfExp_condition = createProperty("condition", _OCLExpression);
		protected final Property pr_IfExp_elseExpression = createProperty("elseExpression", _OCLExpression);
		protected final Property pr_IfExp_thenExpression = createProperty("thenExpression", _OCLExpression);
		protected final Property pr_IntegerLiteralExp_integerSymbol = createProperty("integerSymbol", _Integer);
		protected final Property pr_IterateExp_result = createProperty("result", _Variable);
		protected final Property pr_Iteration_LoopExp = createProperty("LoopExp", _LoopExp);
		protected final Property pr_Iteration_ownedAccumulator = createProperty("ownedAccumulator", _Parameter);
		protected final Property pr_Iteration_ownedIterator = createProperty("ownedIterator", _Parameter);
		protected final Property pr_LambdaType_contextType = createProperty("contextType", _Type);
		protected final Property pr_LambdaType_parameterType = createProperty("parameterType", _Type);
		protected final Property pr_LambdaType_resultType = createProperty("resultType", _Type);
		protected final Property pr_LetExp_in = createProperty("in", _OCLExpression);
		protected final Property pr_LetExp_variable = createProperty("variable", _Variable);
		protected final Property pr_Library_ownedPrecedence = createProperty("ownedPrecedence", _Precedence);
		protected final Property pr_LoopExp_body = createProperty("body", _OCLExpression);
		protected final Property pr_LoopExp_iterator = createProperty("iterator", _Variable);
		protected final Property pr_LoopExp_referredIteration = createProperty("referredIteration", _Iteration);
		protected final Property pr_MessageExp_argument = createProperty("argument", _OCLExpression);
		protected final Property pr_MessageExp_calledOperation = createProperty("calledOperation", _CallOperationAction);
		protected final Property pr_MessageExp_sentSignal = createProperty("sentSignal", _SendSignalAction);
		protected final Property pr_MessageExp_target = createProperty("target", _OCLExpression);
		protected final Property pr_MessageType_referredOperation = createProperty("referredOperation", _Operation);
		protected final Property pr_MessageType_referredSignal = createProperty("referredSignal", _Signal);
		protected final Property pr_MultiplicityElement_isOrdered = createProperty("isOrdered", _Boolean);
		protected final Property pr_MultiplicityElement_isUnique = createProperty("isUnique", _Boolean);
		protected final Property pr_MultiplicityElement_lower = createProperty("lower", _Integer);
		protected final Property pr_MultiplicityElement_upper = createProperty("upper", _UnlimitedNatural);
		protected final Property pr_NamedElement_isStatic = createProperty("isStatic", _Boolean);
		protected final Property pr_NamedElement_name = createProperty("name", _String);
		protected final Property pr_NamedElement_ownedAnnotation = createProperty("ownedAnnotation", _Annotation);
		protected final Property pr_NamedElement_ownedRule = createProperty("ownedRule", _Constraint);
		protected final Property pr_NavigationCallExp_navigationSource = createProperty("navigationSource", _Property);
		protected final Property pr_NavigationCallExp_qualifier = createProperty("qualifier", _OCLExpression);
		protected final Property pr_OCLExpression_CallExp = createProperty("CallExp", _CallExp);
		protected final Property pr_OCLExpression_CollectionItem = createProperty("CollectionItem", _CollectionItem);
		protected final Property pr_OCLExpression_ConstructorPart = createProperty("ConstructorPart", _ConstructorPart);
		protected final Property pr_OCLExpression_LetExp = createProperty("LetExp", _LetExp);
		protected final Property pr_OCLExpression_LoopExp = createProperty("LoopExp", _LoopExp);
		protected final Property pr_OCLExpression_NavigationCallExp = createProperty("NavigationCallExp", _NavigationCallExp);
		protected final Property pr_OCLExpression_OperationCallExp = createProperty("OperationCallExp", _OperationCallExp);
		protected final Property pr_OCLExpression_TupleLiteralPart = createProperty("TupleLiteralPart", _TupleLiteralPart);
		protected final Property pr_OCLExpression_Variable = createProperty("Variable", _Variable);
		protected final Property pr_OpaqueExpression_body = createProperty("body", _String);
		protected final Property pr_OpaqueExpression_language = createProperty("language", _String);
		protected final Property pr_OpaqueExpression_message = createProperty("message", _String);
		protected final Property pr_OpaqueExpression_valueExpression = createProperty("valueExpression", _ExpressionInOCL);
		protected final Property pr_null_templateParameter = createProperty("templateParameter", _TemplateParameter);
		protected final Property pr_Operation_CallOperationAction = createProperty("CallOperationAction", _CallOperationAction);
		protected final Property pr_Operation_MessageType = createProperty("MessageType", _MessageType);
		protected final Property pr_Operation_Operation = createProperty("Operation", _Operation);
		protected final Property pr_Operation_OperationCallExp = createProperty("OperationCallExp", _OperationCallExp);
		protected final Property pr_Operation_class = createProperty("class", _Class);
		protected final Property pr_Operation_ownedParameter = createProperty("ownedParameter", _Parameter);
		protected final Property pr_Operation_owningType = createProperty("owningType", _Type);
		protected final Property pr_Operation_precedence = createProperty("precedence", _Precedence);
		protected final Property pr_Operation_raisedException = createProperty("raisedException", _Type);
		protected final Property pr_Operation_redefinedOperation = createProperty("redefinedOperation", _Operation);
		protected final Property pr_OperationCallExp_argument = createProperty("argument", _OCLExpression);
		protected final Property pr_OperationCallExp_referredOperation = createProperty("referredOperation", _Operation);
		protected final Property pr_null_parameteredElement = createProperty("parameteredElement", _ParameterableElement);
		protected final Property pr_Package_Root = createProperty("Root", _Root);
		protected final Property pr_Package_importedPackage = createProperty("importedPackage", _Package);
		protected final Property pr_Package_nestedPackage = createProperty("nestedPackage", _Package);
		protected final Property pr_Package_nestingPackage = createProperty("nestingPackage", _Package);
		protected final Property pr_Package_nsPrefix = createProperty("nsPrefix", _String);
		protected final Property pr_Package_nsURI = createProperty("nsURI", _String);
		protected final Property pr_Package_ownedType = createProperty("ownedType", _Type);
		protected final Property pr_Parameter_Variable = createProperty("Variable", _Variable);
		protected final Property pr_Parameter_operation = createProperty("operation", _Operation);
		protected final Property pr_ParameterableElement_owningTemplateParameter = createProperty("owningTemplateParameter", _TemplateParameter);
		protected final Property pr_ParameterableElement_templateParameter = createProperty("templateParameter", _TemplateParameter);
		protected final Property pr_Precedence_Library = createProperty("Library", _Library);
		protected final Property pr_Precedence_Operation = createProperty("Operation", _Operation);
		protected final Property pr_Precedence_associativity = createProperty("associativity", _AssociativityKind);
		protected final Property pr_Precedence_order = createProperty("order", _Integer);
		protected final Property pr_Property_ConstructorPart = createProperty("ConstructorPart", _ConstructorPart);
		protected final Property pr_Property_DynamicProperty = createProperty("DynamicProperty", _DynamicProperty);
		protected final Property pr_Property_NavigationCallExp = createProperty("NavigationCallExp", _NavigationCallExp);
		protected final Property pr_Property_PropertyCallExp = createProperty("PropertyCallExp", _PropertyCallExp);
		protected final Property pr_Property_StereotypedProperty = createProperty("StereotypedProperty", _StereotypedProperty);
		protected final Property pr_Property_association = createProperty("association", _AssociationClass);
		protected final Property pr_Property_class = createProperty("class", _Class);
		protected final Property pr_Property_default = createProperty("default", _String);
		protected final Property pr_Property_implicit = createProperty("implicit", _Boolean);
		protected final Property pr_Property_isComposite = createProperty("isComposite", _Boolean);
		protected final Property pr_Property_isDerived = createProperty("isDerived", _Boolean);
		protected final Property pr_Property_isID = createProperty("isID", _Boolean);
		protected final Property pr_Property_isReadOnly = createProperty("isReadOnly", _Boolean);
		protected final Property pr_Property_isResolveProxies = createProperty("isResolveProxies", _Boolean);
		protected final Property pr_Property_isTransient = createProperty("isTransient", _Boolean);
		protected final Property pr_Property_isUnsettable = createProperty("isUnsettable", _Boolean);
		protected final Property pr_Property_isVolatile = createProperty("isVolatile", _Boolean);
		protected final Property pr_Property_keys = createProperty("keys", _Property);
		protected final Property pr_Property_opposite = createProperty("opposite", _Property);
		protected final Property pr_Property_owningType = createProperty("owningType", _Type);
		protected final Property pr_Property_redefinedProperty = createProperty("redefinedProperty", _Property);
		protected final Property pr_Property_subsettedProperty = createProperty("subsettedProperty", _Property);
		protected final Property pr_PropertyCallExp_referredProperty = createProperty("referredProperty", _Property);
		protected final Property pr_RealLiteralExp_realSymbol = createProperty("realSymbol", _Real);
		protected final Property pr_Root_externalURI = createProperty("externalURI", _String);
		protected final Property pr_Root_nestedPackage = createProperty("nestedPackage", _Package);
		protected final Property pr_SendSignalAction_MessageExp = createProperty("MessageExp", _MessageExp);
		protected final Property pr_SendSignalAction_signal = createProperty("signal", _Signal);
		protected final Property pr_Signal_MessageType = createProperty("MessageType", _MessageType);
		protected final Property pr_Signal_SendSignalAction = createProperty("SendSignalAction", _SendSignalAction);
		protected final Property pr_State_StateExp = createProperty("StateExp", _StateExp);
		protected final Property pr_StateExp_referredState = createProperty("referredState", _State);
		protected final Property pr_StereotypedProperty_AppliedStereotype = createProperty("AppliedStereotype", _AppliedStereotype);
		protected final Property pr_StereotypedProperty_default = createProperty("default", _String);
		protected final Property pr_StereotypedProperty_referredProperty = createProperty("referredProperty", _Property);
		protected final Property pr_StringLiteralExp_stringSymbol = createProperty("stringSymbol", _String);
		protected final Property pr_TemplateBinding_boundElement = createProperty("boundElement", _TemplateableElement);
		protected final Property pr_TemplateBinding_parameterSubstitution = createProperty("parameterSubstitution", _TemplateParameterSubstitution);
		protected final Property pr_TemplateBinding_signature = createProperty("signature", _TemplateSignature);
		protected final Property pr_TemplateParameter_TemplateParameterSubstitution = createProperty("TemplateParameterSubstitution", _TemplateParameterSubstitution);
		protected final Property pr_TemplateParameter_default = createProperty("default", _ParameterableElement);
		protected final Property pr_TemplateParameter_ownedDefault = createProperty("ownedDefault", _ParameterableElement);
		protected final Property pr_TemplateParameter_ownedParameteredElement = createProperty("ownedParameteredElement", _ParameterableElement);
		protected final Property pr_TemplateParameter_parameteredElement = createProperty("parameteredElement", _ParameterableElement);
		protected final Property pr_TemplateParameter_signature = createProperty("signature", _TemplateSignature);
		protected final Property pr_TemplateParameterSubstitution_actual = createProperty("actual", _ParameterableElement);
		protected final Property pr_TemplateParameterSubstitution_formal = createProperty("formal", _TemplateParameter);
		protected final Property pr_TemplateParameterSubstitution_ownedActual = createProperty("ownedActual", _ParameterableElement);
		protected final Property pr_TemplateParameterSubstitution_templateBinding = createProperty("templateBinding", _TemplateBinding);
		protected final Property pr_TemplateParameterType_specification = createProperty("specification", _String);
		protected final Property pr_TemplateSignature_TemplateBinding = createProperty("TemplateBinding", _TemplateBinding);
		protected final Property pr_TemplateSignature_ownedParameter = createProperty("ownedParameter", _TemplateParameter);
		protected final Property pr_TemplateSignature_parameter = createProperty("parameter", _TemplateParameter);
		protected final Property pr_TemplateSignature_template = createProperty("template", _TemplateableElement);
		protected final Property pr_TemplateableElement_ownedTemplateSignature = createProperty("ownedTemplateSignature", _TemplateSignature);
		protected final Property pr_TemplateableElement_templateBinding = createProperty("templateBinding", _TemplateBinding);
		protected final Property pr_TemplateableElement_unspecializedElement = createProperty("unspecializedElement", _TemplateableElement);
		protected final Property pr_TupleLiteralExp_part = createProperty("part", _TupleLiteralPart);
		protected final Property pr_TupleLiteralPart_TupleLiteralExp = createProperty("TupleLiteralExp", _TupleLiteralExp);
		protected final Property pr_TupleLiteralPart_initExpression = createProperty("initExpression", _OCLExpression);
		protected final Property pr_null_templateParameter_1 = createProperty("templateParameter", _TemplateParameter);
		protected final Property pr_Type_AppliedStereotype = createProperty("AppliedStereotype", _AppliedStereotype);
		protected final Property pr_Type_ClassifierType = createProperty("ClassifierType", _ClassifierType);
		protected final Property pr_Type_CollectionType = createProperty("CollectionType", _CollectionType);
		protected final Property pr_Type_DataType = createProperty("DataType", _DataType);
		protected final Property pr_Type_DynamicElement = createProperty("DynamicElement", _DynamicElement);
		protected final Property pr_Type_Type = createProperty("Type", _Type);
		protected final Property pr_Type_TypeExp = createProperty("TypeExp", _TypeExp);
		protected final Property pr_Type_TypeTemplateParameter = createProperty("TypeTemplateParameter", _TypeTemplateParameter);
		protected final Property pr_Type_TypedElement = createProperty("TypedElement", _TypedElement);
		protected final Property pr_Type_instanceClassName = createProperty("instanceClassName", _String);
		protected final Property pr_Type_ownedAttribute = createProperty("ownedAttribute", _Property);
		protected final Property pr_Type_ownedOperation = createProperty("ownedOperation", _Operation);
		protected final Property pr_Type_package = createProperty("package", _Package);
		protected final Property pr_Type_superClass = createProperty("superClass", _Type);
		protected final Property pr_TypeExp_referredType = createProperty("referredType", _Type);
		protected final Property pr_null_parameteredElement_1 = createProperty("parameteredElement", _ParameterableElement);
		protected final Property pr_TypeTemplateParameter_allowSubstitutable = createProperty("allowSubstitutable", _Boolean);
		protected final Property pr_TypeTemplateParameter_constrainingType = createProperty("constrainingType", _Type);
		protected final Property pr_TypedElement_type = createProperty("type", _Type);
		protected final Property pr_UnlimitedNaturalLiteralExp_unlimitedNaturalSymbol = createProperty("unlimitedNaturalSymbol", _UnlimitedNatural);
		protected final Property pr_UnspecifiedType_lowerBound = createProperty("lowerBound", _Type);
		protected final Property pr_UnspecifiedType_upperBound = createProperty("upperBound", _Type);
		protected final Property pr_ValueSpecification_Constraint = createProperty("Constraint", _Constraint);
		protected final Property pr_Variable_IterateExp = createProperty("IterateExp", _IterateExp);
		protected final Property pr_Variable_LetExp = createProperty("LetExp", _LetExp);
		protected final Property pr_Variable_LoopExp = createProperty("LoopExp", _LoopExp);
		protected final Property pr_Variable_implicit = createProperty("implicit", _Boolean);
		protected final Property pr_Variable_initExpression = createProperty("initExpression", _OCLExpression);
		protected final Property pr_Variable_representedParameter = createProperty("representedParameter", _Parameter);
		protected final Property pr_VariableDeclaration_VariableExp = createProperty("VariableExp", _VariableExp);
		protected final Property pr_VariableExp_implicit = createProperty("implicit", _Boolean);
		protected final Property pr_VariableExp_referredVariable = createProperty("referredVariable", _VariableDeclaration);
		
		protected void installProperties() {
			List<Property> ownedProperties;
			Property property;
			ownedProperties = _Annotation.getOwnedAttribute();
			ownedProperties.add(property = pr_Annotation_NamedElement);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_NamedElement_ownedAnnotation);
			ownedProperties.add(property = pr_Annotation_ownedContent);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Annotation_ownedDetail);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Detail_Annotation);
			ownedProperties.add(property = pr_Annotation_reference);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsResolveProxies(true);
			ownedProperties = _AppliedStereotype.getOwnedAttribute();
			ownedProperties.add(property = pr_AppliedStereotype_Element);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Element_appliedStereotype);
			ownedProperties.add(property = pr_AppliedStereotype_referredType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_AppliedStereotype);
			ownedProperties.add(property = pr_AppliedStereotype_stereotypedProperty);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StereotypedProperty_AppliedStereotype);
			ownedProperties = _AssociationClass.getOwnedAttribute();
			ownedProperties.add(property = pr_AssociationClass_AssociationClassCallExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AssociationClassCallExp_referredAssociationClass);
			ownedProperties.add(property = pr_AssociationClass_unownedAttribute);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_association);
			ownedProperties = _AssociationClassCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_AssociationClassCallExp_referredAssociationClass);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AssociationClass_AssociationClassCallExp);
			ownedProperties = _BooleanLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_BooleanLiteralExp_booleanSymbol);
			property.setIsResolveProxies(true);
			property.setIsUnsettable(true);
			ownedProperties = _CallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_CallExp_implicit);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CallExp_source);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_CallExp);
			ownedProperties = _CallOperationAction.getOwnedAttribute();
			ownedProperties.add(property = pr_CallOperationAction_MessageExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageExp_calledOperation);
			ownedProperties.add(property = pr_CallOperationAction_operation);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_CallOperationAction);
			ownedProperties = _Class.getOwnedAttribute();
			ownedProperties.add(property = pr_Class_isAbstract);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_isInterface);
			property.setIsResolveProxies(true);
			ownedProperties = _ClassifierType.getOwnedAttribute();
			ownedProperties.add(property = pr_ClassifierType_instanceType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_ClassifierType);
			ownedProperties = _CollectionItem.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionItem_item);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_CollectionItem);
			ownedProperties = _CollectionLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionLiteralExp_kind);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CollectionLiteralExp_part);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionLiteralPart_CollectionLiteralExp);
			ownedProperties = _CollectionLiteralPart.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionLiteralPart_CollectionLiteralExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionLiteralExp_part);
			ownedProperties = _CollectionRange.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionRange_first);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CollectionRange_last);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _CollectionType.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionType_elementType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_CollectionType);
			ownedProperties = _Comment.getOwnedAttribute();
			ownedProperties.add(property = pr_Comment_Element);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Element_ownedComment);
			ownedProperties.add(property = pr_Comment_annotatedElement);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Comment_body);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties = _Constraint.getOwnedAttribute();
			ownedProperties.add(property = pr_Constraint_constrainedElement);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Element_Constraint);
			ownedProperties.add(property = pr_Constraint_context);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_NamedElement_ownedRule);
			ownedProperties.add(property = pr_Constraint_isCallable);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_specification);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ValueSpecification_Constraint);
			ownedProperties.add(property = pr_Constraint_stereotype);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties = _ConstructorExp.getOwnedAttribute();
			ownedProperties.add(property = pr_ConstructorExp_part);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorPart_ConstructorExp);
			ownedProperties.add(property = pr_ConstructorExp_value);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties = _ConstructorPart.getOwnedAttribute();
			ownedProperties.add(property = pr_ConstructorPart_ConstructorExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorExp_part);
			ownedProperties.add(property = pr_ConstructorPart_initExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_ConstructorPart);
			ownedProperties.add(property = pr_ConstructorPart_referredProperty);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_ConstructorPart);
			ownedProperties = _DataType.getOwnedAttribute();
			ownedProperties.add(property = pr_DataType_behavioralType);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_DataType);
			ownedProperties.add(property = pr_DataType_isSerializable);
			property.setIsResolveProxies(true);
			ownedProperties = _Detail.getOwnedAttribute();
			ownedProperties.add(property = pr_Detail_Annotation);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Annotation_ownedDetail);
			ownedProperties.add(property = pr_Detail_value);
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties = _DynamicElement.getOwnedAttribute();
			ownedProperties.add(property = pr_DynamicElement_metaType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_DynamicElement);
			ownedProperties = _DynamicProperty.getOwnedAttribute();
			ownedProperties.add(property = pr_DynamicProperty_DynamicType);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicType_ownedProperty);
			ownedProperties.add(property = pr_DynamicProperty_default);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_DynamicProperty_referredProperty);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_DynamicProperty);
			ownedProperties = _DynamicType.getOwnedAttribute();
			ownedProperties.add(property = pr_DynamicType_ownedProperty);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicProperty_DynamicType);
			ownedProperties = _Element.getOwnedAttribute();
			ownedProperties.add(property = pr_Element_Constraint);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_constrainedElement);
			ownedProperties.add(property = pr_Element_appliedStereotype);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AppliedStereotype_Element);
			ownedProperties.add(property = pr_Element_ownedComment);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Comment_Element);
			ownedProperties = _EnumLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_EnumLiteralExp_referredEnumLiteral);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_EnumerationLiteral_EnumLiteralExp);
			ownedProperties = _Enumeration.getOwnedAttribute();
			ownedProperties.add(property = pr_Enumeration_ownedLiteral);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_EnumerationLiteral_enumeration);
			ownedProperties = _EnumerationLiteral.getOwnedAttribute();
			ownedProperties.add(property = pr_EnumerationLiteral_EnumLiteralExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_EnumLiteralExp_referredEnumLiteral);
			ownedProperties.add(property = pr_EnumerationLiteral_enumeration);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Enumeration_ownedLiteral);
			ownedProperties.add(property = pr_EnumerationLiteral_value);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties = _ExpressionInOCL.getOwnedAttribute();
			ownedProperties.add(property = pr_ExpressionInOCL_bodyExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_contextVariable);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_messageExpression);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_parameterVariable);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_resultVariable);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _Feature.getOwnedAttribute();
			ownedProperties.add(property = pr_Feature_implementation);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			ownedProperties.add(property = pr_Feature_implementationClass);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties = _FeatureCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_FeatureCallExp_isPre);
			property.setIsResolveProxies(true);
			ownedProperties = _IfExp.getOwnedAttribute();
			ownedProperties.add(property = pr_IfExp_condition);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_IfExp_elseExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_IfExp_thenExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _IntegerLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_IntegerLiteralExp_integerSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _IterateExp.getOwnedAttribute();
			ownedProperties.add(property = pr_IterateExp_result);
			property.setLower(BigInteger.valueOf(0));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_IterateExp);
			ownedProperties = _Iteration.getOwnedAttribute();
			ownedProperties.add(property = pr_Iteration_LoopExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LoopExp_referredIteration);
			ownedProperties.add(property = pr_Iteration_ownedAccumulator);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Iteration_ownedIterator);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _LambdaType.getOwnedAttribute();
			ownedProperties.add(property = pr_LambdaType_contextType);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LambdaType_parameterType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LambdaType_resultType);
			property.setIsResolveProxies(true);
			ownedProperties = _LetExp.getOwnedAttribute();
			ownedProperties.add(property = pr_LetExp_in);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_LetExp);
			ownedProperties.add(property = pr_LetExp_variable);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_LetExp);
			ownedProperties = _Library.getOwnedAttribute();
			ownedProperties.add(property = pr_Library_ownedPrecedence);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Precedence_Library);
			ownedProperties = _LoopExp.getOwnedAttribute();
			ownedProperties.add(property = pr_LoopExp_body);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_LoopExp);
			ownedProperties.add(property = pr_LoopExp_iterator);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_LoopExp);
			ownedProperties.add(property = pr_LoopExp_referredIteration);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Iteration_LoopExp);
			ownedProperties = _MessageExp.getOwnedAttribute();
			ownedProperties.add(property = pr_MessageExp_argument);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MessageExp_calledOperation);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CallOperationAction_MessageExp);
			ownedProperties.add(property = pr_MessageExp_sentSignal);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_SendSignalAction_MessageExp);
			ownedProperties.add(property = pr_MessageExp_target);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _MessageType.getOwnedAttribute();
			ownedProperties.add(property = pr_MessageType_referredOperation);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_MessageType);
			ownedProperties.add(property = pr_MessageType_referredSignal);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Signal_MessageType);
			ownedProperties = _MultiplicityElement.getOwnedAttribute();
			ownedProperties.add(property = pr_MultiplicityElement_isOrdered);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MultiplicityElement_isUnique);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MultiplicityElement_lower);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MultiplicityElement_upper);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties = _NamedElement.getOwnedAttribute();
			ownedProperties.add(property = pr_NamedElement_isStatic);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_NamedElement_name);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_NamedElement_ownedAnnotation);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Annotation_NamedElement);
			ownedProperties.add(property = pr_NamedElement_ownedRule);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_context);
			ownedProperties = _NavigationCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_NavigationCallExp_navigationSource);
			property.setLower(BigInteger.valueOf(0));
			property.setIsOrdered(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_NavigationCallExp);
			ownedProperties.add(property = pr_NavigationCallExp_qualifier);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_NavigationCallExp);
			ownedProperties = _OCLExpression.getOwnedAttribute();
			ownedProperties.add(property = pr_OCLExpression_CallExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CallExp_source);
			ownedProperties.add(property = pr_OCLExpression_CollectionItem);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionItem_item);
			ownedProperties.add(property = pr_OCLExpression_ConstructorPart);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorPart_initExpression);
			ownedProperties.add(property = pr_OCLExpression_LetExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LetExp_in);
			ownedProperties.add(property = pr_OCLExpression_LoopExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LoopExp_body);
			ownedProperties.add(property = pr_OCLExpression_NavigationCallExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_NavigationCallExp_qualifier);
			ownedProperties.add(property = pr_OCLExpression_OperationCallExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OperationCallExp_argument);
			ownedProperties.add(property = pr_OCLExpression_TupleLiteralPart);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TupleLiteralPart_initExpression);
			ownedProperties.add(property = pr_OCLExpression_Variable);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_initExpression);
			ownedProperties = _OpaqueExpression.getOwnedAttribute();
			ownedProperties.add(property = pr_OpaqueExpression_body);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsUnique(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OpaqueExpression_language);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OpaqueExpression_message);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsUnique(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OpaqueExpression_valueExpression);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			ownedProperties = _Operation.getOwnedAttribute();
			ownedProperties.add(property = pr_Operation_CallOperationAction);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CallOperationAction_operation);
			ownedProperties.add(property = pr_Operation_MessageType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageType_referredOperation);
			ownedProperties.add(property = pr_Operation_Operation);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_redefinedOperation);
			ownedProperties.add(property = pr_Operation_OperationCallExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OperationCallExp_referredOperation);
			ownedProperties.add(property = pr_Operation_class);
			property.setLower(BigInteger.valueOf(0));
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_Operation_ownedParameter);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Parameter_operation);
			ownedProperties.add(property = pr_Operation_owningType);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_ownedOperation);
			ownedProperties.add(property = pr_Operation_precedence);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Precedence_Operation);
			ownedProperties.add(property = pr_Operation_raisedException);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_redefinedOperation);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_Operation);
			ownedProperties = _OperationCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_OperationCallExp_argument);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_OperationCallExp);
			ownedProperties.add(property = pr_OperationCallExp_referredOperation);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_OperationCallExp);
			ownedProperties = _Package.getOwnedAttribute();
			ownedProperties.add(property = pr_Package_Root);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Root_nestedPackage);
			ownedProperties.add(property = pr_Package_importedPackage);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_nestedPackage);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_nestingPackage);
			ownedProperties.add(property = pr_Package_nestingPackage);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_nestedPackage);
			ownedProperties.add(property = pr_Package_nsPrefix);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_nsURI);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_ownedType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_package);
			ownedProperties = _Parameter.getOwnedAttribute();
			ownedProperties.add(property = pr_Parameter_Variable);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_representedParameter);
			ownedProperties.add(property = pr_Parameter_operation);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_ownedParameter);
			ownedProperties = _ParameterableElement.getOwnedAttribute();
			ownedProperties.add(property = pr_ParameterableElement_owningTemplateParameter);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_ownedParameteredElement);
			ownedProperties.add(property = pr_ParameterableElement_templateParameter);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_parameteredElement);
			ownedProperties = _Precedence.getOwnedAttribute();
			ownedProperties.add(property = pr_Precedence_Library);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Library_ownedPrecedence);
			ownedProperties.add(property = pr_Precedence_Operation);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_precedence);
			ownedProperties.add(property = pr_Precedence_associativity);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Precedence_order);
			property.setIsDerived(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties = _Property.getOwnedAttribute();
			ownedProperties.add(property = pr_Property_ConstructorPart);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorPart_referredProperty);
			ownedProperties.add(property = pr_Property_DynamicProperty);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicProperty_referredProperty);
			ownedProperties.add(property = pr_Property_NavigationCallExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_NavigationCallExp_navigationSource);
			ownedProperties.add(property = pr_Property_PropertyCallExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_PropertyCallExp_referredProperty);
			ownedProperties.add(property = pr_Property_StereotypedProperty);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StereotypedProperty_referredProperty);
			ownedProperties.add(property = pr_Property_association);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AssociationClass_unownedAttribute);
			ownedProperties.add(property = pr_Property_class);
			property.setLower(BigInteger.valueOf(0));
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_Property_default);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_implicit);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isComposite);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isDerived);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isID);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isReadOnly);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isResolveProxies);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isTransient);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isUnsettable);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isVolatile);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_keys);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_opposite);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_owningType);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_ownedAttribute);
			ownedProperties.add(property = pr_Property_redefinedProperty);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_subsettedProperty);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			ownedProperties = _PropertyCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_PropertyCallExp_referredProperty);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_PropertyCallExp);
			ownedProperties = _RealLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_RealLiteralExp_realSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _Root.getOwnedAttribute();
			ownedProperties.add(property = pr_Root_externalURI);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Root_nestedPackage);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_Root);
			ownedProperties = _SendSignalAction.getOwnedAttribute();
			ownedProperties.add(property = pr_SendSignalAction_MessageExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageExp_sentSignal);
			ownedProperties.add(property = pr_SendSignalAction_signal);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Signal_SendSignalAction);
			ownedProperties = _Signal.getOwnedAttribute();
			ownedProperties.add(property = pr_Signal_MessageType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageType_referredSignal);
			ownedProperties.add(property = pr_Signal_SendSignalAction);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_SendSignalAction_signal);
			ownedProperties = _State.getOwnedAttribute();
			ownedProperties.add(property = pr_State_StateExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateExp_referredState);
			ownedProperties = _StateExp.getOwnedAttribute();
			ownedProperties.add(property = pr_StateExp_referredState);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_StateExp);
			ownedProperties = _StereotypedProperty.getOwnedAttribute();
			ownedProperties.add(property = pr_StereotypedProperty_AppliedStereotype);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AppliedStereotype_stereotypedProperty);
			ownedProperties.add(property = pr_StereotypedProperty_default);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_StereotypedProperty_referredProperty);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_StereotypedProperty);
			ownedProperties = _StringLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_StringLiteralExp_stringSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _TemplateBinding.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateBinding_boundElement);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateableElement_templateBinding);
			ownedProperties.add(property = pr_TemplateBinding_parameterSubstitution);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameterSubstitution_templateBinding);
			ownedProperties.add(property = pr_TemplateBinding_signature);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateSignature_TemplateBinding);
			ownedProperties = _TemplateParameter.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateParameter_TemplateParameterSubstitution);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameterSubstitution_formal);
			ownedProperties.add(property = pr_TemplateParameter_default);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameter_ownedDefault);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameter_ownedParameteredElement);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ParameterableElement_owningTemplateParameter);
			ownedProperties.add(property = pr_TemplateParameter_parameteredElement);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ParameterableElement_templateParameter);
			ownedProperties.add(property = pr_TemplateParameter_signature);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateSignature_ownedParameter);
			ownedProperties = _TemplateParameterSubstitution.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateParameterSubstitution_actual);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameterSubstitution_formal);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_TemplateParameterSubstitution);
			ownedProperties.add(property = pr_TemplateParameterSubstitution_ownedActual);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameterSubstitution_templateBinding);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateBinding_parameterSubstitution);
			ownedProperties = _TemplateParameterType.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateParameterType_specification);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties = _TemplateSignature.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateSignature_TemplateBinding);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateBinding_signature);
			ownedProperties.add(property = pr_TemplateSignature_ownedParameter);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_signature);
			ownedProperties.add(property = pr_TemplateSignature_parameter);
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateSignature_template);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateableElement_ownedTemplateSignature);
			ownedProperties = _TemplateableElement.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateableElement_ownedTemplateSignature);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateSignature_template);
			ownedProperties.add(property = pr_TemplateableElement_templateBinding);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateBinding_boundElement);
			ownedProperties.add(property = pr_TemplateableElement_unspecializedElement);
			property.setLower(BigInteger.valueOf(0));
			property.setIsTransient(true);
			ownedProperties = _TupleLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_TupleLiteralExp_part);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TupleLiteralPart_TupleLiteralExp);
			ownedProperties = _TupleLiteralPart.getOwnedAttribute();
			ownedProperties.add(property = pr_TupleLiteralPart_TupleLiteralExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TupleLiteralExp_part);
			ownedProperties.add(property = pr_TupleLiteralPart_initExpression);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_TupleLiteralPart);
			ownedProperties = _Type.getOwnedAttribute();
			ownedProperties.add(property = pr_Type_AppliedStereotype);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AppliedStereotype_referredType);
			ownedProperties.add(property = pr_Type_ClassifierType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ClassifierType_instanceType);
			ownedProperties.add(property = pr_Type_CollectionType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionType_elementType);
			ownedProperties.add(property = pr_Type_DataType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DataType_behavioralType);
			ownedProperties.add(property = pr_Type_DynamicElement);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicElement_metaType);
			ownedProperties.add(property = pr_Type_Type);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_superClass);
			ownedProperties.add(property = pr_Type_TypeExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TypeExp_referredType);
			ownedProperties.add(property = pr_Type_TypeTemplateParameter);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TypeTemplateParameter_constrainingType);
			ownedProperties.add(property = pr_Type_TypedElement);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TypedElement_type);
			ownedProperties.add(property = pr_Type_instanceClassName);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_ownedAttribute);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_owningType);
			ownedProperties.add(property = pr_Type_ownedOperation);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_owningType);
			ownedProperties.add(property = pr_Type_package);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_ownedType);
			ownedProperties.add(property = pr_Type_superClass);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsOrdered(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_Type);
			ownedProperties = _TypeExp.getOwnedAttribute();
			ownedProperties.add(property = pr_TypeExp_referredType);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_TypeExp);
			ownedProperties = _TypeTemplateParameter.getOwnedAttribute();
			ownedProperties.add(property = pr_TypeTemplateParameter_allowSubstitutable);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TypeTemplateParameter_constrainingType);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_TypeTemplateParameter);
			ownedProperties = _TypedElement.getOwnedAttribute();
			ownedProperties.add(property = pr_TypedElement_type);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_TypedElement);
			ownedProperties = _UnlimitedNaturalLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_UnlimitedNaturalLiteralExp_unlimitedNaturalSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _UnspecifiedType.getOwnedAttribute();
			ownedProperties.add(property = pr_UnspecifiedType_lowerBound);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_UnspecifiedType_upperBound);
			property.setIsResolveProxies(true);
			ownedProperties = _ValueSpecification.getOwnedAttribute();
			ownedProperties.add(property = pr_ValueSpecification_Constraint);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_specification);
			ownedProperties = _Variable.getOwnedAttribute();
			ownedProperties.add(property = pr_Variable_IterateExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_IterateExp_result);
			ownedProperties.add(property = pr_Variable_LetExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LetExp_variable);
			ownedProperties.add(property = pr_Variable_LoopExp);
			property.setLower(BigInteger.valueOf(0));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LoopExp_iterator);
			ownedProperties.add(property = pr_Variable_implicit);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_initExpression);
			property.setLower(BigInteger.valueOf(0));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_Variable);
			ownedProperties.add(property = pr_Variable_representedParameter);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Parameter_Variable);
			ownedProperties = _VariableDeclaration.getOwnedAttribute();
			ownedProperties.add(property = pr_VariableDeclaration_VariableExp);
			property.setLower(BigInteger.valueOf(0));
			property.setUpper(BigInteger.valueOf(-1));
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_VariableExp_referredVariable);
			ownedProperties = _VariableExp.getOwnedAttribute();
			ownedProperties.add(property = pr_VariableExp_implicit);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_VariableExp_referredVariable);
			property.setLower(BigInteger.valueOf(0));
			property.setIsResolveProxies(true);
			property.setOpposite(pr_VariableDeclaration_VariableExp);
		}
		protected final TypeTemplateParameter tp_Visitor = createTypeTemplateParameter(_Visitor_R);
		
		protected final TemplateSignature ts_Visitor = createTemplateSignature(_Visitor, tp_Visitor);
		
		protected void installTemplateSignatures() {
		}
		
		protected void installComments() {
			installComment(_Boolean, "A Boolean type is used for logical expression, consisting of the predefined values true and false.");
			installComment(_Class, "A class is a type that has objects as its instances.");
			installComment(pr_null_ownedAttribute, "The attributes owned by a class. These do not include the inherited attributes. Attributes are represented by instances of Property.");
			installComment(pr_null_ownedOperation, "The operations owned by a class. These do not include the inherited operations.");
			installComment(pr_null_superClass, "The immediate superclasses of a class, from which the class inherits.");
			installComment(pr_Class_isAbstract, "True when a class is abstract.");
			installComment(_Comment, "A comment is a textual annotation that can be attached to a set of elements.");
			installComment(pr_Comment_annotatedElement, "References the Element(s) being commented.");
			installComment(pr_Comment_body, "Specifies a string that is the comment.");
			installComment(_Constraint, "A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.");
			installComment(pr_Constraint_constrainedElement, "The ordered set of Elements referenced by this Constraint.");
			installComment(pr_Constraint_specification, "A condition that must be true when evaluated in order for the constraint to be satisfied.");
			installComment(_DataType, "DataType is an abstract class that acts as a common superclass for different kinds of data types.");
			installComment(_Element, "An element is a constituent of a model.");
			installComment(pr_Element_ownedComment, "The Comments owned by this element.");
			installComment(_Enumeration, "An enumeration defines a set of literals that can be used as its values.");
			installComment(pr_Enumeration_ownedLiteral, "The ordered set of literals for this Enumeration.");
			installComment(_EnumerationLiteral, "An enumeration literal is a value of an enumeration.");
			installComment(pr_EnumerationLiteral_enumeration, "The Enumeration that this EnumerationLiteral is a member of.");
			installComment(_Integer, "An integer is a primitive type representing integer values.");
			installComment(_MultiplicityElement, "A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.");
			installComment(op_MultiplicityElement_includesCardinality, "The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.");
			installComment(op_MultiplicityElement_includesMultiplicity, "The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.");
			installComment(op_MultiplicityElement_isMultivalued, "The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.");
			installComment(pr_MultiplicityElement_isOrdered, "For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.");
			installComment(pr_MultiplicityElement_isUnique, "For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.");
			installComment(pr_MultiplicityElement_lower, "Specifies the lower bound of the multiplicity interval.");
			installComment(op_MultiplicityElement_lowerBound, "The query lowerBound() returns the lower bound of the multiplicity as an integer.");
			installComment(pr_MultiplicityElement_upper, "Specifies the upper bound of the multiplicity interval.");
			installComment(op_MultiplicityElement_upperBound, "The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.");
			installComment(_NamedElement, "A named element represents an element with a name.");
			installComment(pr_NamedElement_name, "The name of the NamedElement.");
			installComment(_OpaqueExpression, "An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.");
			installComment(pr_OpaqueExpression_body, "The text of the expression, possibly in multiple languages.");
			installComment(pr_OpaqueExpression_language, "Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.");
			installComment(_Operation, "An operation is owned by a class and may be invoked in the context of objects that are instances of that class. It is a typed element and a multiplicity element.\r\nOperation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			installComment(pr_null_templateParameter, "The template parameter that exposes this element as a formal parameter.");
			installComment(pr_Operation_class, "The class that owns the operation.");
			installComment(pr_Operation_ownedParameter, "The parameters to the operation.");
			installComment(pr_Operation_raisedException, "The exceptions that are declared as possible during an invocation of the operation.");
			installComment(_OperationTemplateParameter, "An operation template parameter exposes an operation as a formal parameter for a template.");
			installComment(pr_null_parameteredElement, "The operation for this template parameter.");
			installComment(_Package, "A package is a container for types and other packages.\r\nPackage specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.");
			installComment(pr_Package_nestedPackage, "The set of contained packages.");
			installComment(pr_Package_nestingPackage, "The containing package.");
			installComment(pr_Package_ownedType, "The set of contained types.");
			installComment(_PackageableElement, "Packageable elements are able to serve as a template parameter.");
			installComment(_Parameter, "A parameter is a typed element that represents a parameter of an operation.");
			installComment(pr_Parameter_operation, "The operation that owns the parameter.");
			installComment(_ParameterableElement, "A parameterable element is an element that can be exposed as a formal template parameter for a template, or specified as an actual parameter in a binding of a template.");
			installComment(op_ParameterableElement_isTemplateParameter, "The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.");
			installComment(pr_ParameterableElement_owningTemplateParameter, "The formal template parameter that owns this element.");
			installComment(pr_ParameterableElement_templateParameter, "The template parameter that exposes this element as a formal parameter.");
			installComment(_PrimitiveType, "A primitive type is a data type implemented by the underlying infrastructure and made available for modeling.");
			installComment(_Property, "A property is a typed element that represents an attribute of a class.\r\nProperty specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			installComment(pr_Property_class, "The class that owns the property, and of which the property is an attribute.");
			installComment(pr_Property_default, "A string that is evaluated to give a default value for the attribute when an object of the owning class is instantiated.");
			installComment(pr_Property_isComposite, "If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.");
			installComment(pr_Property_isDerived, "If isDerived is true, the value of the attribute is derived from information elsewhere.");
			installComment(pr_Property_isReadOnly, "If isReadOnly is true, the attribute may not be written to after initialization.");
			installComment(pr_Property_opposite, "Two attributes attr1 and attr2 of two objects o1 and o2 (which may be the same object) may be paired with each other so that o1.attr1 refers to o2 if and only if o2.attr2 refers to o1. In such a case attr1 is the opposite of attr2 and attr2 is the opposite of attr1.");
			installComment(_String, "A string is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters.");
			installComment(_TemplateBinding, "A template binding represents a relationship between a templateable element and a template. A template binding specifies the substitutions of actual parameters for the formal parameters of the template.");
			installComment(pr_TemplateBinding_boundElement, "The element that is bound by this binding.");
			installComment(pr_TemplateBinding_parameterSubstitution, "The parameter substitutions owned by this template binding.");
			installComment(pr_TemplateBinding_signature, "The template signature for the template that is the target of the binding.");
			installComment(_TemplateParameter, "A template parameter exposes a parameterable element as a formal template parameter of a template.");
			installComment(pr_TemplateParameter_default, "The element that is the default for this formal template parameter.");
			installComment(pr_TemplateParameter_ownedDefault, "The element that is owned by this template parameter for the purpose of providing a default.");
			installComment(pr_TemplateParameter_ownedParameteredElement, "The element that is owned by this template parameter.");
			installComment(pr_TemplateParameter_parameteredElement, "The element exposed by this template parameter.");
			installComment(pr_TemplateParameter_signature, "The template signature that owns this template parameter.");
			installComment(_TemplateParameterSubstitution, "A template parameter substitution relates the actual parameter to a formal template parameter as part of a template binding.");
			installComment(pr_TemplateParameterSubstitution_actual, "The element that is the actual parameter for this substitution.");
			installComment(pr_TemplateParameterSubstitution_formal, "The formal template parameter that is associated with this substitution.");
			installComment(pr_TemplateParameterSubstitution_ownedActual, "The actual parameter that is owned by this substitution.");
			installComment(pr_TemplateParameterSubstitution_templateBinding, "The optional bindings from this element to templates.");
			installComment(_TemplateSignature, "A template signature bundles the set of formal template parameters for a templated element.");
			installComment(pr_TemplateSignature_ownedParameter, "The formal template parameters that are owned by this template signature.");
			installComment(pr_TemplateSignature_parameter, "The ordered set of all formal template parameters for this template signature.");
			installComment(pr_TemplateSignature_template, "The element that owns this template signature.");
			installComment(_TemplateableElement, "A templateable element is an element that can optionally be defined as a template and bound to other templates.");
			installComment(op_TemplateableElement_isTemplate, "The query isTemplate() returns whether this templateable element is actually a template.");
			installComment(pr_TemplateableElement_ownedTemplateSignature, "The optional template signature specifying the formal template parameters.");
			installComment(op_TemplateableElement_parameterableElements, "The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.");
			installComment(pr_TemplateableElement_templateBinding, "The optional bindings from this element to templates.");
			installComment(_Type, "A type is a named element that is used as the type for a typed element. A type can be contained in a package.\r\nType is defined to be a kind of templateable element so that a type can be parameterized. It is also defined to be a kind of parameterable element so that a type can be a formal template parameter.");
			installComment(op_null_isTemplate, "The query isTemplate() returns whether this templateable element is actually a template.");
			installComment(pr_null_templateParameter_1, "The template parameter that exposes this element as a formal parameter.");
			installComment(pr_Type_package, "Specifies the owning package of this classifier, if any.");
			installComment(_TypeTemplateParameter, "A type template parameter exposes a type as a formal template parameter.");
			installComment(pr_null_parameteredElement_1, "The parameterable classifier for this template parameter.");
			installComment(pr_TypeTemplateParameter_allowSubstitutable, "Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.");
			installComment(pr_TypeTemplateParameter_constrainingType, "The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted; otherwise, it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.");
			installComment(_TypedElement, "A typed element is a kind of named element that represents an element with a type.");
			installComment(pr_TypedElement_type, "The type of the TypedElement.");
			installComment(_UnlimitedNatural, "An unlimited natural is a primitive type representing unlimited natural values.");
			installComment(_ValueSpecification, "A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.\r\nValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			installComment(op_ValueSpecification_booleanValue, "The query booleanValue() gives a single Boolean value when one can be computed.");
			installComment(op_ValueSpecification_integerValue, "The query integerValue() gives a single Integer value when one can be computed.");
			installComment(op_ValueSpecification_isComputable, "The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.");
			installComment(op_ValueSpecification_isNull, "The query isNull() returns true when it can be computed that the value is null.");
			installComment(op_ValueSpecification_stringValue, "The query stringValue() gives a single String value when one can be computed.");
			installComment(op_ValueSpecification_unlimitedValue, "The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.");
		}
	}
}
