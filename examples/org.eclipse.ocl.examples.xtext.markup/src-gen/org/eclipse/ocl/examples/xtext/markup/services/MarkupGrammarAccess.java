/*
* generated by Xtext
*/

package org.eclipse.ocl.examples.xtext.markup.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MarkupGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MarkupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Markup");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsMarkupElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Markup:
		//	elements+=MarkupElement*;
		public ParserRule getRule() { return rule; }

		//elements+=MarkupElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//MarkupElement
		public RuleCall getElementsMarkupElementParserRuleCall_0() { return cElementsMarkupElementParserRuleCall_0; }
	}

	public class MarkupElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MarkupElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFontElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewLineElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFigElementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFigRefElementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullElementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOclCodeElementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOclEvalElementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOclTextElementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//MarkupElement:
		//	FontElement | NewLineElement | TextElement | FigElement | FigRefElement | NullElement | OclCodeElement |
		//	OclEvalElement | OclTextElement;
		public ParserRule getRule() { return rule; }

		//FontElement | NewLineElement | TextElement | FigElement | FigRefElement | NullElement | OclCodeElement | OclEvalElement
		//| OclTextElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//FontElement
		public RuleCall getFontElementParserRuleCall_0() { return cFontElementParserRuleCall_0; }

		//NewLineElement
		public RuleCall getNewLineElementParserRuleCall_1() { return cNewLineElementParserRuleCall_1; }

		//TextElement
		public RuleCall getTextElementParserRuleCall_2() { return cTextElementParserRuleCall_2; }

		//FigElement
		public RuleCall getFigElementParserRuleCall_3() { return cFigElementParserRuleCall_3; }

		//FigRefElement
		public RuleCall getFigRefElementParserRuleCall_4() { return cFigRefElementParserRuleCall_4; }

		//NullElement
		public RuleCall getNullElementParserRuleCall_5() { return cNullElementParserRuleCall_5; }

		//OclCodeElement
		public RuleCall getOclCodeElementParserRuleCall_6() { return cOclCodeElementParserRuleCall_6; }

		//OclEvalElement
		public RuleCall getOclEvalElementParserRuleCall_7() { return cOclEvalElementParserRuleCall_7; }

		//OclTextElement
		public RuleCall getOclTextElementParserRuleCall_8() { return cOclTextElementParserRuleCall_8; }
	}

	public class TextElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextElement");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTextAlternatives_0 = (Alternatives)cTextAssignment.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_0_0 = (RuleCall)cTextAlternatives_0.eContents().get(0);
		private final RuleCall cTextWORDTerminalRuleCall_0_1 = (RuleCall)cTextAlternatives_0.eContents().get(1);
		private final RuleCall cTextWSTerminalRuleCall_0_2 = (RuleCall)cTextAlternatives_0.eContents().get(2);
		
		//TextElement:
		//	text+=(ID | WORD | WS)+;
		public ParserRule getRule() { return rule; }

		//text+=(ID | WORD | WS)+
		public Assignment getTextAssignment() { return cTextAssignment; }

		//ID | WORD | WS
		public Alternatives getTextAlternatives_0() { return cTextAlternatives_0; }

		//ID
		public RuleCall getTextIDTerminalRuleCall_0_0() { return cTextIDTerminalRuleCall_0_0; }

		//WORD
		public RuleCall getTextWORDTerminalRuleCall_0_1() { return cTextWORDTerminalRuleCall_0_1; }

		//WS
		public RuleCall getTextWSTerminalRuleCall_0_2() { return cTextWSTerminalRuleCall_0_2; }
	}

	public class NewLineElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewLineElement");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextNLTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//NewLineElement:
		//	text=NL;
		public ParserRule getRule() { return rule; }

		//text=NL
		public Assignment getTextAssignment() { return cTextAssignment; }

		//NL
		public RuleCall getTextNLTerminalRuleCall_0() { return cTextNLTerminalRuleCall_0; }
	}

	public class FontElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFontAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cFontAlternatives_0_0 = (Alternatives)cFontAssignment_0.eContents().get(0);
		private final Keyword cFontBKeyword_0_0_0 = (Keyword)cFontAlternatives_0_0.eContents().get(0);
		private final Keyword cFontEKeyword_0_0_1 = (Keyword)cFontAlternatives_0_0.eContents().get(1);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsMarkupElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FontElement:
		//	font=("b[" | "e[") elements+=MarkupElement* "]";
		public ParserRule getRule() { return rule; }

		//font=("b[" | "e[") elements+=MarkupElement* "]"
		public Group getGroup() { return cGroup; }

		//font=("b[" | "e[")
		public Assignment getFontAssignment_0() { return cFontAssignment_0; }

		//"b[" | "e["
		public Alternatives getFontAlternatives_0_0() { return cFontAlternatives_0_0; }

		//"b["
		public Keyword getFontBKeyword_0_0_0() { return cFontBKeyword_0_0_0; }

		//"e["
		public Keyword getFontEKeyword_0_0_1() { return cFontEKeyword_0_0_1; }

		//elements+=MarkupElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//MarkupElement
		public RuleCall getElementsMarkupElementParserRuleCall_1_0() { return cElementsMarkupElementParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class FigElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FigElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFigKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cFigKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cIdAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0_1_1_0 = (RuleCall)cIdAssignment_0_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cSrcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSrcSTRINGTerminalRuleCall_1_0 = (RuleCall)cSrcAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FigElement:
		//	("fig[" | "fig:" id=ID "[") src=STRING "]";
		public ParserRule getRule() { return rule; }

		//("fig[" | "fig:" id=ID "[") src=STRING "]"
		public Group getGroup() { return cGroup; }

		//"fig[" | "fig:" id=ID "["
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"fig["
		public Keyword getFigKeyword_0_0() { return cFigKeyword_0_0; }

		//"fig:" id=ID "["
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"fig:"
		public Keyword getFigKeyword_0_1_0() { return cFigKeyword_0_1_0; }

		//id=ID
		public Assignment getIdAssignment_0_1_1() { return cIdAssignment_0_1_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_1_1_0() { return cIdIDTerminalRuleCall_0_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_2() { return cLeftSquareBracketKeyword_0_1_2; }

		//src=STRING
		public Assignment getSrcAssignment_1() { return cSrcAssignment_1; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_1_0() { return cSrcSTRINGTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class FigRefElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FigRefElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefFigElementCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefFigElementIDTerminalRuleCall_1_0_1 = (RuleCall)cRefFigElementCrossReference_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FigRefElement:
		//	"fig-[" ref=[FigElement] "]";
		public ParserRule getRule() { return rule; }

		//"fig-[" ref=[FigElement] "]"
		public Group getGroup() { return cGroup; }

		//"fig-["
		public Keyword getFigKeyword_0() { return cFigKeyword_0; }

		//ref=[FigElement]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[FigElement]
		public CrossReference getRefFigElementCrossReference_1_0() { return cRefFigElementCrossReference_1_0; }

		//ID
		public RuleCall getRefFigElementIDTerminalRuleCall_1_0_1() { return cRefFigElementIDTerminalRuleCall_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class NullElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsMarkupElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NullElement:
		//	{NullElement} "[" elements+=MarkupElement* "]";
		public ParserRule getRule() { return rule; }

		//{NullElement} "[" elements+=MarkupElement* "]"
		public Group getGroup() { return cGroup; }

		//{NullElement}
		public Action getNullElementAction_0() { return cNullElementAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//elements+=MarkupElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//MarkupElement
		public RuleCall getElementsMarkupElementParserRuleCall_2_0() { return cElementsMarkupElementParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class OclCodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclCodeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclCodeElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsMarkupElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OclCodeElement:
		//	{OclCodeElement} "oclCode[" elements+=MarkupElement* "]";
		public ParserRule getRule() { return rule; }

		//{OclCodeElement} "oclCode[" elements+=MarkupElement* "]"
		public Group getGroup() { return cGroup; }

		//{OclCodeElement}
		public Action getOclCodeElementAction_0() { return cOclCodeElementAction_0; }

		//"oclCode["
		public Keyword getOclCodeKeyword_1() { return cOclCodeKeyword_1; }

		//elements+=MarkupElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//MarkupElement
		public RuleCall getElementsMarkupElementParserRuleCall_2_0() { return cElementsMarkupElementParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class OclEvalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclEvalElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclEvalElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclEvalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsMarkupElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OclEvalElement:
		//	{OclEvalElement} "oclEval[" elements+=MarkupElement* "]";
		public ParserRule getRule() { return rule; }

		//{OclEvalElement} "oclEval[" elements+=MarkupElement* "]"
		public Group getGroup() { return cGroup; }

		//{OclEvalElement}
		public Action getOclEvalElementAction_0() { return cOclEvalElementAction_0; }

		//"oclEval["
		public Keyword getOclEvalKeyword_1() { return cOclEvalKeyword_1; }

		//elements+=MarkupElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//MarkupElement
		public RuleCall getElementsMarkupElementParserRuleCall_2_0() { return cElementsMarkupElementParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class OclTextElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclTextElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclTextElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsMarkupElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OclTextElement:
		//	{OclTextElement} "oclText[" elements+=MarkupElement* "]";
		public ParserRule getRule() { return rule; }

		//{OclTextElement} "oclText[" elements+=MarkupElement* "]"
		public Group getGroup() { return cGroup; }

		//{OclTextElement}
		public Action getOclTextElementAction_0() { return cOclTextElementAction_0; }

		//"oclText["
		public Keyword getOclTextKeyword_1() { return cOclTextKeyword_1; }

		//elements+=MarkupElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//MarkupElement
		public RuleCall getElementsMarkupElementParserRuleCall_2_0() { return cElementsMarkupElementParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MarkupKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MarkupKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFigKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFigKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFigKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOclCodeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOclEvalKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOclTextKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//MarkupKeyword:
		//	"b[" | "e[" | "fig[" | "fig:" | "fig-[" | "oclCode[" | "oclEval[" | "oclText[" | "]";
		public ParserRule getRule() { return rule; }

		//"b[" | "e[" | "fig[" | "fig:" | "fig-[" | "oclCode[" | "oclEval[" | "oclText[" | "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"b["
		public Keyword getBKeyword_0() { return cBKeyword_0; }

		//"e["
		public Keyword getEKeyword_1() { return cEKeyword_1; }

		//"fig["
		public Keyword getFigKeyword_2() { return cFigKeyword_2; }

		//"fig:"
		public Keyword getFigKeyword_3() { return cFigKeyword_3; }

		//"fig-["
		public Keyword getFigKeyword_4() { return cFigKeyword_4; }

		//"oclCode["
		public Keyword getOclCodeKeyword_5() { return cOclCodeKeyword_5; }

		//"oclEval["
		public Keyword getOclEvalKeyword_6() { return cOclEvalKeyword_6; }

		//"oclText["
		public Keyword getOclTextKeyword_7() { return cOclTextKeyword_7; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	
	
	private MarkupElements pMarkup;
	private MarkupElementElements pMarkupElement;
	private TextElementElements pTextElement;
	private NewLineElementElements pNewLineElement;
	private FontElementElements pFontElement;
	private FigElementElements pFigElement;
	private FigRefElementElements pFigRefElement;
	private NullElementElements pNullElement;
	private OclCodeElementElements pOclCodeElement;
	private OclEvalElementElements pOclEvalElement;
	private OclTextElementElements pOclTextElement;
	private MarkupKeywordElements pMarkupKeyword;
	private TerminalRule tID;
	private TerminalRule tWORD;
	private TerminalRule tSTRING;
	private TerminalRule tTEXT;
	private TerminalRule tNL;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public MarkupGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Markup:
	//	elements+=MarkupElement*;
	public MarkupElements getMarkupAccess() {
		return (pMarkup != null) ? pMarkup : (pMarkup = new MarkupElements());
	}
	
	public ParserRule getMarkupRule() {
		return getMarkupAccess().getRule();
	}

	//MarkupElement:
	//	FontElement | NewLineElement | TextElement | FigElement | FigRefElement | NullElement | OclCodeElement |
	//	OclEvalElement | OclTextElement;
	public MarkupElementElements getMarkupElementAccess() {
		return (pMarkupElement != null) ? pMarkupElement : (pMarkupElement = new MarkupElementElements());
	}
	
	public ParserRule getMarkupElementRule() {
		return getMarkupElementAccess().getRule();
	}

	//TextElement:
	//	text+=(ID | WORD | WS)+;
	public TextElementElements getTextElementAccess() {
		return (pTextElement != null) ? pTextElement : (pTextElement = new TextElementElements());
	}
	
	public ParserRule getTextElementRule() {
		return getTextElementAccess().getRule();
	}

	//NewLineElement:
	//	text=NL;
	public NewLineElementElements getNewLineElementAccess() {
		return (pNewLineElement != null) ? pNewLineElement : (pNewLineElement = new NewLineElementElements());
	}
	
	public ParserRule getNewLineElementRule() {
		return getNewLineElementAccess().getRule();
	}

	//FontElement:
	//	font=("b[" | "e[") elements+=MarkupElement* "]";
	public FontElementElements getFontElementAccess() {
		return (pFontElement != null) ? pFontElement : (pFontElement = new FontElementElements());
	}
	
	public ParserRule getFontElementRule() {
		return getFontElementAccess().getRule();
	}

	//FigElement:
	//	("fig[" | "fig:" id=ID "[") src=STRING "]";
	public FigElementElements getFigElementAccess() {
		return (pFigElement != null) ? pFigElement : (pFigElement = new FigElementElements());
	}
	
	public ParserRule getFigElementRule() {
		return getFigElementAccess().getRule();
	}

	//FigRefElement:
	//	"fig-[" ref=[FigElement] "]";
	public FigRefElementElements getFigRefElementAccess() {
		return (pFigRefElement != null) ? pFigRefElement : (pFigRefElement = new FigRefElementElements());
	}
	
	public ParserRule getFigRefElementRule() {
		return getFigRefElementAccess().getRule();
	}

	//NullElement:
	//	{NullElement} "[" elements+=MarkupElement* "]";
	public NullElementElements getNullElementAccess() {
		return (pNullElement != null) ? pNullElement : (pNullElement = new NullElementElements());
	}
	
	public ParserRule getNullElementRule() {
		return getNullElementAccess().getRule();
	}

	//OclCodeElement:
	//	{OclCodeElement} "oclCode[" elements+=MarkupElement* "]";
	public OclCodeElementElements getOclCodeElementAccess() {
		return (pOclCodeElement != null) ? pOclCodeElement : (pOclCodeElement = new OclCodeElementElements());
	}
	
	public ParserRule getOclCodeElementRule() {
		return getOclCodeElementAccess().getRule();
	}

	//OclEvalElement:
	//	{OclEvalElement} "oclEval[" elements+=MarkupElement* "]";
	public OclEvalElementElements getOclEvalElementAccess() {
		return (pOclEvalElement != null) ? pOclEvalElement : (pOclEvalElement = new OclEvalElementElements());
	}
	
	public ParserRule getOclEvalElementRule() {
		return getOclEvalElementAccess().getRule();
	}

	//OclTextElement:
	//	{OclTextElement} "oclText[" elements+=MarkupElement* "]";
	public OclTextElementElements getOclTextElementAccess() {
		return (pOclTextElement != null) ? pOclTextElement : (pOclTextElement = new OclTextElementElements());
	}
	
	public ParserRule getOclTextElementRule() {
		return getOclTextElementAccess().getRule();
	}

	//MarkupKeyword:
	//	"b[" | "e[" | "fig[" | "fig:" | "fig-[" | "oclCode[" | "oclEval[" | "oclText[" | "]";
	public MarkupKeywordElements getMarkupKeywordAccess() {
		return (pMarkupKeyword != null) ? pMarkupKeyword : (pMarkupKeyword = new MarkupKeywordElements());
	}
	
	public ParserRule getMarkupKeywordRule() {
		return getMarkupKeywordAccess().getRule();
	}

	////terminal INT returns ecore::EInt: ('0'..'9')+;
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal WORD:
	//	("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "<" | ">" | "[" | "]") | !("\\" | "[" | "]" | " " | "\t" |
	//	"\n" | "\r"))+;
	public TerminalRule getWORDRule() {
		return (tWORD != null) ? tWORD : (tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WORD"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "<" | ">") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal TEXT:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "[" | "]") | !("\\" | "\'" | "[" | "]" | "\n"))* "\'";
	public TerminalRule getTEXTRule() {
		return (tTEXT != null) ? tTEXT : (tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT"));
	} 

	//terminal NL:
	//	("\n" | "\r") (WS* ("\n" | "\r"))*;
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//// section2/3/4
	//// sec-ref
	//// bullets
	//// fig-ref
	//// fig:name + cap
	//// emphasized-ocl
	//// normal-ocl terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
