[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::build::acceleo::generateOCLMetaModel('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/Ecore') extends org::eclipse::ocl::examples::build::acceleo::generateOCLCommon/]

[template public generate(root : Root, javaPackage : String, javaClass : String, sourceFile : String, uri : String)]
[comment @main /]
[let pkg : Package = root.nestedPackage->any(name <> '$$')]
[let allClassifierTypes : Sequence(ClassifierType) = root.eAllContents(ClassifierType)]
[let allCollectionTypes : Sequence(CollectionType) = root.eAllContents(CollectionType)]
[let allEnumerations : Sequence(Enumeration) = root.eAllContents(Enumeration)]
[let allLambdaTypes : Sequence(LambdaType) = root.eAllContents(LambdaType)]
[let allPrecedences : Sequence(Precedence) = root.eAllContents(Precedence)]
[let allTemplateBindings : Sequence(TemplateBinding) = root.eAllContents(TemplateBinding)]
[let allTemplateSignatures : Sequence(TemplateSignature) = root.eAllContents(TemplateSignature)]
[let allTupleTypes : Sequence(TupleType) = root.eAllContents(TupleType)]
[let allTypes : Sequence(Type) = root.eAllContents(Type)]
[file (javaClass + '.java', false, 'UTF-8')]
/**
 * <copyright>
 *
 * Copyright (c) 2010,2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * This code is auto-generated
 * from: [sourceFile/]
 * by: org.eclipse.ocl.examples.build.acceleo.GenerateOCLMetaModel.java
 * defined by: org.eclipse.ocl.examples.build.acceleo.generateOCLMetaModel.mtl
 * invoked by: org.eclipse.ocl.examples.build.utilities.OCLMetaModelCodeGenerator.java
 * from: org.eclipse.ocl.examples.build.GenerateOCLMetaModel.mwe2
 *
 * Do not edit it.
 *
 * ['$' + 'I' + 'd' + '$'/]
 */
package	[javaPackage/];

import java.math.BigInteger;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.ocl.examples.domain.library.LibraryFeature;
import org.eclipse.ocl.examples.domain.utilities.DomainUtil;
import org.eclipse.ocl.examples.pivot.*;
import org.eclipse.ocl.examples.pivot.Class;
import org.eclipse.ocl.examples.pivot.Package;
import org.eclipse.ocl.examples.pivot.manager.PivotStandardLibrary;
import org.eclipse.ocl.examples.pivot.model.OCLstdlib;
import org.eclipse.ocl.examples.pivot.utilities.PivotUtil;

/**
 * This is the [uri/] Pivot Model of the Pivot Model
 * auto-generated from [sourceFile/].
 * It facilitates efficient model loading without the overheads of model reading.
 */
@SuppressWarnings({"nls", "unused"})
public class [javaClass/] extends XMIResourceImpl
{
	/**
	 *	The URI of this Standard Library.
	 */
	public static final @NonNull String PIVOT_URI = "[uri/]";

	public static @NonNull Package create(@NonNull PivotStandardLibrary standardLibrary, @NonNull String name, @Nullable String nsPrefix, @NonNull String nsURI) {
		[javaClass/] resource = new [javaClass/](DomainUtil.nonNullEMF(URI.createURI(PIVOT_URI)));
		Contents contents = new Contents(standardLibrary, name, nsPrefix, nsURI);
		resource.getContents().add(contents.root);
		return contents.metamodel;
	}

	protected OCLMetaModel(@NonNull URI uri) {
		super(uri);
	}

	protected static class Contents extends AbstractContents
	{
		protected final @NonNull Root [root.getPrefixedSymbolName('root')/];
		protected final @NonNull Package [pkg.getPrefixedSymbolName('metamodel')/];
		[allTypes->defineCollectionTypeName('Bag')/]
		[allTypes->definePrimitiveTypeName('Boolean')/]
		[allTypes->defineCollectionTypeName('Collection')/]
		[allTypes->definePrimitiveTypeName('Integer')/]
		protected final @NonNull Class _OclElement = standardLibrary.getOclElementType();
		[allTypes->defineCollectionTypeName('OrderedSet')/]
		[allTypes->definePrimitiveTypeName('Real')/]
		[allTypes->defineCollectionTypeName('Sequence')/]
		[allTypes->defineCollectionTypeName('Set')/]
		[allTypes->definePrimitiveTypeName('String')/]
		[allTypes->definePrimitiveTypeName('UnlimitedNatural')/]

		protected Contents(@NonNull PivotStandardLibrary standardLibrary, @NonNull String name, @Nullable String nsPrefix, @NonNull String nsURI) {
			super(standardLibrary);
			[root.getSymbolName()/] = createRoot("[pkg.name/]", "[pkg.nsURI/]");
			[pkg.getSymbolName()/] = createPackage(name, nsPrefix, nsURI);
			installPackages();
			installOclTypes();
			installPrimitiveTypes();
[if (allEnumerations->notEmpty())]
			installEnumerations();
[/if]
			installParameterTypes();
[if (allCollectionTypes->notEmpty())]
			installCollectionTypes();
[/if]
[if (allClassifierTypes->notEmpty())]
			installClassifierTypes();
[/if]
[if (allLambdaTypes->notEmpty())]
			installLambdaTypes();
[/if]
[if (allTupleTypes->notEmpty())]
			installTupleTypes();
[/if]
			installOperations();
			installIterations();
			installProperties();
[if (allTemplateSignatures->notEmpty())]
			installTemplateSignatures();
[/if]
[if (allTemplateBindings->notEmpty())]
			installTemplateBindings();
[/if]
[if (allPrecedences->notEmpty())]
			installPrecedences();
[/if]
			installComments();
		}
	
		[pkg.definePackages()/]
		[pkg.declareOclTypes()/]
		[pkg.declarePrimitiveTypes()/]
[if (allEnumerations->notEmpty())]
		[pkg.declareEnumerations()/]
[/if]
		[pkg.declareParameterTypes()/]
[if (allCollectionTypes->notEmpty())]
		[pkg.declareCollectionTypes()/]
[/if]
[if (allClassifierTypes->notEmpty())]
		[pkg.declareClassifierTypes()/]
[/if]
[if (allTupleTypes->notEmpty())]
		[pkg.declareTupleTypes()/]
[/if]
		[pkg.defineOclTypes()/]
		[pkg.definePrimitiveTypes()/]
[if (allEnumerations->notEmpty())]
		[pkg.defineEnumerations()/]
[/if]
		[pkg.defineParameterTypes()/]
[if (allCollectionTypes->notEmpty())]
		[pkg.defineCollectionTypes()/]
[/if]
[if (allClassifierTypes->notEmpty())]
		[pkg.defineClassifierTypes()/]
[/if]
[if (allTupleTypes->notEmpty())]
		[pkg.defineTupleTypes()/]
[/if]	
[if (allLambdaTypes->notEmpty())]
		[pkg.defineLambdaTypes()/]	
[/if]	
		[pkg.defineOperations()/]
		[pkg.defineIterations()/]	
		[pkg.defineProperties()/]
[if (allTemplateSignatures->notEmpty())]
		[pkg.defineTemplateSignatures()/]
[/if]
[if (allTemplateBindings->notEmpty())]
		[pkg.defineTemplateBindings()/]
[/if]
[if (allPrecedences->notEmpty())]
		[pkg.definePrecedences()/]
[/if]
		[pkg.defineComments()/]
	}
}
[/file]
[/let]
[/let]
[/let]
[/let]
[/let]
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]

[template public defineCollectionTypeName(allTypes : Sequence(Type), typeName : String)]
[let collectionType : CollectionType = allTypes->select(name=typeName)->filter(CollectionType)->any(true)]
protected final @NonNull CollectionType [collectionType.getPrefixedSymbolName('_'+typeName)/] = standardLibrary.get[typeName/]Type();
protected final @NonNull TemplateParameter [collectionType.ownedTemplateSignature.getPrefixedSymbolName('_'+typeName+'_T')/] = standardLibrary.get[typeName/]Type().getOwnedTemplateSignature().getParameter().get(0);
[/let]
[/template]

[template public definePrimitiveTypeName(allTypes : Sequence(Type), typeName : String)]
protected final @NonNull PrimitiveType [allTypes->select(name=typeName)->any(true).getPrefixedSymbolName('_'+typeName)/] = standardLibrary.get[typeName/]Type();
[/template]
