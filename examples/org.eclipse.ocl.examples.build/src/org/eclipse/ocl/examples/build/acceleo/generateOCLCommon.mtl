[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::build::acceleo::generateOCLCommon('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/Ecore')/]

[query public getMoniker(elem : Element) : String =
invoke('org.eclipse.ocl.examples.build.acceleo.NameQueries', 'getMoniker(org.eclipse.ocl.examples.pivot.Element)', Sequence{elem}) /]

[query public getOrphanPackage(elem : Package) : Package =
elem.getRootPackage()->closure(nestedPackage)->any(name='$$')/]

[query public getRootPackage(elem : Package) : Package =
if elem.nestingPackage->notEmpty() then elem.nestingPackage.getRootPackage() else elem endif/]

[query public getSignature(elem : NamedElement) : String = 
let parent : EObject = elem.eContainer() in
if not parent.oclIsUndefined() then parent.oclAsType(NamedElement).getSignature() + '::' + elem.name
else elem.name endif/]

[query public getSignature(elem : Operation) : String = 
let parent : EObject = elem.eContainer() in
if not parent.oclIsUndefined() then parent.oclAsType(NamedElement).getSignature() + '::' + elem.name
else elem.name endif + '()'/]

[query public getPrefixedSymbolName(elem : EObject, prefix : String) : String = 
invoke('org.eclipse.ocl.examples.build.acceleo.NameQueries', 'getPrefixedSymbolName(java.lang.String, java.lang.Object)', Sequence{prefix, elem}) /]

[query public getSymbolName(elem : EObject) : String = 
invoke('org.eclipse.ocl.examples.build.acceleo.NameQueries', 'getSymbolName(java.lang.Object)', Sequence{elem}) /]

[query public isEcoreConstraint(operation : Operation) : Boolean =
operation.ownedParameter->select(p : Parameter
| (p.name = 'diagnostics') and (p.type.name = 'EDiagnosticChain'))->notEmpty()
/]

[template public declareClassifierTypes(pkg : Package)]
[let allClassifierTypes : OrderedSet(ClassifierType) = pkg.getRootPackage().eAllContents(ClassifierType)->asSet()->sortedBy(getMoniker())]
[for (type : ClassifierType | allClassifierTypes)]
protected final ClassifierType [type.getPrefixedSymbolName('_'+type.partialName())/] = createClassifierType("[type.name/]");
[/for][/let][/template]

[template public declareCollectionTypes(pkg : Package)]
[let allTypes : OrderedSet(CollectionType) = pkg.getRootPackage().eAllContents(CollectionType)->asSet()->sortedBy(getMoniker())]
[for (type : CollectionType | allTypes)]
protected final [type.eClass().name/] [type.getPrefixedSymbolName('_'+type.partialName())/] = create[type.eClass().name/]("[type.name/]");
[/for][/let][/template]

[template public declareEnumerations(pkg : Package)]
[let allEnumerations : OrderedSet(Enumeration) = pkg.getRootPackage().eAllContents(Enumeration)->asSet()->sortedBy(getMoniker())]
[for (enumeration : Enumeration | allEnumerations)]
protected final Enumeration [enumeration.getPrefixedSymbolName('_'+enumeration.partialName())/] = createEnumeration("[enumeration.name/]");
[/for][/let][/template]

[template public declareOclTypes(pkg : Package)]
[let allOclTypes : OrderedSet(Type) = pkg.getOclTypes()->sortedBy(getMoniker())]
[for (type : Type | allOclTypes)]
protected final [type.eClass().name/] [type.getPrefixedSymbolName('_'+type.partialName())/] = create[type.eClass().name/]("[type.name/]");
[/for][/let][/template]

[template public declareParameterTypes(pkg : Package)]
[let allTypes : OrderedSet(Type) = pkg.getRootPackage().eAllContents(Type)->select(owningTemplateParameter <> null)->asSet()->sortedBy(getMoniker())]
[for (type : Type | allTypes)]
protected final Class [type.getPrefixedSymbolName('_'+type.partialName())/] = createClass("[type.name/]");
[/for][/let][/template]

[template public declarePrimitiveTypes(pkg : Package)]
[let allTypes : OrderedSet(PrimitiveType) = pkg.getRootPackage().eAllContents(PrimitiveType)->asSet()->sortedBy(getMoniker())]
[for (type : PrimitiveType | allTypes)]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = createPrimitiveType("[type.name/]");
[/for][/let][/template]

[template public declareTupleTypes(pkg : Package)]
[let allTupleTypes : OrderedSet(TupleType) = pkg.getRootPackage().eAllContents(TupleType)->asSet()->sortedBy(getMoniker())]
[for (type : TupleType | allTupleTypes)]
protected final TupleType [type.getPrefixedSymbolName('_'+type.partialName())/] = createTupleType("[type.name/]",
[for (property : Property | type.ownedAttribute->sortedBy(name)) separator(',\n')]
	createProperty("[property.name/]", [property.type.getSymbolName()/])[/for]);
[/for][/let][/template]

[template public defineClassifierTypes(pkg : Package)]
[let allClassifierTypes : OrderedSet(ClassifierType) = pkg.getRootPackage().eAllContents(ClassifierType)->asSet()->sortedBy(getMoniker())]
[let orphanPackage : Package = pkg.getOrphanPackage()]
protected void installClassifierTypes() {
	final List<Type> ownedTypes = [pkg.getSymbolName()/].getOwnedType();
[if (orphanPackage->notEmpty())]
	final List<Type> orphanTypes = [orphanPackage.getSymbolName()/].getOwnedType();
[/if]
	ClassifierType type;
	List<Type> superClasses;
[for (type : ClassifierType | allClassifierTypes)]
[if (type.unspecializedElement = null)]
	ownedTypes.add(type = [type.getSymbolName()/]);
[else]
	orphanTypes.add(type = [type.getSymbolName()/]);
	type.setUnspecializedElement([type.unspecializedElement.getSymbolName()/]);
[/if]
	type.setInstanceType([type.instanceType.getSymbolName()/]);
	[type.emitSuperClasses()/]
[/for]
}
[/let][/let][/template]

[template public defineCollectionTypes(pkg : Package)]
[let allCollectionTypes : OrderedSet(CollectionType) = pkg.getRootPackage().eAllContents(CollectionType)->asSet()->sortedBy(getMoniker())]
[let orphanPackage : Package = pkg.getOrphanPackage()]
protected void installCollectionTypes() {
	final List<Type> ownedTypes = [pkg.getSymbolName()/].getOwnedType();
[if (orphanPackage->notEmpty())]
	final List<Type> orphanTypes = [orphanPackage.getSymbolName()/].getOwnedType();
[/if]
	CollectionType type;
	List<Type> superClasses;
[for (type : CollectionType | allCollectionTypes)]
[if (type.unspecializedElement = null)]
	ownedTypes.add(type = [type.getSymbolName()/]);
[else]
	orphanTypes.add(type = [type.getSymbolName()/]);
	type.setUnspecializedElement([type.unspecializedElement.getSymbolName()/]);
[/if]
	type.setElementType([type.elementType.getSymbolName()/]);
	[type.emitSuperClasses()/]
[/for]
}
[/let][/let][/template]

[template public defineComments(pkg : Package)]
protected void installComments() {
[let commentedElements : OrderedSet(Element) = pkg.getRootPackage().eAllContents(Element)->reject(oclIsKindOf(Constraint))->select(ownedComment->notEmpty())->asSet()->sortedBy(getMoniker())]
[for (pElement : Element | commentedElements->sortedBy(getMoniker()))]
[for (pComment : Comment | pElement.ownedComment->sortedBy(_body))]
	installComment([pElement.getSymbolName()/], "[pComment.javaString()/]");
[/for]
[/for]
[/let]
}
[/template]

[template public defineEnumerations(pkg : Package)]
[let allEnumerations : OrderedSet(Enumeration) = pkg.getRootPackage().eAllContents(Enumeration)->asSet()->sortedBy(getMoniker())]
protected void installEnumerations() {
	final List<Type> ownedTypes = [pkg.getSymbolName()/].getOwnedType();
	Enumeration type;
	List<EnumerationLiteral> enumerationLiterals;
[for (enumeration : Enumeration | allEnumerations)]
	ownedTypes.add(type = [enumeration.getSymbolName()/]);
	enumerationLiterals = type.getOwnedLiteral();
[for (enumerationLiteral : EnumerationLiteral | enumeration.ownedLiteral)]
	enumerationLiterals.add(createEnumerationLiteral("[enumerationLiteral.name/]"));
[/for]
	type.getSuperClass().add(_Enumeration);
[/for]
}
[/let][/template]

[template public defineIterations(pkg : Package)]
[let allIterations : OrderedSet(Iteration) = pkg.getRootPackage().eAllContents(Iteration)->asSet()->sortedBy(getMoniker())]
[for (iteration : Iteration | allIterations)]
protected final Iteration [iteration.getPrefixedSymbolName('it_'+iteration.partialName())/] = createIteration("[iteration.name/]", [iteration.type.getSymbolName()/], [if (iteration.implementationClass->notEmpty())]"[iteration.implementationClass/]", [iteration.implementationClass/].INSTANCE[else]null, null[/if]);
[/for]

protected void installIterations() {
	List<Operation> ownedIterations;
	List<Parameter> ownedParameters;
	Iteration iteration;
	Parameter parameter;
[for (type : Type | allIterations.owningType->asSet()->sortedBy(getMoniker()))]
	ownedIterations = [type.getSymbolName()/].getOwnedOperation();
[for (iteration : Iteration | type.ownedOperation->intersection(allIterations)->filter(Iteration)->sortedBy(getMoniker()))]
	ownedIterations.add(iteration = [iteration.getSymbolName()/]);
[if (iteration.lower <> 1)]
	iteration.setLower(BigInteger.valueOf([iteration.lower/]));
[/if][if (iteration.upper <> 1)]
	iteration.setUpper(BigInteger.valueOf([iteration.upper/]));
[/if][if (iteration.isOrdered)]
	iteration.setIsOrdered(true);
[/if][if (not iteration.isUnique)]
	iteration.setIsUnique(false);
[/if][if (iteration.isStatic)]
	iteration.setIsStatic(true);
[/if]
[if (iteration.ownedIterator->notEmpty())]
	ownedParameters = iteration.getOwnedIterator();
[for (parameter : Parameter | iteration.ownedIterator)]
	ownedParameters.add(parameter = createParameter("[parameter.name/]", [parameter.type.getSymbolName()/]));
[if (parameter.lower <> 1)]
	parameter.setLower(BigInteger.valueOf([parameter.lower/]));
[/if][if (parameter.upper <> 1)]
	parameter.setUpper(BigInteger.valueOf([parameter.upper/]));
[/if][if (parameter.isOrdered)]
	parameter.setIsOrdered(true);
[/if][if (not parameter.isUnique)]
	parameter.setIsUnique(false);
[/if][/for][/if]
[if (iteration.ownedAccumulator->notEmpty())]
	ownedParameters = iteration.getOwnedAccumulator();
[for (parameter : Parameter | iteration.ownedAccumulator)]
	ownedParameters.add(parameter = createParameter("[parameter.name/]", [parameter.type.getSymbolName()/]));
[if (parameter.lower <> 1)]
	parameter.setLower(BigInteger.valueOf([parameter.lower/]));
[/if][if (parameter.upper <> 1)]
	parameter.setUpper(BigInteger.valueOf([parameter.upper/]));
[/if][if (parameter.isOrdered)]
	parameter.setIsOrdered(true);
[/if][if (not parameter.isUnique)]
	parameter.setIsUnique(false);
[/if][/for][/if]
[if (iteration.ownedParameter->notEmpty())]
	ownedParameters = iteration.getOwnedParameter();
[for (parameter : Parameter | iteration.ownedParameter)]
	ownedParameters.add(parameter = createParameter("[parameter.name/]", [parameter.type.getSymbolName()/]));
[if (parameter.lower <> 1)]
	parameter.setLower(BigInteger.valueOf([parameter.lower/]));
[/if][if (parameter.upper <> 1)]
	parameter.setUpper(BigInteger.valueOf([parameter.upper/]));
[/if][if (parameter.isOrdered)]
	parameter.setIsOrdered(true);
[/if][if (not parameter.isUnique)]
	parameter.setIsUnique(false);
[/if][/for][/if]
[/for]
[/for]
[/let]
}

[/template]

[template public defineLambdaTypes(pkg : Package)]
[let allLambdaTypes : OrderedSet(LambdaType) = pkg.getRootPackage().eAllContents(LambdaType)->asSet()->sortedBy(getMoniker())]
[let allContainers : Set(Package) = allLambdaTypes.eContainer()->asSet()->excluding(pkg)->filter(Package)]
[for (type : LambdaType | allLambdaTypes)]
protected final LambdaType [type.getPrefixedSymbolName('_'+type.partialName())/] = createLambdaType("[type.name/]");
[/for]

protected void installLambdaTypes() {
[let orphanPackage : Package = pkg.getOrphanPackage()]
	final List<Type> orphanTypes = [orphanPackage.getSymbolName()/].getOwnedType();
	LambdaType type;
	List<Type> superClasses;
[for (type : LambdaType | allLambdaTypes)]
	orphanTypes.add(type = [type.getSymbolName()/]);
	type.setContextType([type.contextType.getSymbolName()/]);
[for (parameterType : Type| type.parameterType)]
	type.getParameterType().add([parameterType.getSymbolName()/]);
[/for]
	type.setResultType([type.resultType.getSymbolName()/]);
	[type.emitSuperClasses()/]
[/for]
}
[/let][/let][/let]
[/template]

[template public defineOclTypes(pkg : Package)]
[let allOclTypes : OrderedSet(Type) = pkg.getOclTypes()->sortedBy(getMoniker())]
protected void installOclTypes() {
	final List<Type> ownedTypes = [pkg.getSymbolName()/].getOwnedType();
	Type type;
	List<Type> superClasses;
[for (type : Type | allOclTypes)]
	ownedTypes.add(type = [type.getSymbolName()/]);
[if (not type.oclIsKindOf(AnyType))]
	[type.emitSuperClasses()/]
[/if]
[/for]
}
[/let]
[/template]

[template public defineOperations(pkg : Package)]
[let allOperations : OrderedSet(Operation) = pkg.getRootPackage().eAllContents(Operation)->reject(oclIsKindOf(Iteration))->reject(isEcoreConstraint())->asSet()->sortedBy(getMoniker())]
[for (operation : Operation | allOperations)]
protected final Operation [operation.getPrefixedSymbolName('op_'+operation.partialName())/] = createOperation("[operation.name/]", [operation.type.getSymbolName()/], [if (operation.implementationClass->notEmpty())]"[operation.implementationClass/]", [operation.implementationClass/].INSTANCE[else]null, null[/if]);
[/for]

protected void installOperations() {
	List<Operation> ownedOperations;
	List<Parameter> ownedParameters;
	Operation operation;
	Parameter parameter;
[for (type : Type | allOperations.owningType->asSet()->excluding(null)->sortedBy(getMoniker()))]
	ownedOperations = [type.getSymbolName()/].getOwnedOperation();
[for (operation : Operation | type.ownedOperation->intersection(allOperations)->sortedBy(getMoniker()))]
	ownedOperations.add(operation = [operation.getSymbolName()/]);
[if (operation.lower <> 1)]
	operation.setLower(BigInteger.valueOf([operation.lower/]));
[/if][if (operation.upper <> 1)]
	operation.setUpper(BigInteger.valueOf([operation.upper/]));
[/if][if (operation.isOrdered)]
	operation.setIsOrdered(true);
[/if][if (not operation.isUnique)]
	operation.setIsUnique(false);
[/if][if (operation.isStatic)]
	operation.setIsStatic(true);
[/if]
[if (operation.ownedParameter->notEmpty())]
	ownedParameters = operation.getOwnedParameter();
[for (parameter : Parameter | operation.ownedParameter)]
	ownedParameters.add(parameter = createParameter("[parameter.name/]", [parameter.type.getSymbolName()/]));
[if (parameter.lower <> 1)]
	parameter.setLower(BigInteger.valueOf([parameter.lower/]));
[/if][if (parameter.upper <> 1)]
	parameter.setUpper(BigInteger.valueOf([parameter.upper/]));
[/if][if (parameter.isOrdered)]
	parameter.setIsOrdered(true);
[/if][if (not parameter.isUnique)]
	parameter.setIsUnique(false);
[/if][/for][/if]
[/for]
[/for]
[/let]
}

[/template]

[template public definePackages(pkg : Package)]
[let rootPackage : Package = pkg.getRootPackage()]
[let allPackages : OrderedSet(Package) = rootPackage.eAllContents(Package)->including(rootPackage)->asSet()->sortedBy(getMoniker())]
[let morePackages : OrderedSet(Package) = allPackages->excluding(pkg)->excluding(rootPackage)]
[if (morePackages->notEmpty())]
[for (pkg : Package | morePackages)]
protected final [pkg.eClass().name/] [pkg.getPrefixedSymbolName('pk_'+pkg.partialName())/] = create[pkg.eClass().name/]("[pkg.name/]", [if pkg.nsPrefix <> null]"[pkg.nsPrefix/]"[else]null[/if], [if pkg.nsURI <> null]"[pkg.nsURI/]"[else]null[/if]);
[/for]

[/if]
protected void installPackages() {
	[for (pkg1 : Package | allPackages)][emitPackage(pkg1)/][/for]
}
[/let]
[/let]
[/let]
[/template]

[template public defineParameterTypes(pkg : Package)]
[let allTypes : OrderedSet(Type) = pkg.getRootPackage().eAllContents(Type)->select(owningTemplateParameter <> null)->asSet()->sortedBy(getMoniker())]
protected void installParameterTypes() {
}
[/let]
[/template]

[template public definePrecedences(pkg : Package)]
[let allLibraries : OrderedSet(Library) = pkg.getRootPackage().eAllContents(Library)->asSet()->sortedBy(getMoniker())]
[if (allLibraries->notEmpty())]
protected void installPrecedences() {
[for (lib : Library | allLibraries)]
[let allPrecedences : OrderedSet(Precedence) = lib.ownedPrecedence]
[for (precedence : Precedence | allPrecedences->sortedBy(name))]
	final Precedence [precedence.getPrefixedSymbolName('prec_'+precedence.partialName())/] = createPrecedence("[precedence.name/]", AssociativityKind.[precedence.associativity.toString().toUpper()/]);
[/for]

	final List<Precedence> ownedPrecedences = [lib.getSymbolName()/].getOwnedPrecedence();
[for (precedence : Precedence | allPrecedences)]
	ownedPrecedences.add([precedence.getSymbolName()/]);
[/for]
[/let]
[/for]

[let allOperations : OrderedSet(Operation) = pkg.getRootPackage().eAllContents(Operation)->select(precedence <> null)->asSet()->sortedBy(getMoniker())]
[for (operation : Operation | allOperations)]
	[operation.getSymbolName()/].setPrecedence([operation.precedence.getSymbolName()/]);
[/for]
[/let]
}
[/if]
[/let]
[/template]

[template public definePrimitiveTypes(pkg : Package)]
[let allTypes : OrderedSet(PrimitiveType) = pkg.getRootPackage().eAllContents(PrimitiveType)->asSet()->sortedBy(getMoniker())]
protected void installPrimitiveTypes() {
	final List<Type> ownedTypes = [pkg.getSymbolName()/].getOwnedType();
	PrimitiveType type;
[for (type : PrimitiveType | allTypes)]
	ownedTypes.add(type = [type.getSymbolName()/]);
[let superClasses : OrderedSet(Type) = type.superClass->select(_package.getRootPackage() = type._package.getRootPackage())]
[for (superClass : Type | superClasses)]
	type.getSuperClass().add([superClass.getSymbolName()/]);
[/for]
[/let]
[/for]
}
[/let]
[/template]

[template public defineProperties(pkg : Package)]
[let allProperties : OrderedSet(Property) = pkg.getRootPackage().eAllContents(Property)->reject(eContainer().oclIsKindOf(TupleType))->asSet()->sortedBy(getMoniker())]
[for (property : Property | allProperties)]
protected final Property [property.getPrefixedSymbolName('pr_'+partialName())/] = createProperty("[property.name/]", [property.type.getSymbolName()/]);
[/for]

protected void installProperties() {
	List<Property> ownedProperties;
	Property property;
[for (type : Type | allProperties.owningType->asSet()->excluding(null)->sortedBy(getMoniker()))]
	ownedProperties = [type.getSymbolName()/].getOwnedAttribute();
[for (property : Property | type.ownedAttribute->intersection(allProperties)->sortedBy(getMoniker()))]
	ownedProperties.add(property = [property.getSymbolName()/]);
[if (property.lower <> 1)]
	property.setLower(BigInteger.valueOf([property.lower/]));
[/if][if (property.upper <> 1)]
	property.setUpper(BigInteger.valueOf([property.upper/]));
[/if][if (property.isOrdered)]
	property.setIsOrdered(true);
[/if][if (not property.isUnique)]
	property.setIsUnique(false);
[/if][if (property.isComposite)]
	property.setIsComposite(true);
[/if][if (property.isDerived)]
	property.setIsDerived(true);
[/if][if (property.isID)]
	property.setIsID(true);
[/if][if (property.implicit)]
	property.setImplicit(true);
[/if][if (property.isReadOnly)]
	property.setIsReadOnly(true);
[/if][if (property.isResolveProxies)]
	property.setIsResolveProxies(true);
[/if][if (property.isStatic)]
	property.setIsStatic(true);
[/if][if (property.isTransient)]
	property.setIsTransient(true);
[/if][if (property.isUnsettable)]
	property.setIsUnsettable(true);
[/if][if (property.isVolatile)]
	property.setIsVolatile(true);
[/if][if (property.opposite->notEmpty())]
	property.setOpposite([property.opposite.getSymbolName()/]);
[/if][if (property.implementationClass->notEmpty())]
	property.setImplementationClass("[property.implementationClass/]");
	property.setImplementation([property.implementationClass/].INSTANCE);
[/if][/for][/for][/let]
}
[/template]

[template public defineTemplateBindings(pkg : Package)]
protected void installTemplateBindings() {
[let allTemplateableElements : OrderedSet(TemplateableElement) = pkg.getRootPackage().eAllContents(TemplateableElement)->select(templateBinding->notEmpty())->asSet()->sortedBy(getMoniker())]
[for (templateableElement : TemplateableElement | allTemplateableElements)]
[for (templateBinding : TemplateBinding | templateableElement.templateBinding)]
	[templateableElement.getSymbolName()/].getTemplateBinding().add(createTemplateBinding([templateBinding.signature.getSymbolName()/],
[for (templateParameterSubstitution : TemplateParameterSubstitution | templateBinding.parameterSubstitution) separator(',\n')]
		createTemplateParameterSubstitution([templateParameterSubstitution.formal.getSymbolName()/], [templateParameterSubstitution.actual.getSymbolName()/])[/for]));
[/for]
[/for]
[/let]
}

[/template]

[template public defineTemplateSignatures(pkg : Package)]
[let allTemplateParameters : OrderedSet(TemplateParameter) = pkg.getRootPackage().eAllContents(TemplateParameter)->asSet()->sortedBy(getMoniker())]
[for (templateParameter : TemplateParameter | allTemplateParameters)]
protected final TypeTemplateParameter [templateParameter.getPrefixedSymbolName('tp_'+templateParameter.partialName())/] = createTypeTemplateParameter([templateParameter.ownedParameteredElement.getSymbolName()/]);
[/for]
[/let]

[let allTemplateSignatures : OrderedSet(TemplateSignature) = pkg.getRootPackage().eAllContents(TemplateSignature)->asSet()->sortedBy(getMoniker())]
[for (templateSignature : TemplateSignature | allTemplateSignatures)]
protected final TemplateSignature [templateSignature.getPrefixedSymbolName('ts_'+templateSignature.partialName())/] = createTemplateSignature([templateSignature.template.getSymbolName()/][for (templateParameter : TemplateParameter | templateSignature.ownedParameter)], [templateParameter.getSymbolName()/][/for]);
[/for]
[/let]

protected void installTemplateSignatures() {
}

[/template]

[template public defineTupleTypes(pkg : Package)]
[let allTupleTypes : OrderedSet(TupleType) = pkg.getRootPackage().eAllContents(TupleType)->asSet()->sortedBy(getMoniker())]
[let orphanPackage : Package = pkg.getOrphanPackage()]
protected void installTupleTypes() {
	final List<Type> orphanTypes = [orphanPackage.getSymbolName()/].getOwnedType();
	TupleType type;
	List<Type> superClasses;
[for (type : TupleType | allTupleTypes)]
	orphanTypes.add(type = [type.getSymbolName()/]);
[for (property : Property | type.ownedAttribute->sortedBy(name))]
[if (property.implementationClass->notEmpty())]
	[property.getSymbolName()/].setImplementationClass("[property.implementationClass/]");
	[property.getSymbolName()/].setImplementation([property.implementationClass/].INSTANCE);
[/if][/for]
	[type.emitSuperClasses()/]
[/for]
}
[/let][/let]
[/template]

[template public emitPackage(pkg : Package)]
[for (nestedPackage : Package | pkg.nestedPackage->sortedBy(name)) separator('\n')]
[if (nestedPackage.nestedPackage->notEmpty())]
[emitPackage(nestedPackage)/][/if]
[pkg.getSymbolName()/].getNestedPackage().add([nestedPackage.getSymbolName()/]);[/for][/template]

[template public emitSuperClasses(type : Type)]
[let superClasses : OrderedSet(Type) = type.superClass->select(_package.getRootPackage() = type._package.getRootPackage())]
[if (superClasses->notEmpty())]
superClasses = type.getSuperClass();
[for (superClass : Type | superClasses) separator('\n')]
superClasses.add([superClass.getSymbolName()/]);[/for][elseif (not type.oclIsKindOf(AnyType))]
superClasses = type.getSuperClass();
superClasses.add(_OclElement);[/if]
[/let]
[/template]

[template public partialName(element : CollectionType)] 
[if element.elementType = null]
[element.name.javaName()/][else]
[element.name.javaName()+'_'+element.elementType.partialName()/][/if]
[/template]

[template public partialName(element : Comment)] 
[if element._body = null]
null[else]
[element._body.substring(1, 12.min(element._body.size())).javaName()/][/if]
[/template]

[template public partialName(element : EnumerationLiteral)] 
[if element.enumeration = null]
null[else]
[element.enumeration.partialName()+'_'+element.name.javaName()/][/if]
[/template]

[template public partialName(element : LambdaType)] 
[if element.contextType = null]
null[else]
[element.name.javaName() + '_' + element.contextType.partialName()/][/if]
[/template]

[template public partialName(element : OclAny)] 
['xyzzy'+element.eClass().name /]
[/template]

[template public partialName(element : OclInvalid)] 
['invalid'/]
[/template]

[template public partialName(element : OclVoid)] 
['void'/]
[/template]

[template public partialName(element : Operation)] 
[if element.owningType = null]
null[else]
[element.owningType.partialName()/][/if]_[element.name.javaName()/]
[/template]

[template public partialName(element : Package)] 
[element.name.javaName() /]
[/template]

[template public partialName(element : Parameter)] 
[if element.eContainer() = null]
null[else]
[element.eContainer().partialName()/][/if]_[element.name.javaName()/]
[/template]

[template public partialName(element : Precedence)] 
[element.name.javaName() /]
[/template]

[template public partialName(element : Property)] 
[if element.owningType = null]
null[else]
[element.owningType.partialName()/][/if]_[element.name.javaName()/]
[/template]

[template public partialName(element : TemplateBinding)] 
[if element.boundElement = null]
null[else]
[element.boundElement.partialName()/][/if]
[/template]

[template public partialName(element : TemplateParameter)] 
[if element.signature.template = null]
['['+element.signature.partialName()+']'/][elseif element.parameteredElement = null]
[element.signature.template.partialName()/][elseif true]
[element.signature.template.partialName()/][else]
[element.signature.template.partialName()/]_[element.parameteredElement.simpleName()/][/if]
[/template]

[template public partialName(element : TemplateParameterSubstitution)] 
[if element.templateBinding = null]
null[elseif element.templateBinding.boundElement = null]
null[else]
[element.templateBinding.boundElement.partialName()/][/if]
[/template]

[template public partialName(element : TemplateSignature)] 
[if element.template = null]
null[else]
[element.template.partialName()/][/if]
[/template]

[template public partialName(element : Type)] 
[if element.templateParameter <> null]
[element.templateParameter.simpleName()+'_'+element.name.javaName()/][elseif element.templateBinding->notEmpty()]
[element.templateBinding.parameterSubstitution->iterate(tps; acc : String = element.name.javaName() | acc +'_'+tps.actual.simpleName())/][else]
[element.name.javaName()/][/if]
[/template]

[template public simpleName(element : OclAny)] 
['xyzzy'+element.eClass().name /]
[/template]

[template public simpleName(element : OclInvalid)] 
['invalid'/]
[/template]

[template public simpleName(element : OclVoid)] 
['void'/]
[/template]

[template public simpleName(element : Operation)] 
[if element.owningType = null]
null[else]
[element.owningType.simpleName()/][/if]_[element.name.javaName()/]
[/template]

[template public simpleName(element : TemplateParameter)] 
[if element.signature.template = null]
null[else]
[element.signature.template.simpleName()/][/if]
[/template]

[template public simpleName(element : TemplateParameterSubstitution)] 
[if element.templateBinding = null]
null[elseif element.templateBinding.boundElement = null]
null[else]
[element.templateBinding.boundElement.simpleName()/][/if]
[/template]

[template public simpleName(element : Type)] 
[if element.templateParameter = null]
[element.name.javaName()/][else]
[element.templateParameter.simpleName()+'_'+element.name.javaName()/][/if]
[/template]

[query public getOclTypes(pkg : Package) : Set(Type) =
let types : Set(Type) = pkg.getRootPackage().eAllContents(Type)->asSet()
->reject(oclIsKindOf(Enumeration))
->reject(oclIsKindOf(LambdaType))
->reject(oclIsKindOf(CollectionType))
->reject(oclIsKindOf(PrimitiveType))
->reject(oclIsKindOf(ClassifierType))
->reject(oclIsKindOf(TupleType))
->select(owningTemplateParameter = null) in
if types->exists(name = 'Boolean') then types
->reject(name = 'Boolean')
->reject(name = 'Integer')
->reject(name = 'OclElement')
->reject(name = 'Real')
->reject(name = 'String')
->reject(name = 'UnlimitedNatural')
else types endif /]

[query public javaName(string : String) : String = 
invoke('org.eclipse.ocl.examples.codegen.common.NameQueries', 'rawEncodeName(java.lang.String)', Sequence{string}) /]

[query public javaString(aComment : Comment) : String = 
invoke('org.eclipse.xtext.util.Strings', 'convertToJavaString(java.lang.String)', Sequence{aComment._body}) /]
