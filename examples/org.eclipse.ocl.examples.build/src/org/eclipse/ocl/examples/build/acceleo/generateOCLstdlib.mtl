[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::build::acceleo::generateOCLstdlib('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::ocl::examples::build::acceleo::generateOCLCommon/]

[template public generate(pkg : Package, javaPackage : String, javaClass : String, sourceFile : String, uri : String) ? (pkg.eContainer() = null)]
[comment @main /]
[let allEnumerations : Sequence(Enumeration) = pkg.eAllContents(Enumeration)]
[file (javaClass + '.java', false, 'UTF-8')]
/**
 * <copyright>
 *
 * Copyright (c) 2010,2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * This code is auto-generated
 * from: [sourceFile/]
 * by: org.eclipse.ocl.examples.build.acceleo.GenerateOCLstdlib
 * defined by: org.eclipse.ocl.examples.build.acceleo.generateOCLstdlib.mtl
 * invoked by: org.eclipse.ocl.examples.build.utilities.OCLstdlibCodeGenerator
 * from: org.eclipse.ocl.examples.build.GenerateOCLstdlibModel.mwe2
 *
 * Do not edit it.
 */
package	[javaPackage/];

import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.ocl.examples.pivot.*;
import org.eclipse.ocl.examples.pivot.Class;
import org.eclipse.ocl.examples.pivot.Library;
import org.eclipse.ocl.examples.pivot.Package;
import org.eclipse.ocl.examples.pivot.library.StandardLibraryContribution;

/**
 * This is the [uri/] Standard Library
 * auto-generated from [sourceFile/].
 * It facilitates efficient library loading without the overheads of model reading.
 * <p>
 * This Standard Library may be registered as the definition of a Standard Library for
 * the OCL evaluation framework by invoking {@link #install}.
 * <p>
 * The Standard Library is normally activated when the MetaModelManager attempts
 * to locate a library type when its default Standard Library URI is the same
 * as this Standard Library.
 */
@SuppressWarnings({"nls", "unused"})
public class [javaClass/] extends XMIResourceImpl
{
	/**
	 *	The static package-of-types pivot model of the Standard Library.
	 */
	private static [javaClass/] INSTANCE = null;
	
	/**
	 *	The URI of this Standard Library.
	 */
	public static final String STDLIB_URI = "[uri/]";

	/**
	 * Return the default OCL standard Library. 
	 *  This static definition auto-generated from [sourceFile/]
	 *  is used as the default when no overriding copy is registered. 
	 */
	public static OCLstdlib getDefault() {
		if (INSTANCE == null) {
			Contents contents = new Contents();
			Library library = contents.create("[pkg.name/]", "[pkg.nsPrefix/]", "[pkg.nsURI/]");
			INSTANCE = new OCLstdlib(STDLIB_URI, library);
		}
		return INSTANCE;
	}

	/**
	 * Install this library in the {@link StandardLibraryContribution#REGISTRY}.
	 * This method may be invoked by standalone applications to replicate
	 * the registration that should appear as a standard_library plugin
	 * extension when running within Eclipse. 
	 */
	public static void install() {
		StandardLibraryContribution.REGISTRY.put(STDLIB_URI, new Loader());
	}

	/**
	 * Unnstall this library from the {@link StandardLibraryContribution#REGISTRY}.
	 * This method may be invoked by standalone applications to release the library
	 * resources for garbage collection and memory leakage detection. 
	 */
	public static void uninstall() {
		StandardLibraryContribution.REGISTRY.remove(STDLIB_URI);
		INSTANCE = null;
	}
	
	/**
	 * The Loader shares the Standard Library instance whenever this default library
	 * is loaded from the registry of Standard Libraries populated by the standard_library 
	 * extension point.
	 */
	public static class Loader implements StandardLibraryContribution
	{
		public StandardLibraryContribution getContribution() {
			return this;
		}
		
		public Resource getResource() {
			return getDefault();
		}
	}
	
	/**
	 *	Construct a copy of the OCL Standard Library with specified resource URI,
	 *  and package name, prefix and namespace URI.
	 */
	public static [javaClass/] create(String uri, String name, String nsPrefix, String nsURI) {
		Contents contents = new Contents();
		Library library = contents.create(name, nsPrefix, nsURI);
		return new [javaClass/](uri, library);
	}
	
	/**
	 *	Construct an OCL Standard Library with specified resource URI and library content.
	 */
	public [javaClass/](String uri, Library library) {
		super(URI.createURI(uri));
		getContents().add(library);
	}

	protected static class Contents extends AbstractContents
	{
		protected Library [pkg.getPrefixedSymbolName('library')/];

		protected Library create(String name, String nsPrefix, String nsURI)
		{
			[pkg.getPrefixedSymbolName('library')/] = createLibrary("[pkg.name/]", nsPrefix, nsURI);
			installPackages();
			installOclTypes();
			installPrimitiveTypes();
[if (allEnumerations->notEmpty())]
			installEnumerations();
[/if]
			installParameterTypes();
			installCollectionTypes();
			installClassifierTypes();
			installLambdaTypes();
			installTupleTypes();
			installOperations();
			installIterations();
			installProperties();
			installTemplateSignatures();
			installTemplateBindings();
			installPrecedences();
			installComments();
			return [pkg.getSymbolName()/];
		}
	
		[pkg.definePackages()/]
		[pkg.declareOclTypes()/]
		[pkg.declarePrimitiveTypes()/]
[if (allEnumerations->notEmpty())]
		[pkg.declareEnumerations()/]
[/if]
		[pkg.declareParameterTypes()/]
		[pkg.declareCollectionTypes()/]
		[pkg.declareClassifierTypes()/]
		[pkg.declareTupleTypes()/]
		[pkg.defineOclTypes()/]
		[pkg.definePrimitiveTypes()/]
[if (allEnumerations->notEmpty())]
		[pkg.defineEnumerations()/]
[/if]
		[pkg.defineParameterTypes()/]
		[pkg.defineCollectionTypes()/]
		[pkg.defineClassifierTypes()/]
		[pkg.defineTupleTypes()/]
		[pkg.defineLambdaTypes()/]	
		[pkg.defineOperations()/]	
		[pkg.defineIterations()/]	
		[pkg.defineProperties()/]
		[pkg.defineTemplateSignatures()/]
		[pkg.defineTemplateBindings()/]
		[pkg.definePrecedences()/]
		[pkg.defineComments()/]
	}
}
[/file]
[/let]
[/template]

[template public defineConstantType(type : DataType)]
[if (type.name = 'Boolean')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Boolean;[elseif (type.name = 'Classifier')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Classifier;[elseif (type.name = 'Integer')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Integer;[elseif (type.name = 'Real')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Real;[elseif (type.name = 'String')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._String;[elseif (type.name = 'UnlimitedNatural')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._UnlimitedNatural;[else]
protected final DataType [type.getPrefixedSymbolName('_'+type.partialName())/] = createDataType("[type.name/]");[/if]
[/template]
