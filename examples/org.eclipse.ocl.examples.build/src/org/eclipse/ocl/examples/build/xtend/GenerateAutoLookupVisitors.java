/*******************************************************************************
 * Copyright (c) 2013, 2015 Willink Transformations Ltd., University of York and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Adolfo Sanchez-Barbudo Herrera (University of York) - initial API and implementation
 *******************************************************************************/
package org.eclipse.ocl.examples.build.xtend;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.mwe.core.issues.Issues;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.examples.autogen.lookup.LookupCodeGenerator;
import org.eclipse.ocl.pivot.model.OCLstdlib;
import org.eclipse.ocl.xtext.completeocl.CompleteOCLStandaloneSetup;
import org.eclipse.ocl.xtext.essentialocl.cs2as.EssentialOCLCSLeft2RightVisitor;

public class GenerateAutoLookupVisitors extends GenerateVisitorsXtend
{

	protected String lookupFilePath;
	
	protected String baseProjectPrefix;
	
	protected String baseVisitorPackage;
 
	
	@Override
	public void checkConfiguration(final Issues issues) {
		super.checkConfiguration(issues);
		if (this.lookupFilePath.length() == 0 ) {
			issues.addError(this, "lookupFilePath must be specified");
		}
		if (isDerived() && this.baseProjectPrefix.length() == 0 ) {
			issues.addError(this, "baseProjectPrefix must be specified for derived languages");
		}
		
		if (isDerived() && this.baseVisitorPackage.length() == 0 ) {
			issues.addError(this, "baseVisitorPackage must be specified for derived languages");
		}
	}
	
	@Override
	protected void doSetup() {
		CompleteOCLStandaloneSetup.doSetup();
		OCLstdlib.install();
	}
	
	@SuppressWarnings("null")
	@Override
	public void generateVisitors(@NonNull GenPackage genPackage) {
		boolean useLookup = EssentialOCLCSLeft2RightVisitor.AUTOGENERATED_LOOKUP;
		EssentialOCLCSLeft2RightVisitor.AUTOGENERATED_LOOKUP = false; // Avoid using autogenerated lookup while autogenerating lookup
		try {
			if (isDerived()) {
				LookupCodeGenerator.generate(genPackage, projectPrefix, projectName, lookupFilePath, visitorPackageName, visitorClassName, visitableClassName,
					superProjectPrefix, superProjectName, superVisitorClassName, baseProjectPrefix, baseVisitorPackage);
			} else {
				LookupCodeGenerator.generate(genPackage, projectPrefix, projectName, lookupFilePath, visitorPackageName, visitorClassName, visitableClassName,
					null, null, null, null, null);
			}
		} finally {
			EssentialOCLCSLeft2RightVisitor.AUTOGENERATED_LOOKUP = useLookup;
		}
	}
	

	/**
	 * The name prefix of the project that is base of the project containing
	 * the genmodel and generated EMF sources. (e.g. "BaseProject"). It 
	 * may be null 
	 */
	public void setBaseProjectPrefix(final String baseProjectPrefix) {
		this.baseProjectPrefix = baseProjectPrefix;
	}
	
	/**
	 * The name of the visitor package that is base of the project containing
	 * the common visitor Visitor/Visitable interfances. (e.g. "org.eclipse.pivot.ocl.util"). It 
	 * may be null 
	 */
	public void setBaseVisitorPackage(final String baseVisitorPackage) {
		this.baseVisitorPackage = baseVisitorPackage;
	}
	/**
	 * The path inside the projectName to the Complete OCL file which contains the 
	 * name resolution description (e.g. "model/NameResolution.ocl"). It 
	 * can't be null
	 */
	public void setLookupFilePath(final String lookupFilePath) {
		this.lookupFilePath = lookupFilePath;
	}
}
