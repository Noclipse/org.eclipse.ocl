/*******************************************************************************
 * Copyright (c) 2013, 2015 Willink Transformations Ltd., University of York and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Adolfo Sanchez-Barbudo Herrera (University of York) - initial API and implementation
 *******************************************************************************/
package org.eclipse.ocl.examples.build.xtend;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.mwe.core.issues.Issues;
import org.eclipse.ocl.examples.autogen.lookup.LookupCodeGenerator;
import org.eclipse.ocl.examples.autogen.lookup.utilities.GenPackageHelper;
import org.eclipse.ocl.pivot.model.OCLstdlib;
import org.eclipse.ocl.pivot.utilities.OCL;
import org.eclipse.ocl.xtext.completeocl.CompleteOCLStandaloneSetup;
import org.eclipse.ocl.xtext.essentialocl.cs2as.EssentialOCLCSLeft2RightVisitor;

public class GenerateAutoLookupVisitors extends GenerateVisitorsXtend
{
	protected String lookupFilePath;

	protected String superGenModelFile;
	
	protected String baseProjectName;
	
	protected String baseGenModelFile;
	
	protected GenPackage superGenPackage;
	
	protected GenPackage baseGenPackage;
	
	@Override
	public void checkConfiguration(final Issues issues) {
		//super.checkConfiguration(issues);
		// Till adopted by super classes, put the minimum checks here
		if (!isDefined(projectName)) {
			issues.addError(this, "projectName not specified.");
		}
		if (!isDefined(genModelFile)) {
			issues.addError(this, "genModelFile not specified.");
		}
		if (!isDefined(superProjectName)) {
			issues.addError(this, "superProjectName not specified (use \"\" for a base visitor).");
		}
		// end
		if (!isDefined(lookupFilePath)) {
			issues.addError(this, "lookupFilePath must be specified");
		}
		
		if (isDerived()) {
			if (this.superGenModelFile == null || this.superGenModelFile.length() == 0 ) {
				issues.addError(this, "superGenModelFile must be specified for derived languages");
			}
			
			if (this.baseProjectName == null || this.baseProjectName.length() == 0 ) {
				issues.addError(this, "baseProjectName must be specified for derived languages");
			}
			
			if (this.baseGenModelFile == null || this.baseGenModelFile.length() == 0 ) {
				issues.addError(this, "baseGenModelFile must be specified for derived languages");
			}
		}
	}
	
	@Override
	protected void doPreliminarConfigurations(OCL ocl) {
		// load the genPackages
		URI genModelURI = getGenModelURI(projectName, genModelFile);
		Resource genModelResource = getGenModelResource(ocl, genModelURI);
		GenPackage genPackage = getGenPackage(genModelResource);
	
		
		// And configure missing information required by the inherited mwe component (needed since the component
		// has not adopted the improved design based on genModels
		GenPackageHelper helper = new GenPackageHelper(genPackage);
		if (projectPrefix == null) { projectPrefix = helper.getProjectPrefix(); }
		if (visitorPackageName == null) { visitorPackageName = helper.getVisitorPackageName(); }
		if (visitorClassName == null) { visitorClassName = helper.getVisitorClassName(); }
		if (visitablePackageName == null) { visitablePackageName = helper.getVisitablePackageName(); }
		if (visitableClassName == null) { visitableClassName = helper.getVisitableClassName(); }
		if (modelPackageName == null) { modelPackageName = helper.getModelPackageName(); }
		javaFolder = helper.getSrcJavaFolder();
		if (isDerived()) {
			URI superGenModelURI = getGenModelURI(superProjectName, superGenModelFile);
			Resource superGenModelResource = getGenModelResource(ocl, superGenModelURI);
			superGenPackage = getGenPackage(superGenModelResource);
				
			URI baseGenModelURI = getGenModelURI(baseProjectName, baseGenModelFile);
			Resource baseGenModelResource = getGenModelResource(ocl, baseGenModelURI);
			baseGenPackage = getGenPackage(baseGenModelResource);

			helper = new GenPackageHelper(superGenPackage);
			
			if (!isDefined(superProjectPrefix)) { superProjectPrefix =  helper.getProjectPrefix(); }
			if (!isDefined(superVisitorPackageName)) { superVisitorPackageName = helper.getVisitorPackageName(); }
			if (!isDefined(superVisitorClassName)) { superVisitorClassName = helper.getVisitorClassName(); }
			
		}
	}
	
	
	
	@Override
	protected void doSetup() {
		CompleteOCLStandaloneSetup.doSetup();
		OCLstdlib.install();
	}
	
	@SuppressWarnings("null")
	@Override
	public void generateVisitors(/*@NonNull*/ GenPackage genPackage) {
		boolean useLookup = EssentialOCLCSLeft2RightVisitor.AUTOGENERATED_LOOKUP;
		EssentialOCLCSLeft2RightVisitor.AUTOGENERATED_LOOKUP = false; // Avoid using autogenerated lookup while autogenerating lookup
		try {
			LookupCodeGenerator.generate(genPackage, superGenPackage, baseGenPackage, projectName, lookupFilePath);
		} finally {
			EssentialOCLCSLeft2RightVisitor.AUTOGENERATED_LOOKUP = useLookup;
		}
	}

	/**
	 * The path inside the projectName to the Complete OCL file which contains the 
	 * name resolution description (e.g. "model/NameResolution.ocl"). It 
	 * can't be null
	 */
	public void setLookupFilePath(final String lookupFilePath) {
		this.lookupFilePath = lookupFilePath;
	}
	
	/**
	 * The gen model file path of the super project(e.g. "model/superModel.genmodel"). 
	 * It may be null or ""
	 */
	public void setSuperGenModelFile(final String superGenModelFile) {
		this.superGenModelFile = superGenModelFile;
	}
	
	/**
	 * The gen model file path of the base project(e.g. "model/baseModel.genmodel"). 
	 * It may be null or ""
	 */
	public void setBaseGenModelFile(final String baseGenModelFile) {
		this.baseGenModelFile = baseGenModelFile;
	}
	
	/**
	 * The name of the base project (e.g. "org.my.baseproject"). Must be null or
	 * "" if there is no base project.
	 */
	public void setBaseProjectName(final String baseProjectName) {
		this.baseProjectName = baseProjectName;
	}
}
